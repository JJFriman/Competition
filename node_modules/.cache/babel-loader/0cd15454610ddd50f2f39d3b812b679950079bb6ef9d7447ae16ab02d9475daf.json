{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useWebSocket = () => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    const newSocket = new WebSocket('ws://localhost:8000');\n    newSocket.onopen = () => {\n      console.log('WebSocket connection is open.');\n      setSocket(newSocket);\n    };\n    newSocket.onclose = event => {\n      var _s = $RefreshSig$();\n      console.error('WebSocket connection is closed:', event);\n\n      // Attempt to reconnect after a delay (e.g., 5 seconds)\n      _s(setTimeout(_s(() => {\n        _s();\n        console.log('Attempting to reconnect...');\n        useWebSocket();\n      }, \"3WDaHSt0yQJg9Nv1yCB/RFzG+os=\", false, function () {\n        return [useWebSocket];\n      }), 5000), \"3WDaHSt0yQJg9Nv1yCB/RFzG+os=\", false, function () {\n        return [useWebSocket];\n      });\n    };\n    newSocket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n\n    // Cleanup function to disconnect socket when component unmounts\n    return () => {\n      if (newSocket && newSocket.readyState === WebSocket.OPEN) {\n        newSocket.close();\n      }\n    };\n  }, []);\n  return socket;\n};\n_s2(useWebSocket, \"NvwYO9vJOwIMt5STdlMKfWhuxZw=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useWebSocket","_s2","socket","setSocket","newSocket","WebSocket","onopen","console","log","onclose","event","_s","$RefreshSig$","error","setTimeout","onerror","readyState","OPEN","close"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/useWebSocket.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useWebSocket = () => {\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const newSocket = new WebSocket('ws://localhost:8000');\r\n\r\n    newSocket.onopen = () => {\r\n      console.log('WebSocket connection is open.');\r\n      setSocket(newSocket);\r\n    };\r\n\r\n    newSocket.onclose = (event) => {\r\n      console.error('WebSocket connection is closed:', event);\r\n\r\n      // Attempt to reconnect after a delay (e.g., 5 seconds)\r\n      setTimeout(() => {\r\n        console.log('Attempting to reconnect...');\r\n        useWebSocket();\r\n      }, 5000);\r\n    };\r\n\r\n    newSocket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n\r\n    // Cleanup function to disconnect socket when component unmounts\r\n    return () => {\r\n      if (newSocket && newSocket.readyState === WebSocket.OPEN) {\r\n        newSocket.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return socket;\r\n};\r\n\r\nexport default useWebSocket;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMK,SAAS,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IAEtDD,SAAS,CAACE,MAAM,GAAG,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5CL,SAAS,CAACC,SAAS,CAAC;IACtB,CAAC;IAEDA,SAAS,CAACK,OAAO,GAAIC,KAAK,IAAK;MAAA,IAAAC,EAAA,GAAAC,YAAA;MAC7BL,OAAO,CAACM,KAAK,CAAC,iCAAiC,EAAEH,KAAK,CAAC;;MAEvD;MACAC,EAAA,CAAAG,UAAU,CAAAH,EAAA,CAAC,MAAM;QAAAA,EAAA;QACfJ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzCR,YAAY,CAAC,CAAC;MAChB,CAAC;QAAA,QADCA,YAAY;MAAA,IACX,IAAI,CAAC;QAAA,QADNA,YAAY;MAAA;IAEhB,CAAC;IAEDI,SAAS,CAACW,OAAO,GAAIF,KAAK,IAAK;MAC7BN,OAAO,CAACM,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;;IAED;IACA,OAAO,MAAM;MACX,IAAIT,SAAS,IAAIA,SAAS,CAACY,UAAU,KAAKX,SAAS,CAACY,IAAI,EAAE;QACxDb,SAAS,CAACc,KAAK,CAAC,CAAC;MACnB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOhB,MAAM;AACf,CAAC;AAACD,GAAA,CAlCID,YAAY;AAoClB,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}