{"ast":null,"code":"const handleLopetaClick = async () => {\n  try {\n    await fetchTimes();\n    if (times && times.length > 0) {\n      const groupedByEra = groupTimesByEra(times, 'Alkuerä');\n      console.log('Grouped by era:', groupedByEra);\n      const winnersByRound = {};\n      const allWinners = [];\n\n      // Loop through each round\n      Object.keys(groupedByEra).forEach((eraKey, index) => {\n        const roundKey = `Alkuerä ${index + 1}`;\n\n        // Sort teams in the current round by combined time\n        const sortedTeams = groupedByEra[eraKey].sort((a, b) => a.aika - b.aika);\n\n        // Get the top 6 winners from the current round\n        const roundWinners = sortedTeams.slice(0, 6);\n\n        // Add round winners to the winnersByRound object\n        winnersByRound[roundKey] = roundWinners;\n\n        // Add round winners to the allWinners array\n        allWinners.push(...roundWinners);\n      });\n\n      // Ensure allWinners only contains unique teams\n      const uniqueWinners = Array.from(new Set(allWinners.map(winner => winner.joukkue_id))).map(teamId => ({\n        teamId,\n        combinedTime: allWinners.find(winner => winner.joukkue_id === teamId).aika\n      }));\n\n      // Get additional winners from the remaining teams (up to 6) based on combined time\n      const additionalWinners = uniqueWinners.sort((a, b) => a.combinedTime - b.combinedTime).slice(0, 6);\n\n      // Add additional winners to the winnersByRound object\n      winnersByRound['Additional Winners'] = additionalWinners;\n      console.log('Winners by Round:', winnersByRound);\n    } else {\n      alert('No times available.');\n    }\n  } catch (error) {\n    console.error('Error handling lopeta click:', error);\n  }\n};","map":{"version":3,"names":["handleLopetaClick","fetchTimes","times","length","groupedByEra","groupTimesByEra","console","log","winnersByRound","allWinners","Object","keys","forEach","eraKey","index","roundKey","sortedTeams","sort","a","b","aika","roundWinners","slice","push","uniqueWinners","Array","from","Set","map","winner","joukkue_id","teamId","combinedTime","find","additionalWinners","alert","error"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["const handleLopetaClick = async () => {\r\n  try {\r\n    await fetchTimes();\r\n\r\n    if (times && times.length > 0) {\r\n      const groupedByEra = groupTimesByEra(times, 'Alkuerä');\r\n      console.log('Grouped by era:', groupedByEra);\r\n\r\n      const winnersByRound = {};\r\n      const allWinners = [];\r\n\r\n      // Loop through each round\r\n      Object.keys(groupedByEra).forEach((eraKey, index) => {\r\n        const roundKey = `Alkuerä ${index + 1}`;\r\n\r\n        // Sort teams in the current round by combined time\r\n        const sortedTeams = groupedByEra[eraKey]\r\n          .sort((a, b) => a.aika - b.aika);\r\n\r\n        // Get the top 6 winners from the current round\r\n        const roundWinners = sortedTeams.slice(0, 6);\r\n\r\n        // Add round winners to the winnersByRound object\r\n        winnersByRound[roundKey] = roundWinners;\r\n\r\n        // Add round winners to the allWinners array\r\n        allWinners.push(...roundWinners);\r\n      });\r\n\r\n      // Ensure allWinners only contains unique teams\r\n      const uniqueWinners = Array.from(new Set(allWinners.map((winner) => winner.joukkue_id)))\r\n        .map((teamId) => ({\r\n          teamId,\r\n          combinedTime: allWinners.find((winner) => winner.joukkue_id === teamId).aika,\r\n        }));\r\n\r\n      // Get additional winners from the remaining teams (up to 6) based on combined time\r\n      const additionalWinners = uniqueWinners\r\n        .sort((a, b) => a.combinedTime - b.combinedTime)\r\n        .slice(0, 6);\r\n\r\n      // Add additional winners to the winnersByRound object\r\n      winnersByRound['Additional Winners'] = additionalWinners;\r\n\r\n      console.log('Winners by Round:', winnersByRound);\r\n    } else {\r\n      alert('No times available.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling lopeta click:', error);\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,UAAU,CAAC,CAAC;IAElB,IAAIC,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MAC7B,MAAMC,YAAY,GAAGC,eAAe,CAACH,KAAK,EAAE,SAAS,CAAC;MACtDI,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,YAAY,CAAC;MAE5C,MAAMI,cAAc,GAAG,CAAC,CAAC;MACzB,MAAMC,UAAU,GAAG,EAAE;;MAErB;MACAC,MAAM,CAACC,IAAI,CAACP,YAAY,CAAC,CAACQ,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;QACnD,MAAMC,QAAQ,GAAI,WAAUD,KAAK,GAAG,CAAE,EAAC;;QAEvC;QACA,MAAME,WAAW,GAAGZ,YAAY,CAACS,MAAM,CAAC,CACrCI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,CAAC;;QAElC;QACA,MAAMC,YAAY,GAAGL,WAAW,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;QAE5C;QACAd,cAAc,CAACO,QAAQ,CAAC,GAAGM,YAAY;;QAEvC;QACAZ,UAAU,CAACc,IAAI,CAAC,GAAGF,YAAY,CAAC;MAClC,CAAC,CAAC;;MAEF;MACA,MAAMG,aAAa,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAClB,UAAU,CAACmB,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,UAAU,CAAC,CAAC,CAAC,CACrFF,GAAG,CAAEG,MAAM,KAAM;QAChBA,MAAM;QACNC,YAAY,EAAEvB,UAAU,CAACwB,IAAI,CAAEJ,MAAM,IAAKA,MAAM,CAACC,UAAU,KAAKC,MAAM,CAAC,CAACX;MAC1E,CAAC,CAAC,CAAC;;MAEL;MACA,MAAMc,iBAAiB,GAAGV,aAAa,CACpCP,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACc,YAAY,GAAGb,CAAC,CAACa,YAAY,CAAC,CAC/CV,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;MAEd;MACAd,cAAc,CAAC,oBAAoB,CAAC,GAAG0B,iBAAiB;MAExD5B,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEC,cAAc,CAAC;IAClD,CAAC,MAAM;MACL2B,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd9B,OAAO,CAAC8B,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACtD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}