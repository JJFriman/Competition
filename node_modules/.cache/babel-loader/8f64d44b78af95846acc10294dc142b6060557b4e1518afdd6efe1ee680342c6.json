{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Competition.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport '../css/Competition.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Competition() {\n  _s();\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [finishedTimes, setFinishedTimes] = useState({});\n  const [updatedGroupData, setUpdatedGroupData] = useState(null);\n  useEffect(() => {\n    const socket = io('http://localhost:8000');\n    socket.on('selectedGroupUpdate', updatedGroupData => {\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\n    });\n    socket.on('groupDataUpdate', updatedGroupData => {\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n      console.log(par);\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\n    });\n    socket.on('finishedTimeUpdate', finishedTimeData => {\n      try {\n        const parsedData = JSON.parse(finishedTimeData);\n        if (parsedData && parsedData.teamId && parsedData.finishedTime && parsedData.era) {\n          setFinishedTimes(prevFinishedTimes => {\n            const updatedFinishedTimes = {\n              ...prevFinishedTimes,\n              [parsedData.teamId]: {\n                ...prevFinishedTimes[parsedData.teamId],\n                [parsedData.era]: {\n                  finishedTime: parsedData.finishedTime,\n                  era: parsedData.era\n                }\n              }\n            };\n            localStorage.setItem('finishedTimes', JSON.stringify(updatedFinishedTimes));\n            console.log('Updated finishedTimes:', updatedFinishedTimes);\n            return updatedFinishedTimes;\n          });\n        } else {\n          console.error('Invalid finished time data:', finishedTimeData);\n        }\n      } catch (error) {\n        console.error('Error parsing finished time data:', error);\n      }\n    });\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\n    if (storedSelectedGroup) {\n      const parsedData = JSON.parse(storedSelectedGroup);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n    }\n    return () => {\n      if (socket.connected) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const storedFinishedTimes = localStorage.getItem('finishedTimes');\n    if (storedFinishedTimes) {\n      const parsedFinishedTimes = JSON.parse(storedFinishedTimes);\n      console.log('Parsed Finished Times:', parsedFinishedTimes);\n      setFinishedTimes(parsedFinishedTimes);\n    }\n  }, []);\n  const getBackgroundColor = teamId => {\n    var _teamTimeData$updated;\n    const teamTimeData = finishedTimes[teamId];\n    if (!updatedGroupData || !updatedGroupData.teams || !teamTimeData) {\n      return 'transparent';\n    }\n    const time = (_teamTimeData$updated = teamTimeData[updatedGroupData.groupInfo]) === null || _teamTimeData$updated === void 0 ? void 0 : _teamTimeData$updated.finishedTime;\n    if (!time) {\n      return 'transparent';\n    }\n    const teamsInSelectedGroup = updatedGroupData.teams;\n    const timesInSelectedGroup = teamsInSelectedGroup.filter(team => finishedTimes.hasOwnProperty(team.joukkue_id)).map(team => {\n      var _finishedTimes$team$j;\n      return (_finishedTimes$team$j = finishedTimes[team.joukkue_id][updatedGroupData.groupInfo]) === null || _finishedTimes$team$j === void 0 ? void 0 : _finishedTimes$team$j.finishedTime;\n    });\n    const validTimes = timesInSelectedGroup.filter(time => typeof time === 'string');\n    const sortedTimes = validTimes.sort((timeA, timeB) => {\n      const [minutesA, secondsA, millisecondsA] = timeA.split(':').map(Number);\n      const [minutesB, secondsB, millisecondsB] = timeB.split(':').map(Number);\n      if (minutesA !== minutesB) {\n        return minutesA - minutesB;\n      } else if (secondsA !== secondsB) {\n        return secondsA - secondsB;\n      } else {\n        return millisecondsA - millisecondsB;\n      }\n    });\n    const teamRank = sortedTimes.findIndex(t => t === time) + 1;\n    const tiedTeams = sortedTimes.filter(t => t === time);\n    if (tiedTeams.length > 1) {\n      return teamRank <= 3 ? ['gold', 'silver', 'bronze'][teamRank - 1] : 'transparent';\n    }\n    switch (teamRank) {\n      case 1:\n        return 'gold';\n      case 2:\n        return 'silver';\n      case 3:\n        return 'bronze';\n      default:\n        return 'transparent';\n    }\n  };\n  const getTeamTimeForEra = (teamId, era) => {\n    const teamData = finishedTimes[teamId];\n    if (teamData && teamData[era] && teamData[era].finishedTime) {\n      return teamData[era].finishedTime;\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Competition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), updatedGroupData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: updatedGroupData.groupInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Tasks:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), updatedGroupData.selectedTasks && updatedGroupData.selectedTasks.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: updatedGroupData.selectedTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: `Task ${index + 1}: `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 19\n          }, this), task.tehtävä_nimi]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No selected tasks available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: updatedGroupData.teams.map(team => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: getBackgroundColor(team.joukkue_id),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: team.joukkue_nimi\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this), updatedGroupData.selectedTasks && updatedGroupData.selectedTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: `${task.tehtävä_nimi} Finished Time: ${getTeamTimeForEra(team.joukkue_id, updatedGroupData.groupInfo) || 'Not available'}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Members: \", team.jäsenet]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this)]\n        }, team.joukkue_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No selected group available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n_s(Competition, \"2Cjw4fJiUqIyV0ZzrHaJmYG7b/U=\");\n_c = Competition;\nexport default Competition;\nvar _c;\n$RefreshReg$(_c, \"Competition\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","Competition","_s","selectedGroup","setSelectedGroup","finishedTimes","setFinishedTimes","updatedGroupData","setUpdatedGroupData","socket","on","parsedData","JSON","parse","localStorage","setItem","stringify","console","log","par","finishedTimeData","teamId","finishedTime","era","prevFinishedTimes","updatedFinishedTimes","error","storedSelectedGroup","getItem","connected","disconnect","storedFinishedTimes","parsedFinishedTimes","getBackgroundColor","_teamTimeData$updated","teamTimeData","teams","time","groupInfo","teamsInSelectedGroup","timesInSelectedGroup","filter","team","hasOwnProperty","joukkue_id","map","_finishedTimes$team$j","validTimes","sortedTimes","sort","timeA","timeB","minutesA","secondsA","millisecondsA","split","Number","minutesB","secondsB","millisecondsB","teamRank","findIndex","t","tiedTeams","length","getTeamTimeForEra","teamData","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedTasks","task","index","tehtävä_nimi","className","joukkue_nimi","jäsenet","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/Competition.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport '../css/Competition.css';\r\nfunction Competition() {\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  const [finishedTimes, setFinishedTimes] = useState({});\r\n  const [updatedGroupData, setUpdatedGroupData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const socket = io('http://localhost:8000');\r\n\r\n    socket.on('selectedGroupUpdate', (updatedGroupData) => {\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\r\n\r\n    });\r\n    \r\n    socket.on('groupDataUpdate', (updatedGroupData) => {\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n      console.log(par)\r\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\r\n    });\r\n\r\n    socket.on('finishedTimeUpdate', (finishedTimeData) => {\r\n    \r\n      try {\r\n        const parsedData = JSON.parse(finishedTimeData);\r\n    \r\n        if (parsedData && parsedData.teamId && parsedData.finishedTime && parsedData.era) {\r\n          setFinishedTimes((prevFinishedTimes) => {\r\n            const updatedFinishedTimes = {\r\n              ...prevFinishedTimes,\r\n              [parsedData.teamId]: {\r\n                ...prevFinishedTimes[parsedData.teamId],\r\n                [parsedData.era]: {\r\n                  finishedTime: parsedData.finishedTime,\r\n                  era: parsedData.era,\r\n                },\r\n              },\r\n            };\r\n    \r\n            localStorage.setItem('finishedTimes', JSON.stringify(updatedFinishedTimes));\r\n    \r\n            console.log('Updated finishedTimes:', updatedFinishedTimes);\r\n            return updatedFinishedTimes;\r\n          });\r\n        } else {\r\n          console.error('Invalid finished time data:', finishedTimeData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing finished time data:', error);\r\n      }\r\n    });\r\n    \r\n    \r\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\r\n    if (storedSelectedGroup) {\r\n      const parsedData = JSON.parse(storedSelectedGroup);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n    }\r\n\r\n    return () => {\r\n      if (socket.connected) {\r\n        socket.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const storedFinishedTimes = localStorage.getItem('finishedTimes');\r\n    if (storedFinishedTimes) {\r\n      const parsedFinishedTimes = JSON.parse(storedFinishedTimes);\r\n      console.log('Parsed Finished Times:', parsedFinishedTimes);\r\n      setFinishedTimes(parsedFinishedTimes);\r\n    }\r\n  }, []);\r\n\r\n  const getBackgroundColor = (teamId) => {\r\n    const teamTimeData = finishedTimes[teamId];\r\n  \r\n    if (!updatedGroupData || !updatedGroupData.teams || !teamTimeData) {\r\n      return 'transparent';\r\n    }\r\n  \r\n    const time = teamTimeData[updatedGroupData.groupInfo]?.finishedTime;\r\n  \r\n    if (!time) {\r\n      return 'transparent';\r\n    }\r\n  \r\n    const teamsInSelectedGroup = updatedGroupData.teams;\r\n  \r\n    const timesInSelectedGroup = teamsInSelectedGroup\r\n      .filter((team) => finishedTimes.hasOwnProperty(team.joukkue_id))\r\n      .map((team) => finishedTimes[team.joukkue_id][updatedGroupData.groupInfo]?.finishedTime);\r\n  \r\n    const validTimes = timesInSelectedGroup.filter((time) => typeof time === 'string');\r\n  \r\n    const sortedTimes = validTimes.sort((timeA, timeB) => {\r\n      const [minutesA, secondsA, millisecondsA] = timeA.split(':').map(Number);\r\n      const [minutesB, secondsB, millisecondsB] = timeB.split(':').map(Number);\r\n  \r\n      if (minutesA !== minutesB) {\r\n        return minutesA - minutesB;\r\n      } else if (secondsA !== secondsB) {\r\n        return secondsA - secondsB;\r\n      } else {\r\n        return millisecondsA - millisecondsB;\r\n      }\r\n    });\r\n  \r\n    const teamRank = sortedTimes.findIndex((t) => t === time) + 1;\r\n  \r\n    const tiedTeams = sortedTimes.filter((t) => t === time);\r\n  \r\n    if (tiedTeams.length > 1) {\r\n      return teamRank <= 3 ? ['gold', 'silver', 'bronze'][teamRank - 1] : 'transparent';\r\n    }\r\n  \r\n    switch (teamRank) {\r\n      case 1:\r\n        return 'gold';\r\n      case 2:\r\n        return 'silver';\r\n      case 3:\r\n        return 'bronze';\r\n      default:\r\n        return 'transparent';\r\n    }\r\n  };\r\n\r\n  const getTeamTimeForEra = (teamId, era) => {\r\n    const teamData = finishedTimes[teamId];\r\n  \r\n    if (teamData && teamData[era] && teamData[era].finishedTime) {\r\n      return teamData[era].finishedTime;\r\n    }\r\n  \r\n    return null;\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  return (\r\n    <div>\r\n      <h1>Competition</h1>\r\n      {updatedGroupData ? (\r\n        <div>\r\n          <h2>{updatedGroupData.groupInfo}</h2>\r\n          <h3>Selected Tasks:</h3>\r\n          {updatedGroupData.selectedTasks && updatedGroupData.selectedTasks.length > 0 ? (\r\n            <ul>\r\n              {updatedGroupData.selectedTasks.map((task, index) => (\r\n                <li key={index}>\r\n                  <strong>{`Task ${index + 1}: `}</strong>\r\n                  {task.tehtävä_nimi}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>No selected tasks available.</p>\r\n          )}\r\n          <ul>\r\n            {updatedGroupData.teams.map((team) => (\r\n              <li key={team.joukkue_id} className={getBackgroundColor(team.joukkue_id)}>\r\n                <h3>{team.joukkue_nimi}</h3>\r\n                {updatedGroupData.selectedTasks &&\r\n                  updatedGroupData.selectedTasks.map((task, index) => (\r\n                    <p key={index}>\r\n                      {`${task.tehtävä_nimi} Finished Time: ${getTeamTimeForEra(\r\n                        team.joukkue_id,\r\n                        updatedGroupData.groupInfo\r\n                      ) || 'Not available'}`}\r\n                    </p>\r\n                  ))}\r\n                <p>Members: {team.jäsenet}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>No selected group available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Competition;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}