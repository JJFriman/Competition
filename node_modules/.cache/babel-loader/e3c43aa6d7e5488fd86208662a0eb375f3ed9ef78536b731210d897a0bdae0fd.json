{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const groupTimesByEra = (times, eraName) => {\n    const filteredTimes = times.filter(time => time.era.includes(eraName));\n    const groupedTimes = {};\n    filteredTimes.forEach(time => {\n      const eraNumber = time.era.match(/\\d+/);\n      if (eraNumber) {\n        const key = `Era ${eraNumber[0]}`;\n        if (!groupedTimes[key]) {\n          groupedTimes[key] = [];\n        }\n        groupedTimes[key].push(time);\n      }\n    });\n    return groupedTimes;\n  };\n  const handleLopetaClick = async () => {\n    try {\n      await fetchTimes();\n      if (times && times.length > 0) {\n        const groupedByEra = groupTimesByEra(times, 'Alkuerä');\n        console.log('Grouped by era:', groupedByEra);\n        const winnersByRound = {};\n        const additionalWinners = [];\n\n        // Loop through each round\n        Object.keys(groupedByEra).forEach((eraKey, index) => {\n          const roundKey = `Alkuerä ${index + 1}`;\n\n          // Combine times for each team in the current round\n          const combinedTimes = {};\n          groupedByEra[eraKey].forEach(time => {\n            const teamId = time.joukkue_id;\n            if (!combinedTimes[teamId]) {\n              combinedTimes[teamId] = 0;\n            }\n            combinedTimes[teamId] += time.aika;\n          });\n\n          // Sort teams in the current round by combined time\n          const sortedTeams = Object.keys(combinedTimes).map(teamId => ({\n            teamId,\n            combinedTime: combinedTimes[teamId]\n          })).sort((a, b) => a.combinedTime - b.combinedTime).slice(0, 6);\n\n          // Add round winners to the winnersByRound object\n          winnersByRound[roundKey] = sortedTeams;\n\n          // Add teams to additionalWinners\n          additionalWinners.push(...sortedTeams);\n        });\n\n        // Remove duplicate teams from additionalWinners\n        const uniqueAdditionalWinners = Object.values(additionalWinners.reduce((acc, team) => {\n          acc[team.teamId] = team;\n          return acc;\n        }, {}));\n        console.log('Winners by Round:', winnersByRound);\n        console.log('Additional Winners:', uniqueAdditionalWinners);\n      } else {\n        alert('No times available.');\n      }\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","error","console","groupTimesByEra","filteredTimes","filter","time","era","includes","groupedTimes","forEach","eraNumber","match","key","push","handleLopetaClick","length","groupedByEra","log","winnersByRound","additionalWinners","Object","keys","eraKey","index","roundKey","combinedTimes","teamId","joukkue_id","aika","sortedTeams","map","combinedTime","sort","a","b","slice","uniqueAdditionalWinners","values","reduce","acc","team","alert","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const groupTimesByEra = (times, eraName) => {\r\n    const filteredTimes = times.filter((time) => time.era.includes(eraName));\r\n  \r\n    const groupedTimes = {};\r\n    filteredTimes.forEach((time) => {\r\n      const eraNumber = time.era.match(/\\d+/);\r\n      if (eraNumber) {\r\n        const key = `Era ${eraNumber[0]}`;\r\n        if (!groupedTimes[key]) {\r\n          groupedTimes[key] = [];\r\n        }\r\n        groupedTimes[key].push(time);\r\n      }\r\n    });\r\n  \r\n    return groupedTimes;\r\n  };\r\n\r\nconst handleLopetaClick = async () => {\r\n  try {\r\n    await fetchTimes();\r\n\r\n    if (times && times.length > 0) {\r\n      const groupedByEra = groupTimesByEra(times, 'Alkuerä');\r\n      console.log('Grouped by era:', groupedByEra);\r\n\r\n      const winnersByRound = {};\r\n      const additionalWinners = [];\r\n\r\n      // Loop through each round\r\n      Object.keys(groupedByEra).forEach((eraKey, index) => {\r\n        const roundKey = `Alkuerä ${index + 1}`;\r\n\r\n        // Combine times for each team in the current round\r\n        const combinedTimes = {};\r\n        groupedByEra[eraKey].forEach((time) => {\r\n          const teamId = time.joukkue_id;\r\n          if (!combinedTimes[teamId]) {\r\n            combinedTimes[teamId] = 0;\r\n          }\r\n          combinedTimes[teamId] += time.aika;\r\n        });\r\n\r\n        // Sort teams in the current round by combined time\r\n        const sortedTeams = Object.keys(combinedTimes)\r\n          .map((teamId) => ({ teamId, combinedTime: combinedTimes[teamId] }))\r\n          .sort((a, b) => a.combinedTime - b.combinedTime)\r\n          .slice(0, 6);\r\n\r\n        // Add round winners to the winnersByRound object\r\n        winnersByRound[roundKey] = sortedTeams;\r\n\r\n        // Add teams to additionalWinners\r\n        additionalWinners.push(...sortedTeams);\r\n      });\r\n\r\n      // Remove duplicate teams from additionalWinners\r\n      const uniqueAdditionalWinners = Object.values(\r\n        additionalWinners.reduce((acc, team) => {\r\n          acc[team.teamId] = team;\r\n          return acc;\r\n        }, {})\r\n      );\r\n\r\n      console.log('Winners by Round:', winnersByRound);\r\n      console.log('Additional Winners:', uniqueAdditionalWinners);\r\n    } else {\r\n      alert('No times available.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling lopeta click:', error);\r\n  }\r\n};\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}