{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp2\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport useGroupData from './UseGroupData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({});\n  const [lapCount, setLapCount] = useState({});\n  const intervalIdRef = useRef(null);\n  const {\n    selectedGroup\n  } = useGroupData();\n  const lapTimerHandler = lapTimerData => {\n    const {\n      teamId,\n      taskName\n    } = lapTimerData;\n    if (!startTime) {\n      console.error('Error: startTime is not set.');\n      return;\n    }\n    const previousLapsTotalTime = Array.isArray(laps[teamId]) ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0) : 0;\n    const existingLapIndex = Array.isArray(laps[teamId]) ? laps[teamId].findIndex(lap => lap.taskName === taskName) : -1;\n    let lapTime;\n    if (existingLapIndex !== -1) {\n      lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\n      console.log(`Team: ${teamId}, Task: ${taskName}, Updated Lap Time: ${lapTime} milliseconds`);\n    } else {\n      lapTime = elapsedTime * 10 - previousLapsTotalTime;\n\n      // Check if lap time exceeds max_aika for the task\n      const task = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.find(t => t.tehtävä_nimi === taskName);\n      if (task && lapTime > task.max_aika * 1000) {\n        lapTime = task.max_aika * 1000;\n        console.log(`Adjusted Lap Time for ${taskName}: ${lapTime} milliseconds`);\n        setLapCount(prevLapCount => ({\n          ...prevLapCount,\n          [teamId]: (prevLapCount[teamId] || 0) + 1\n        }));\n        setLaps(prevLaps => {\n          const updatedLaps = {\n            ...prevLaps\n          };\n\n          // Add lap with max_aika time\n          updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n            taskName,\n            lapTime\n          }];\n\n          // Check if all required laps are completed for the team\n          const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\n          if (currentLapCount === 3) {\n            const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n            console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n          }\n          return updatedLaps;\n        });\n        return; // Skip the rest of the logic\n      }\n\n      console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\n    }\n    setLapCount(prevLapCount => ({\n      ...prevLapCount,\n      [teamId]: (prevLapCount[teamId] || 0) + 1\n    }));\n    setLaps(prevLaps => {\n      const updatedLaps = {\n        ...prevLaps\n      };\n      if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\n        return prevLaps;\n      }\n      const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\n      if (existingLapIndex !== -1) {\n        updatedLaps[teamId][existingLapIndex] = {\n          taskName,\n          lapTime\n        };\n      } else {\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n          taskName,\n          lapTime\n        }];\n      }\n      if (currentLapCount + 1 === 3) {\n        const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n        console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n      }\n      return updatedLaps;\n    });\n  };\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    socket.on('timerStart', startTimerHandler);\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime, lapCount, laps]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    const teamLaps = laps[teamId] || [];\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n    return combinedTime;\n  };\n\n  // Render the teams from selectedGroup\n  const renderTeams = () => {\n    if (!selectedGroup || !selectedGroup.teams) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No teams available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 14\n      }, this);\n    }\n    return selectedGroup.teams.map(team => {\n      var _laps$team$joukkue_id, _laps$team$joukkue_id2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Team: \", team.joukkue_nimi]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [(_laps$team$joukkue_id = laps[team.joukkue_id]) === null || _laps$team$joukkue_id === void 0 ? void 0 : _laps$team$joukkue_id.map(lap => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n          }, `${team.joukkue_id}-${lap.taskName}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)), ((_laps$team$joukkue_id2 = laps[team.joukkue_id]) === null || _laps$team$joukkue_id2 === void 0 ? void 0 : _laps$team$joukkue_id2.length) === 3 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Combined Time: \", formatTime(getCombinedTime(team.joukkue_id))]\n          }, `${team.joukkue_id}-combined`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)]\n      }, team.joukkue_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }, this);\n    });\n  };\n\n  // useEffect to check if all teams have completed their laps\n  useEffect(() => {\n    var _selectedGroup$teams;\n    const allLapsCompleted = selectedGroup === null || selectedGroup === void 0 ? void 0 : (_selectedGroup$teams = selectedGroup.teams) === null || _selectedGroup$teams === void 0 ? void 0 : _selectedGroup$teams.every(team => {\n      const teamLaps = laps[team.joukkue_id] || [];\n      return teamLaps.length === 3;\n    });\n    if (allLapsCompleted) {\n      setIsRunning(false);\n    } else {\n      var _selectedGroup$teams2;\n      selectedGroup === null || selectedGroup === void 0 ? void 0 : (_selectedGroup$teams2 = selectedGroup.teams) === null || _selectedGroup$teams2 === void 0 ? void 0 : _selectedGroup$teams2.forEach(team => {\n        const teamLaps = laps[team.joukkue_id] || [];\n        if (teamLaps.length < 3) {\n          const missingLapsCount = 3 - teamLaps.length;\n          for (let i = 0; i < missingLapsCount; i++) {\n            // Assuming \"Default Lap\" as the taskName for the automatically added laps\n            const lapData = {\n              teamId: team.joukkue_id,\n              taskName: 'Default Lap'\n            };\n\n            // Trigger the lap timer handler with the automatically added lap data\n            lapTimerHandler(lapData);\n          }\n        }\n      });\n    }\n  }, [selectedGroup, laps]);\n  const formatTime = milliseconds => {\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const remainingSeconds = totalSeconds % 60;\n    const hundredths = Math.floor(milliseconds % 1000 / 10);\n    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-times-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Maximum Time for Each Task:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Task: \", task.tehtävä_nimi, \", Maximum Time: \", formatTime(task.max_aika * 1000)]\n        }, `${task.tehtävä_id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), renderTeams()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"NpUzDrt8x2bXyTk/sKjUtU1wvsE=\", false, function () {\n  return [useGroupData];\n});\n_c = NewAjastinChild;\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","useGroupData","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","selectedGroup","lapTimerHandler","lapTimerData","teamId","taskName","console","error","previousLapsTotalTime","Array","isArray","reduce","totalTime","lap","lapTime","existingLapIndex","findIndex","log","task","selectedTasks","find","t","tehtävä_nimi","max_aika","prevLapCount","prevLaps","updatedLaps","currentLapCount","length","combinedTime","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","on","off","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","teamLaps","renderTeams","teams","children","fileName","_jsxFileName","lineNumber","columnNumber","map","team","_laps$team$joukkue_id","_laps$team$joukkue_id2","joukkue_nimi","joukkue_id","formatTime","_selectedGroup$teams","allLapsCompleted","every","_selectedGroup$teams2","forEach","missingLapsCount","i","lapData","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","className","index","tehtävä_id","_c","$RefreshReg$"],"sources":["C:/xampp2/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport useGroupData from './UseGroupData';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({});\r\n  const [lapCount, setLapCount] = useState({});\r\n  const intervalIdRef = useRef(null);\r\n  const { selectedGroup } = useGroupData();\r\n\r\n  const lapTimerHandler = (lapTimerData) => {\r\n    const { teamId, taskName } = lapTimerData;\r\n\r\n    if (!startTime) {\r\n      console.error('Error: startTime is not set.');\r\n      return;\r\n    }\r\n\r\n    const previousLapsTotalTime = Array.isArray(laps[teamId])\r\n      ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0)\r\n      : 0;\r\n\r\n    const existingLapIndex = Array.isArray(laps[teamId])\r\n      ? laps[teamId].findIndex((lap) => lap.taskName === taskName)\r\n      : -1;\r\n\r\n    let lapTime;\r\n\r\n    if (existingLapIndex !== -1) {\r\n      lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\r\n      console.log(`Team: ${teamId}, Task: ${taskName}, Updated Lap Time: ${lapTime} milliseconds`);\r\n    } else {\r\n      lapTime = elapsedTime * 10 - previousLapsTotalTime;\r\n\r\n      // Check if lap time exceeds max_aika for the task\r\n      const task = selectedGroup?.selectedTasks.find((t) => t.tehtävä_nimi === taskName);\r\n      if (task && lapTime > task.max_aika * 1000) {\r\n        lapTime = task.max_aika * 1000;\r\n        console.log(`Adjusted Lap Time for ${taskName}: ${lapTime} milliseconds`);\r\n\r\n        setLapCount((prevLapCount) => ({\r\n          ...prevLapCount,\r\n          [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n        }));\r\n\r\n        setLaps((prevLaps) => {\r\n          const updatedLaps = { ...prevLaps };\r\n\r\n          // Add lap with max_aika time\r\n          updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n\r\n          // Check if all required laps are completed for the team\r\n          const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\r\n\r\n          if (currentLapCount === 3) {\r\n            const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n            console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n          }\r\n\r\n          return updatedLaps;\r\n        });\r\n\r\n        return; // Skip the rest of the logic\r\n      }\r\n\r\n      console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\r\n    }\r\n\r\n    setLapCount((prevLapCount) => ({\r\n      ...prevLapCount,\r\n      [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n    }));\r\n\r\n    setLaps((prevLaps) => {\r\n      const updatedLaps = { ...prevLaps };\r\n\r\n      if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\r\n        return prevLaps;\r\n      }\r\n\r\n      const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\r\n\r\n      if (existingLapIndex !== -1) {\r\n        updatedLaps[teamId][existingLapIndex] = { taskName, lapTime };\r\n      } else {\r\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n      }\r\n\r\n      if (currentLapCount + 1 === 3) {\r\n        const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n        console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n      }\r\n\r\n      return updatedLaps;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\n    socket.on('timerStart', startTimerHandler);\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime, lapCount, laps]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  const getCombinedTime = (teamId) => {\r\n    const teamLaps = laps[teamId] || [];\r\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n    return combinedTime;\r\n  };\r\n\r\n  // Render the teams from selectedGroup\r\n  const renderTeams = () => {\r\n    if (!selectedGroup || !selectedGroup.teams) {\r\n      return <p>No teams available.</p>;\r\n    }\r\n\r\n    return selectedGroup.teams.map((team) => (\r\n      <div key={team.joukkue_id}>\r\n        <h4>Team: {team.joukkue_nimi}</h4>\r\n        <ul>\r\n          {laps[team.joukkue_id]?.map((lap) => (\r\n            <li key={`${team.joukkue_id}-${lap.taskName}`}>\r\n              Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n            </li>\r\n          ))}\r\n\r\n          {laps[team.joukkue_id]?.length === 3 && (\r\n            <li key={`${team.joukkue_id}-combined`}>\r\n              Combined Time: {formatTime(getCombinedTime(team.joukkue_id))}\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  // useEffect to check if all teams have completed their laps\r\n  useEffect(() => {\r\n    const allLapsCompleted = selectedGroup?.teams?.every((team) => {\r\n      const teamLaps = laps[team.joukkue_id] || [];\r\n      return teamLaps.length === 3;\r\n    });\r\n\r\n    if (allLapsCompleted) {\r\n      setIsRunning(false);\r\n    } else {\r\n      selectedGroup?.teams?.forEach((team) => {\r\n        const teamLaps = laps[team.joukkue_id] || [];\r\n        if (teamLaps.length < 3) {\r\n          const missingLapsCount = 3 - teamLaps.length;\r\n          for (let i = 0; i < missingLapsCount; i++) {\r\n            // Assuming \"Default Lap\" as the taskName for the automatically added laps\r\n            const lapData = {\r\n              teamId: team.joukkue_id,\r\n              taskName: 'Default Lap',\r\n            };\r\n\r\n            // Trigger the lap timer handler with the automatically added lap data\r\n            lapTimerHandler(lapData);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [selectedGroup, laps]);\r\n\r\n  const formatTime = (milliseconds) => {\r\n    const totalSeconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(totalSeconds / 60);\r\n    const remainingSeconds = totalSeconds % 60;\r\n    const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"max-times-container\">\r\n        <h4>Maximum Time for Each Task:</h4>\r\n        <ul>\r\n          {selectedGroup?.selectedTasks.map((task, index) => (\r\n            <li key={`${task.tehtävä_id}-${index}`}>\r\n              Task: {task.tehtävä_nimi}, Maximum Time: {formatTime(task.max_aika * 1000)}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        {renderTeams()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}