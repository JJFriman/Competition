{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Ajastin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst Ajastin = () => {\n  _s();\n  const {\n    teamId\n  } = useParams();\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [taskTimes, setTaskTimes] = useState({});\n  useEffect(() => {\n    document.title = `Team ${teamId}`;\n    const newSocket = io('http://localhost:8000');\n    newSocket.on('connect', () => {\n      console.log('WebSocket connection is open.');\n    });\n    newSocket.on('disconnect', () => {\n      console.log('WebSocket connection is closed.');\n    });\n    newSocket.on('selectedGroupUpdate', updatedGroupData => {\n      console.log('Received updated group data:', updatedGroupData);\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      setIsRunning(false);\n      setElapsedTime(0);\n      setTaskTimes({});\n      localStorage.setItem('selectedGroup', updatedGroupData);\n    });\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\n    if (storedSelectedGroup) {\n      const parsedData = JSON.parse(storedSelectedGroup);\n      setSelectedGroup(parsedData);\n    }\n    socket.emit('join', {\n      teamId\n    });\n    return () => {\n      if (newSocket.connected) {\n        newSocket.disconnect();\n      }\n    };\n  }, [teamId]);\n  useEffect(() => {\n    const handleTimerUpdate = () => {\n      socket.emit('timerUpdate', {\n        teamId,\n        era: selectedGroup.groupInfo,\n        taskName: selectedGroup.selectedTasks[0].tehtävä_nimi,\n        isRunning,\n        elapsedTime: taskTimes[selectedGroup.selectedTasks[0].tehtävä_nimi] || 0\n      });\n    };\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 10);\n        handleTimerUpdate();\n      }, 10);\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }, [isRunning, taskTimes, selectedGroup, teamId]);\n  const startTimer = () => {\n    setIsRunning(true);\n  };\n  const stopTimer = () => {\n    setIsRunning(false);\n    setTaskTimes(prevTaskTimes => ({\n      ...prevTaskTimes,\n      [selectedGroup.selectedTasks[0].tehtävä_nimi]: (prevTaskTimes[selectedGroup.selectedTasks[0].tehtävä_nimi] || 0) + elapsedTime\n    }));\n  };\n  const resetTimer = () => {\n    setIsRunning(false);\n    setElapsedTime(0);\n    setTaskTimes({});\n  };\n  const formatTime = milliseconds => {\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const remainingSeconds = totalSeconds % 60;\n    const hundredths = Math.floor(milliseconds % 1000 / 10);\n    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Team ${teamId} Stopwatch`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), selectedGroup && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Tasks:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Max Aika: \", formatTime(selectedGroup.selectedTasks[0].max_aika * 100)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: formatTime(elapsedTime)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: startTimer,\n            disabled: isRunning,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: stopTimer,\n            disabled: !isRunning,\n            children: \"Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetTimer,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedGroup.selectedTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: task.tehtävä_nimi\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `Task Time: ${formatTime(taskTimes[task.tehtävä_nimi] || 0)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this)\n        }, task.tehtävä_nimi, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Ajastin, \"AVxcZ2W/HUS2c6tNskN96bJI0e4=\", false, function () {\n  return [useParams];\n});\n_c = Ajastin;\nexport default Ajastin;\nvar _c;\n$RefreshReg$(_c, \"Ajastin\");","map":{"version":3,"names":["React","useState","useEffect","useParams","io","jsxDEV","_jsxDEV","socket","Ajastin","_s","teamId","selectedGroup","setSelectedGroup","isRunning","setIsRunning","elapsedTime","setElapsedTime","taskTimes","setTaskTimes","document","title","newSocket","on","console","log","updatedGroupData","parsedData","JSON","parse","localStorage","setItem","storedSelectedGroup","getItem","emit","connected","disconnect","handleTimerUpdate","era","groupInfo","taskName","selectedTasks","tehtävä_nimi","intervalId","setInterval","prevElapsedTime","clearInterval","startTimer","stopTimer","prevTaskTimes","resetTimer","formatTime","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","children","fileName","_jsxFileName","lineNumber","columnNumber","max_aika","className","onClick","disabled","map","task","index","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/Ajastin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst Ajastin = () => {\r\n  const { teamId } = useParams();\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [taskTimes, setTaskTimes] = useState({});\r\n\r\n  useEffect(() => {\r\n    document.title = `Team ${teamId}`;\r\n    const newSocket = io('http://localhost:8000');\r\n\r\n    newSocket.on('connect', () => {\r\n      console.log('WebSocket connection is open.');\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('WebSocket connection is closed.');\r\n    });\r\n\r\n    newSocket.on('selectedGroupUpdate', (updatedGroupData) => {\r\n      console.log('Received updated group data:', updatedGroupData);\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n      setIsRunning(false);\r\n      setElapsedTime(0);\r\n      setTaskTimes({});\r\n\r\n      localStorage.setItem('selectedGroup', updatedGroupData);\r\n    });\r\n\r\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\r\n    if (storedSelectedGroup) {\r\n      const parsedData = JSON.parse(storedSelectedGroup);\r\n      setSelectedGroup(parsedData);\r\n    }\r\n\r\n    socket.emit('join', { teamId });\r\n\r\n    return () => {\r\n      if (newSocket.connected) {\r\n        newSocket.disconnect();\r\n      }\r\n    };\r\n  }, [teamId]);\r\n\r\n  useEffect(() => {\r\n    const handleTimerUpdate = () => {\r\n      socket.emit('timerUpdate', {\r\n        teamId,\r\n        era: selectedGroup.groupInfo,\r\n        taskName: selectedGroup.selectedTasks[0].tehtävä_nimi,\r\n        isRunning,\r\n        elapsedTime: taskTimes[selectedGroup.selectedTasks[0].tehtävä_nimi] || 0,\r\n      });\r\n    };\r\n\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 10);\r\n        handleTimerUpdate();\r\n      }, 10);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [isRunning, taskTimes, selectedGroup, teamId]);\r\n\r\n  const startTimer = () => {\r\n    setIsRunning(true);\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    setIsRunning(false);\r\n    setTaskTimes((prevTaskTimes) => ({\r\n      ...prevTaskTimes,\r\n      [selectedGroup.selectedTasks[0].tehtävä_nimi]: (prevTaskTimes[selectedGroup.selectedTasks[0].tehtävä_nimi] || 0) + elapsedTime,\r\n    }));\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    setIsRunning(false);\r\n    setElapsedTime(0);\r\n    setTaskTimes({});\r\n  };\r\n\r\n  const formatTime = (milliseconds) => {\r\n    const totalSeconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(totalSeconds / 60);\r\n    const remainingSeconds = totalSeconds % 60;\r\n    const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{`Team ${teamId} Stopwatch`}</h2>\r\n      {selectedGroup && (\r\n        <div>\r\n          <h3>Selected Tasks:</h3>\r\n          <div>\r\n            <p>Max Aika: {formatTime(selectedGroup.selectedTasks[0].max_aika * 100)}</p>\r\n            <div className=\"timer\">\r\n              <span>{formatTime(elapsedTime)}</span>\r\n            </div>\r\n            <div className=\"controls\">\r\n              <button onClick={startTimer} disabled={isRunning}>\r\n                Start\r\n              </button>\r\n              <button onClick={stopTimer} disabled={!isRunning}>\r\n                Stop\r\n              </button>\r\n              <button onClick={resetTimer}>Reset</button>\r\n            </div>\r\n          </div>\r\n          <ul>\r\n            {selectedGroup.selectedTasks.map((task, index) => (\r\n              <li key={task.tehtävä_nimi}>\r\n                <div>\r\n                  <h3>{task.tehtävä_nimi}</h3>\r\n                  <p>{`Task Time: ${formatTime(taskTimes[task.tehtävä_nimi] || 0)}`}</p>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ajastin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}