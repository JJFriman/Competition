{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp2\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport useGroupData from './UseGroupData';\nimport '../css/Competition.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({});\n  const [lapCount, setLapCount] = useState({});\n  const intervalIdRef = useRef(null);\n  const {\n    selectedGroup\n  } = useGroupData();\n  const resetTimer = () => {\n    setElapsedTime(0);\n    setIsRunning(false);\n    setStartTime(null);\n    setLaps({});\n    setLapCount({});\n  };\n  useEffect(() => {\n    resetTimer();\n    if (selectedGroup && selectedGroup.teams) {\n      const allLapsCompleted = selectedGroup.teams.every(team => {\n        const teamLaps = laps[team.joukkue_id] || [];\n        return teamLaps.length === 3;\n      });\n      if (allLapsCompleted) {\n        localStorage.clear();\n      }\n    }\n  }, [selectedGroup]);\n  useEffect(() => {\n    const stopTimerHandler = () => {\n      resetTimer();\n    };\n    socket.on('stopTimer', stopTimerHandler);\n    return () => {\n      socket.off('stopTimer', stopTimerHandler);\n    };\n  }, []);\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n      const previousLapsTotalTime = Array.isArray(laps[teamId]) ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0) : 0;\n      const existingLapIndex = Array.isArray(laps[teamId]) ? laps[teamId].findIndex(lap => lap.taskName === taskName) : -1;\n      let lapTime;\n      if (existingLapIndex !== -1) {\n        lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\n      } else {\n        lapTime = elapsedTime * 10 - previousLapsTotalTime;\n        const task = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.find(t => t.tehtävä_nimi === taskName);\n        if (task && lapTime > task.max_aika * 1000) {\n          lapTime = task.max_aika * 1000;\n          setLapCount(prevLapCount => ({\n            ...prevLapCount,\n            [teamId]: (prevLapCount[teamId] || 0) + 1\n          }));\n          setLaps(prevLaps => {\n            const updatedLaps = {\n              ...prevLaps\n            };\n            updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n              taskName,\n              lapTime\n            }];\n            const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\n            if (currentLapCount === 3) {\n              const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n            }\n            return updatedLaps;\n          });\n          return;\n        }\n      }\n      setLapCount(prevLapCount => ({\n        ...prevLapCount,\n        [teamId]: (prevLapCount[teamId] || 0) + 1\n      }));\n      setLaps(prevLaps => {\n        const updatedLaps = {\n          ...prevLaps\n        };\n        if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\n          return prevLaps;\n        }\n        const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\n        if (existingLapIndex !== -1) {\n          updatedLaps[teamId][existingLapIndex] = {\n            taskName,\n            lapTime\n          };\n        } else {\n          updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n            taskName,\n            lapTime\n          }];\n        }\n        if (currentLapCount + 1 === 3) {\n          const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n        }\n        return updatedLaps;\n      });\n    };\n    socket.on('timerStart', startTimerHandler);\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime, lapCount, laps]);\n  const submitMaxAikaLaps = (teamId, taskName, round) => {\n    const task = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.find(t => t.tehtävä_nimi === taskName);\n    const maxAika = task ? task.max_aika * 1000 : 0;\n    setLapCount(prevLapCount => ({\n      ...prevLapCount,\n      [teamId]: (prevLapCount[teamId] || 0) + 1\n    }));\n    setLaps(prevLaps => {\n      const updatedLaps = {\n        ...prevLaps\n      };\n      const existingLapIndex = Array.isArray(updatedLaps[teamId]) ? updatedLaps[teamId].findIndex(lap => lap.taskName === taskName) : -1;\n      if (existingLapIndex === -1) {\n        const lapTime = maxAika;\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n          taskName,\n          lapTime\n        }];\n      }\n      const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\n      if (currentLapCount === 3) {\n        const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n      }\n      return updatedLaps;\n    });\n  };\n  const postToMySQL = async (era, tehtava, teamId, finishedTime) => {\n    try {\n      const selectedGroup = localStorage.getItem('selectedGroup');\n      if (!selectedGroup) {\n        return;\n      }\n      const parsedData = JSON.parse(selectedGroup);\n      const response = await fetch('http://localhost:3001/api/aikataulu', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          era: parsedData.groupInfo,\n          tehtava,\n          joukkueId: teamId,\n          aika: finishedTime\n        })\n      });\n      if (!response.ok) {\n        console.error('Failed to send finished time to aikataulu:', response.status);\n      }\n    } catch (error) {\n      console.error('Error sending finished time to aikataulu:', error);\n    }\n  };\n  const sendLapTimeDataToMySQL = () => {\n    selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.teams.forEach(team => {\n      const teamLaps = laps[team.joukkue_id] || [];\n      teamLaps.forEach(lap => {\n        postToMySQL(selectedGroup.groupInfo, lap.taskName, team.joukkue_id, lap.lapTime);\n      });\n    });\n  };\n  useEffect(() => {\n    var _selectedGroup$teams;\n    const allLapsCompleted = selectedGroup === null || selectedGroup === void 0 ? void 0 : (_selectedGroup$teams = selectedGroup.teams) === null || _selectedGroup$teams === void 0 ? void 0 : _selectedGroup$teams.every(team => {\n      const teamLaps = laps[team.joukkue_id] || [];\n      return teamLaps.length === 3;\n    });\n    if (allLapsCompleted) {\n      setIsRunning(false);\n      sendLapTimeDataToMySQL();\n    }\n  }, [selectedGroup, laps]);\n  useEffect(() => {\n    if (selectedGroup !== null && selectedGroup !== void 0 && selectedGroup.selectedTasks && laps && elapsedTime > 0) {\n      selectedGroup.teams.forEach(team => {\n        const teamLaps = laps[team.joukkue_id] || [];\n        selectedGroup.selectedTasks.forEach(task => {\n          const currentLapCount = teamLaps.filter(lap => lap.taskName === task.tehtävä_nimi).length;\n          if (currentLapCount < 3) {\n            const maxAika = task.max_aika * 1000;\n            const cumulativeMaxAika = teamLaps.reduce((total, lap) => total + lap.lapTime, 0) + maxAika;\n            if (cumulativeMaxAika <= elapsedTime * 10) {\n              submitMaxAikaLaps(team.joukkue_id, task.tehtävä_nimi, currentLapCount + 1);\n            }\n          }\n        });\n      });\n    }\n  }, [selectedGroup, laps, elapsedTime]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    const teamLaps = laps[teamId] || [];\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n    return combinedTime;\n  };\n  const calculateCombinedTimesByTeam = () => {\n    const combinedTimesByTeam = {};\n    selectedGroup.teams.forEach(team => {\n      const teamId = team.joukkue_id;\n      combinedTimesByTeam[teamId] = getCombinedTime(teamId);\n    });\n    return combinedTimesByTeam;\n  };\n  const getSortedTeamsByCombinedTime = () => {\n    const teamsWithCombinedTimes = selectedGroup.teams.map(team => ({\n      team,\n      combinedTime: getCombinedTime(team.joukkue_id)\n    }));\n    const sortedTeams = teamsWithCombinedTimes.sort((a, b) => {\n      // If one team has no recorded time, prioritize the other\n      if (!a.combinedTime && b.combinedTime) {\n        return 1;\n      }\n      if (a.combinedTime && !b.combinedTime) {\n        return -1;\n      }\n\n      // Sort based on combined time for teams with recorded times\n      return a.combinedTime - b.combinedTime;\n    });\n    return sortedTeams.map((item, index) => ({\n      ...item.team,\n      rank: index + 1,\n      color: getRankColor(index + 1),\n      combinedTime: item.combinedTime\n    }));\n  };\n  function getRankColor(rank) {\n    if (rank === 1) {\n      return 'gold';\n    } else if (rank === 2) {\n      return 'silver';\n    } else if (rank === 3) {\n      return 'bronze';\n    } else {\n      return '';\n    }\n  }\n  const renderTeams = () => {\n    if (!selectedGroup || !selectedGroup.teams) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No teams available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 14\n      }, this);\n    }\n    const sortedTeams = getSortedTeamsByCombinedTime();\n    return sortedTeams.map(team => {\n      var _laps$team$joukkue_id, _laps$team$joukkue_id2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: team.joukkue_nimi\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sija: \", team.rank]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [(_laps$team$joukkue_id = laps[team.joukkue_id]) === null || _laps$team$joukkue_id === void 0 ? void 0 : _laps$team$joukkue_id.map(lap => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Teht\\xE4v\\xE4: \", lap.taskName, \", Aika: \", formatTime(lap.lapTime)]\n          }, `${team.joukkue_id}-${lap.taskName}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this)), ((_laps$team$joukkue_id2 = laps[team.joukkue_id]) === null || _laps$team$joukkue_id2 === void 0 ? void 0 : _laps$team$joukkue_id2.length) === 3 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Lopullinen aika: \", formatTime(team.combinedTime)]\n          }, `${team.joukkue_id}-combined`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 9\n        }, this)]\n      }, team.joukkue_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 7\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [selectedGroup && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: selectedGroup.groupInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-times-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Max aika:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [task.tehtävä_nimi, \", Max aika: \", formatTime(task.max_aika * 1000)]\n        }, `${task.tehtävä_id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 3\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Ajat:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), renderTeams()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"+ms0/OSAQ4pqNxiMn+gbfQN8oIs=\", false, function () {\n  return [useGroupData];\n});\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","useGroupData","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","selectedGroup","resetTimer","teams","allLapsCompleted","every","team","teamLaps","joukkue_id","length","localStorage","clear","stopTimerHandler","on","off","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","lapTimerHandler","lapTimerData","teamId","taskName","console","error","previousLapsTotalTime","Array","isArray","reduce","totalTime","lap","lapTime","existingLapIndex","findIndex","task","selectedTasks","find","t","tehtävä_nimi","max_aika","prevLapCount","prevLaps","updatedLaps","currentLapCount","combinedTime","submitMaxAikaLaps","round","maxAika","postToMySQL","era","tehtava","finishedTime","getItem","parsedData","JSON","parse","response","fetch","method","headers","body","stringify","groupInfo","joukkueId","aika","ok","status","sendLapTimeDataToMySQL","forEach","_selectedGroup$teams","filter","cumulativeMaxAika","total","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","calculateCombinedTimesByTeam","combinedTimesByTeam","getSortedTeamsByCombinedTime","teamsWithCombinedTimes","map","sortedTeams","sort","a","b","item","index","rank","color","getRankColor","renderTeams","children","fileName","_jsxFileName","lineNumber","columnNumber","_laps$team$joukkue_id","_laps$team$joukkue_id2","joukkue_nimi","formatTime","className","tehtävä_id","_c","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp2/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport useGroupData from './UseGroupData';\r\nimport '../css/Competition.css';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({});\r\n  const [lapCount, setLapCount] = useState({});\r\n  const intervalIdRef = useRef(null);\r\n  const { selectedGroup } = useGroupData();\r\n\r\n  const resetTimer = () => {\r\n    setElapsedTime(0);\r\n    setIsRunning(false);\r\n    setStartTime(null);\r\n    setLaps({});\r\n    setLapCount({});\r\n  };\r\n  \r\n  useEffect(() => {\r\n    resetTimer();\r\n\r\n    if (selectedGroup && selectedGroup.teams) {\r\n      const allLapsCompleted = selectedGroup.teams.every((team) => {\r\n        const teamLaps = laps[team.joukkue_id] || [];\r\n        return teamLaps.length === 3;\r\n      });\r\n\r\n      if (allLapsCompleted) {\r\n        localStorage.clear();\r\n      }\r\n    }\r\n\r\n  }, [selectedGroup]);\r\n\r\n  useEffect(() => {\r\n    const stopTimerHandler = () => {\r\n      resetTimer();\r\n    };\r\n\r\n    socket.on('stopTimer', stopTimerHandler);\r\n\r\n    return () => {\r\n      socket.off('stopTimer', stopTimerHandler);\r\n    };\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\n    const lapTimerHandler = (lapTimerData) => {\r\n      \r\n        const { teamId, taskName } = lapTimerData;\r\n      \r\n        if (!startTime) {\r\n          console.error('Error: startTime is not set.');\r\n          return;\r\n        }\r\n      \r\n        const previousLapsTotalTime = Array.isArray(laps[teamId])\r\n          ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0)\r\n          : 0;\r\n      \r\n        const existingLapIndex = Array.isArray(laps[teamId])\r\n          ? laps[teamId].findIndex((lap) => lap.taskName === taskName)\r\n          : -1;\r\n      \r\n        let lapTime;\r\n      \r\n        if (existingLapIndex !== -1) {\r\n          lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\r\n        } else {\r\n          lapTime = elapsedTime * 10 - previousLapsTotalTime;\r\n      \r\n          const task = selectedGroup?.selectedTasks.find((t) => t.tehtävä_nimi === taskName);\r\n          if (task && lapTime > task.max_aika * 1000) {\r\n            lapTime = task.max_aika * 1000;\r\n      \r\n            setLapCount((prevLapCount) => ({\r\n              ...prevLapCount,\r\n              [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n            }));\r\n      \r\n            setLaps((prevLaps) => {\r\n              const updatedLaps = { ...prevLaps };\r\n      \r\n              updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n      \r\n              const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\r\n      \r\n              if (currentLapCount === 3) {\r\n                const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n              }\r\n      \r\n              return updatedLaps;\r\n            });\r\n      \r\n            return;\r\n          }\r\n        }\r\n      \r\n        setLapCount((prevLapCount) => ({\r\n          ...prevLapCount,\r\n          [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n        }));\r\n      \r\n        setLaps((prevLaps) => {\r\n          const updatedLaps = { ...prevLaps };\r\n      \r\n          if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\r\n            return prevLaps;\r\n          }\r\n      \r\n          const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\r\n      \r\n          if (existingLapIndex !== -1) {\r\n            updatedLaps[teamId][existingLapIndex] = { taskName, lapTime };\r\n          } else {\r\n            updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n          }\r\n      \r\n          if (currentLapCount + 1 === 3) {\r\n            const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n          }\r\n      \r\n          return updatedLaps;\r\n        });\r\n      };\r\n\r\n\r\n\r\n      \r\n      \r\n    socket.on('timerStart', startTimerHandler);\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime, lapCount, laps]);\r\n\r\n  const submitMaxAikaLaps = (teamId, taskName, round) => {\r\n    const task = selectedGroup?.selectedTasks.find((t) => t.tehtävä_nimi === taskName);\r\n    const maxAika = task ? task.max_aika * 1000 : 0;\r\n  \r\n    setLapCount((prevLapCount) => ({\r\n      ...prevLapCount,\r\n      [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n    }));\r\n  \r\n    setLaps((prevLaps) => {\r\n      const updatedLaps = { ...prevLaps };\r\n  \r\n      const existingLapIndex = Array.isArray(updatedLaps[teamId])\r\n        ? updatedLaps[teamId].findIndex((lap) => lap.taskName === taskName)\r\n        : -1;\r\n  \r\n      if (existingLapIndex === -1) {\r\n        const lapTime = maxAika;\r\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n      }\r\n      const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\r\n  \r\n      if (currentLapCount === 3) {\r\n        const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n      }\r\n  \r\n      return updatedLaps;\r\n    });\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  const postToMySQL = async (era, tehtava, teamId, finishedTime) => {\r\n    try {\r\n      const selectedGroup = localStorage.getItem('selectedGroup');\r\n      if (!selectedGroup) {\r\n        return;\r\n      }\r\n  \r\n      const parsedData = JSON.parse(selectedGroup);\r\n      const response = await fetch('http://localhost:3001/api/aikataulu', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          era: parsedData.groupInfo,\r\n          tehtava,\r\n          joukkueId: teamId,\r\n          aika: finishedTime,\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        console.error('Failed to send finished time to aikataulu:', response.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending finished time to aikataulu:', error);\r\n    }\r\n  };\r\n  const sendLapTimeDataToMySQL = () => {\r\n    selectedGroup?.teams.forEach((team) => {\r\n      const teamLaps = laps[team.joukkue_id] || [];\r\n      teamLaps.forEach((lap) => {\r\n        postToMySQL(selectedGroup.groupInfo, lap.taskName, team.joukkue_id, lap.lapTime);\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const allLapsCompleted = selectedGroup?.teams?.every((team) => {\r\n      const teamLaps = laps[team.joukkue_id] || [];\r\n      return teamLaps.length === 3;\r\n    });\r\n  \r\n    if (allLapsCompleted) {\r\n      setIsRunning(false);\r\n      sendLapTimeDataToMySQL();\r\n    }\r\n  }, [selectedGroup, laps]);\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    if (selectedGroup?.selectedTasks && laps && elapsedTime > 0) {\r\n      selectedGroup.teams.forEach((team) => {\r\n        const teamLaps = laps[team.joukkue_id] || [];\r\n  \r\n        selectedGroup.selectedTasks.forEach((task) => {\r\n          const currentLapCount = teamLaps.filter((lap) => lap.taskName === task.tehtävä_nimi).length;\r\n  \r\n          if (currentLapCount < 3) {\r\n            const maxAika = task.max_aika * 1000;\r\n            const cumulativeMaxAika = teamLaps.reduce((total, lap) => total + lap.lapTime, 0) + maxAika;\r\n  \r\n            if (cumulativeMaxAika <= elapsedTime * 10) {\r\n              submitMaxAikaLaps(team.joukkue_id, task.tehtävä_nimi, currentLapCount + 1);\r\n            }\r\n          }\r\n        });\r\n      })\r\n    }\r\n  }, [selectedGroup, laps, elapsedTime]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  \r\n\r\n  const getCombinedTime = (teamId) => {\r\n    const teamLaps = laps[teamId] || [];\r\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n    return combinedTime;\r\n  };\r\n\r\n\r\n  const calculateCombinedTimesByTeam = () => {\r\n    const combinedTimesByTeam = {};\r\n  \r\n    selectedGroup.teams.forEach((team) => {\r\n      const teamId = team.joukkue_id;\r\n      combinedTimesByTeam[teamId] = getCombinedTime(teamId);\r\n    });\r\n  \r\n    return combinedTimesByTeam;\r\n  };\r\n  \r\n  const getSortedTeamsByCombinedTime = () => {\r\n    const teamsWithCombinedTimes = selectedGroup.teams.map((team) => ({\r\n      team,\r\n      combinedTime: getCombinedTime(team.joukkue_id),\r\n    }));\r\n  \r\n    const sortedTeams = teamsWithCombinedTimes.sort((a, b) => {\r\n      // If one team has no recorded time, prioritize the other\r\n      if (!a.combinedTime && b.combinedTime) {\r\n        return 1;\r\n      }\r\n      if (a.combinedTime && !b.combinedTime) {\r\n        return -1;\r\n      }\r\n  \r\n      // Sort based on combined time for teams with recorded times\r\n      return a.combinedTime - b.combinedTime;\r\n    });\r\n  \r\n    return sortedTeams.map((item, index) => ({\r\n      ...item.team,\r\n      rank: index + 1,\r\n      color: getRankColor(index + 1),\r\n      combinedTime: item.combinedTime,\r\n    }));\r\n  };\r\n  \r\n  \r\n\r\n  function getRankColor(rank) {\r\n    if (rank === 1) {\r\n      return 'gold';\r\n    } else if (rank === 2) {\r\n      return 'silver';\r\n    } else if (rank === 3) {\r\n      return 'bronze';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  const renderTeams = () => {\r\n    if (!selectedGroup || !selectedGroup.teams) {\r\n      return <p>No teams available.</p>;\r\n    }\r\n  \r\n    const sortedTeams = getSortedTeamsByCombinedTime();\r\n  \r\n    return sortedTeams.map((team) => (\r\n      <div key={team.joukkue_id}>\r\n        <h4>{team.joukkue_nimi}</h4>\r\n        <p>Sija: {team.rank}</p>\r\n        <ul>\r\n          {laps[team.joukkue_id]?.map((lap) => (\r\n            <li key={`${team.joukkue_id}-${lap.taskName}`}>\r\n              Tehtävä: {lap.taskName}, Aika: {formatTime(lap.lapTime)}\r\n            </li>\r\n          ))}\r\n          {laps[team.joukkue_id]?.length === 3 && (\r\n            <li key={`${team.joukkue_id}-combined`}>\r\n              Lopullinen aika: {formatTime(team.combinedTime)}\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    ));\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      {selectedGroup && <h1>{selectedGroup.groupInfo}</h1>}\r\n      <div className=\"max-times-container\">\r\n        <h4>Max aika:</h4>\r\n        <ul>\r\n        {selectedGroup?.selectedTasks.map((task, index) => (\r\n  <li key={`${task.tehtävä_id}-${index}`}>\r\n    {task.tehtävä_nimi}, Max aika: {formatTime(task.max_aika * 1000)}\r\n  </li>\r\n))}\r\n\r\n        </ul>\r\n      </div>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Ajat:</h4>\r\n        {renderTeams()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}