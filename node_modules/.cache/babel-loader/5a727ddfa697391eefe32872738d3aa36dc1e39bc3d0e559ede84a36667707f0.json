{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Ajastin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Ajastin() {\n  _s();\n  var _selectedGroup$select;\n  const {\n    teamId\n  } = useParams();\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [tasksData, setTasksData] = useState([]);\n  const [sockets, setSockets] = useState([]);\n  const [elapsedTimes, setElapsedTimes] = useState([]);\n  const [isRunning, setIsRunning] = useState([]);\n  const [selectedTask, setSelectedTask] = useState(0); // Default to the first task\n\n  useEffect(() => {\n    document.title = `Team ${teamId}`;\n\n    // Initialize sockets and state for each task\n    const newSockets = tasksData.map(() => io('http://localhost:8000'));\n    setSockets(newSockets);\n    newSockets.forEach((socket, index) => {\n      socket.on('connect', () => {\n        console.log(`WebSocket connection is open for task ${index + 1}.`);\n      });\n      socket.on('disconnect', () => {\n        console.log(`WebSocket connection is closed for task ${index + 1}.`);\n      });\n      socket.on('selectedGroupUpdate', updatedGroupData => {\n        console.log(`Received updated group data for task ${index + 1}:`, updatedGroupData);\n        const parsedData = JSON.parse(updatedGroupData);\n        setSelectedGroup(parsedData);\n      });\n    });\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\n    if (storedSelectedGroup) {\n      const parsedData = JSON.parse(storedSelectedGroup);\n      setSelectedGroup(parsedData);\n    }\n    return () => {\n      newSockets.forEach(socket => {\n        if (socket.connected) {\n          socket.disconnect();\n        }\n      });\n    };\n  }, [teamId, tasksData]);\n  useEffect(() => {\n    // Initialize state for each task\n    const initialElapsedTimes = tasksData.map(() => 0);\n    const initialIsRunning = tasksData.map(() => false);\n    setElapsedTimes(initialElapsedTimes);\n    setIsRunning(initialIsRunning);\n    return () => {\n      setElapsedTimes([]);\n      setIsRunning([]);\n    };\n  }, [tasksData]);\n  useEffect(() => {\n    // Clear interval for each task when component unmounts\n    return () => {\n      elapsedTimes.forEach((_, index) => clearInterval(index));\n    };\n  }, [elapsedTimes]);\n  const startTimer = taskIndex => {\n    setIsRunning(prevIsRunning => prevIsRunning.map((state, index) => index === taskIndex ? true : state));\n  };\n  const stopTimer = async taskIndex => {\n    setIsRunning(prevIsRunning => prevIsRunning.map((state, index) => index === taskIndex ? false : state));\n    const finishedTime = formatTime(elapsedTimes[taskIndex]);\n    console.log(`Finished Time for Task ${taskIndex + 1}:`, finishedTime);\n    const finishedTimeData = {\n      teamId,\n      finishedTime,\n      era: selectedGroup.groupInfo\n    };\n    console.log(`Sending finished time for Task ${taskIndex + 1} to server:`, finishedTimeData);\n    if (sockets[taskIndex]) {\n      console.log(`Socket for Task ${taskIndex + 1} is connected. Emitting finishedTime event...`);\n      sockets[taskIndex].emit('finishedTime', JSON.stringify(finishedTimeData));\n    }\n    if (selectedGroup && selectedGroup.selectedTasks && selectedGroup.selectedTasks[taskIndex]) {\n      try {\n        const response = await fetch('http://localhost:3001/api/aikataulu', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            era: selectedGroup.groupInfo,\n            joukkueId: finishedTimeData.teamId,\n            aika: elapsedTimes[taskIndex]\n          })\n        });\n        if (!response.ok) {\n          console.error(`Failed to send finished time for Task ${taskIndex + 1} to aikataulu:`, response.status);\n        }\n      } catch (error) {\n        console.error(`Error sending finished time for Task ${taskIndex + 1} to aikataulu:`, error);\n      }\n    }\n  };\n  const resetTimer = taskIndex => {\n    setElapsedTimes(prevElapsedTimes => prevElapsedTimes.map((time, index) => index === taskIndex ? 0 : time));\n    setIsRunning(prevIsRunning => prevIsRunning.map((state, index) => index === taskIndex ? false : state));\n  };\n  function formatTime(timeInMilliseconds) {\n    const minutes = Math.floor(timeInMilliseconds / (60 * 100));\n    const seconds = Math.floor(timeInMilliseconds % (60 * 100) / 100);\n    const milliseconds = timeInMilliseconds % 100;\n    return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}:${milliseconds < 10 ? '0' : ''}${milliseconds}`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Team \", teamId, \" Stopwatch\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), selectedGroup && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Selected Task: \", selectedGroup.selectedTaskNames[selectedTask]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Max Aika: \", formatTime(((_selectedGroup$select = selectedGroup.selectedTasks[selectedTask]) === null || _selectedGroup$select === void 0 ? void 0 : _selectedGroup$select.max_aika) * 100)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), tasksData.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-timer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: formatTime(elapsedTimes[index])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => startTimer(index),\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => stopTimer(index),\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => resetTimer(index),\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(Ajastin, \"KhHkmGIDwS8twgyDiP8sO0OhS34=\", false, function () {\n  return [useParams];\n});\n_c = Ajastin;\nexport default Ajastin;\nvar _c;\n$RefreshReg$(_c, \"Ajastin\");","map":{"version":3,"names":["React","useState","useEffect","useParams","io","jsxDEV","_jsxDEV","Ajastin","_s","_selectedGroup$select","teamId","selectedGroup","setSelectedGroup","tasksData","setTasksData","sockets","setSockets","elapsedTimes","setElapsedTimes","isRunning","setIsRunning","selectedTask","setSelectedTask","document","title","newSockets","map","forEach","socket","index","on","console","log","updatedGroupData","parsedData","JSON","parse","storedSelectedGroup","localStorage","getItem","connected","disconnect","initialElapsedTimes","initialIsRunning","_","clearInterval","startTimer","taskIndex","prevIsRunning","state","stopTimer","finishedTime","formatTime","finishedTimeData","era","groupInfo","emit","stringify","selectedTasks","response","fetch","method","headers","body","joukkueId","aika","ok","error","status","resetTimer","prevElapsedTimes","time","timeInMilliseconds","minutes","Math","floor","seconds","milliseconds","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedTaskNames","max_aika","task","className","onClick","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/Ajastin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\n\r\nfunction Ajastin() {\r\n  const { teamId } = useParams();\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  const [tasksData, setTasksData] = useState([]);\r\n  const [sockets, setSockets] = useState([]);\r\n  const [elapsedTimes, setElapsedTimes] = useState([]);\r\n  const [isRunning, setIsRunning] = useState([]);\r\n  const [selectedTask, setSelectedTask] = useState(0); // Default to the first task\r\n\r\n  useEffect(() => {\r\n    document.title = `Team ${teamId}`;\r\n\r\n    // Initialize sockets and state for each task\r\n    const newSockets = tasksData.map(() => io('http://localhost:8000'));\r\n    setSockets(newSockets);\r\n\r\n    newSockets.forEach((socket, index) => {\r\n      socket.on('connect', () => {\r\n        console.log(`WebSocket connection is open for task ${index + 1}.`);\r\n      });\r\n\r\n      socket.on('disconnect', () => {\r\n        console.log(`WebSocket connection is closed for task ${index + 1}.`);\r\n      });\r\n\r\n      socket.on('selectedGroupUpdate', (updatedGroupData) => {\r\n        console.log(`Received updated group data for task ${index + 1}:`, updatedGroupData);\r\n        const parsedData = JSON.parse(updatedGroupData);\r\n        setSelectedGroup(parsedData);\r\n      });\r\n    });\r\n\r\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\r\n    if (storedSelectedGroup) {\r\n      const parsedData = JSON.parse(storedSelectedGroup);\r\n      setSelectedGroup(parsedData);\r\n    }\r\n\r\n    return () => {\r\n      newSockets.forEach((socket) => {\r\n        if (socket.connected) {\r\n          socket.disconnect();\r\n        }\r\n      });\r\n    };\r\n  }, [teamId, tasksData]);\r\n\r\n  useEffect(() => {\r\n    // Initialize state for each task\r\n    const initialElapsedTimes = tasksData.map(() => 0);\r\n    const initialIsRunning = tasksData.map(() => false);\r\n    setElapsedTimes(initialElapsedTimes);\r\n    setIsRunning(initialIsRunning);\r\n\r\n    return () => {\r\n      setElapsedTimes([]);\r\n      setIsRunning([]);\r\n    };\r\n  }, [tasksData]);\r\n\r\n  useEffect(() => {\r\n    // Clear interval for each task when component unmounts\r\n    return () => {\r\n      elapsedTimes.forEach((_, index) => clearInterval(index));\r\n    };\r\n  }, [elapsedTimes]);\r\n\r\n  const startTimer = (taskIndex) => {\r\n    setIsRunning((prevIsRunning) => prevIsRunning.map((state, index) => (index === taskIndex ? true : state)));\r\n  };\r\n\r\n  const stopTimer = async (taskIndex) => {\r\n    setIsRunning((prevIsRunning) => prevIsRunning.map((state, index) => (index === taskIndex ? false : state)));\r\n\r\n    const finishedTime = formatTime(elapsedTimes[taskIndex]);\r\n    console.log(`Finished Time for Task ${taskIndex + 1}:`, finishedTime);\r\n\r\n    const finishedTimeData = {\r\n      teamId,\r\n      finishedTime,\r\n      era: selectedGroup.groupInfo,\r\n    };\r\n\r\n    console.log(`Sending finished time for Task ${taskIndex + 1} to server:`, finishedTimeData);\r\n\r\n    if (sockets[taskIndex]) {\r\n      console.log(`Socket for Task ${taskIndex + 1} is connected. Emitting finishedTime event...`);\r\n      sockets[taskIndex].emit('finishedTime', JSON.stringify(finishedTimeData));\r\n    }\r\n\r\n    if (selectedGroup && selectedGroup.selectedTasks && selectedGroup.selectedTasks[taskIndex]) {\r\n      try {\r\n        const response = await fetch('http://localhost:3001/api/aikataulu', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            era: selectedGroup.groupInfo,\r\n            joukkueId: finishedTimeData.teamId,\r\n            aika: elapsedTimes[taskIndex],\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.error(`Failed to send finished time for Task ${taskIndex + 1} to aikataulu:`, response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error sending finished time for Task ${taskIndex + 1} to aikataulu:`, error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetTimer = (taskIndex) => {\r\n    setElapsedTimes((prevElapsedTimes) => prevElapsedTimes.map((time, index) => (index === taskIndex ? 0 : time)));\r\n    setIsRunning((prevIsRunning) => prevIsRunning.map((state, index) => (index === taskIndex ? false : state)));\r\n  };\r\n  function formatTime(timeInMilliseconds) {\r\n    const minutes = Math.floor(timeInMilliseconds / (60 * 100));\r\n    const seconds = Math.floor((timeInMilliseconds % (60 * 100)) / 100);\r\n    const milliseconds = timeInMilliseconds % 100;\r\n  \r\n    return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}:${milliseconds < 10 ? '0' : ''}${milliseconds}`;\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h1>Team {teamId} Stopwatch</h1>\r\n      {selectedGroup && (\r\n        <div>\r\n          <h2>Selected Task: {selectedGroup.selectedTaskNames[selectedTask]}</h2>\r\n          <p>Max Aika: {formatTime(selectedGroup.selectedTasks[selectedTask]?.max_aika * 100)}</p>\r\n        </div>\r\n      )}\r\n      {tasksData.map((task, index) => (\r\n        <div key={index} className=\"task-timer\">\r\n          <div className=\"timer\">\r\n            <span>{formatTime(elapsedTimes[index])}</span>\r\n          </div>\r\n          <div className=\"controls\">\r\n            <button onClick={() => startTimer(index)}>Start</button>\r\n            <button onClick={() => stopTimer(index)}>Stop</button>\r\n            <button onClick={() => resetTimer(index)}>Reset</button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ajastin;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}