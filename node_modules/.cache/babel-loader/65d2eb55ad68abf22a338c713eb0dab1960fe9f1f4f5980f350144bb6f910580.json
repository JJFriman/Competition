{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({});\n  const [lapCount, setLapCount] = useState({});\n  const intervalIdRef = useRef(null);\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      console.log('Received lap timer event:', lapTimerData);\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      let teamLaps; // Declare teamLaps variable\n\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n      const lapTime = elapsedTime * 10; // Capture the elapsed time when the lap timer is received\n\n      console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\n\n      // Update the lap count for the team\n      setLapCount(prevLapCount => ({\n        ...prevLapCount,\n        [teamId]: (prevLapCount[teamId] || 0) + 1\n      }));\n\n      // Update the laps state with the new lap time\n      setLaps(prevLaps => {\n        const updatedLaps = {\n          ...prevLaps\n        };\n        teamLaps = updatedLaps[teamId] || [];\n        teamLaps.push({\n          taskName,\n          lapTime\n        });\n        updatedLaps[teamId] = teamLaps;\n        return updatedLaps;\n      });\n\n      // Check if all three laps are made\n      if (lapCount[teamId] === 2) {\n        // Calculate the combined time for the team\n        const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n        console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n      }\n    };\n\n    // Listen for timerStart event from the server\n    socket.on('timerStart', startTimerHandler);\n\n    // Listen for lapTimer event from the server\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      // Clean up event listeners when the component unmounts\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime, lapCount, laps]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), Object.entries(laps).map(([teamId, teamLaps]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Team: \", teamId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: teamLaps.map((lap, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n          }, `${teamId}-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, teamId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"xy0GN5j6+1Co+jN4YoI+36srkjg=\");\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","console","log","lapTimerHandler","lapTimerData","teamId","taskName","teamLaps","error","lapTime","prevLapCount","prevLaps","updatedLaps","push","combinedTime","reduce","totalTime","lap","on","off","intervalId","setInterval","prevElapsedTime","current","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","formatTime","Object","entries","map","index","_c","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({});\r\n  const [lapCount, setLapCount] = useState({});\r\n  const intervalIdRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\n    const lapTimerHandler = (lapTimerData) => {\r\n      console.log('Received lap timer event:', lapTimerData);\r\n\r\n      const { teamId, taskName } = lapTimerData;\r\n      let teamLaps; // Declare teamLaps variable\r\n\r\n      if (!startTime) {\r\n        console.error('Error: startTime is not set.');\r\n        return;\r\n      }\r\n\r\n      const lapTime = elapsedTime * 10; // Capture the elapsed time when the lap timer is received\r\n\r\n      console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\r\n\r\n      // Update the lap count for the team\r\n      setLapCount((prevLapCount) => ({\r\n        ...prevLapCount,\r\n        [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n      }));\r\n\r\n      // Update the laps state with the new lap time\r\n      setLaps((prevLaps) => {\r\n        const updatedLaps = { ...prevLaps };\r\n        teamLaps = updatedLaps[teamId] || [];\r\n        teamLaps.push({ taskName, lapTime });\r\n        updatedLaps[teamId] = teamLaps;\r\n        return updatedLaps;\r\n      });\r\n\r\n      // Check if all three laps are made\r\n      if (lapCount[teamId] === 2) {\r\n        // Calculate the combined time for the team\r\n        const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n        console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n      }\r\n    };\r\n\r\n    // Listen for timerStart event from the server\r\n    socket.on('timerStart', startTimerHandler);\r\n\r\n    // Listen for lapTimer event from the server\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      // Clean up event listeners when the component unmounts\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime, lapCount, laps]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        {/* Loop through lap times and display lap times for each team */}\r\n        {Object.entries(laps).map(([teamId, teamLaps]) => (\r\n          <div key={teamId}>\r\n            <h4>Team: {teamId}</h4>\r\n            <ul>\r\n              {teamLaps.map((lap, index) => (\r\n                <li key={`${teamId}-${index}`}>\r\n                  Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {/* Other components and combined times can be added here */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}