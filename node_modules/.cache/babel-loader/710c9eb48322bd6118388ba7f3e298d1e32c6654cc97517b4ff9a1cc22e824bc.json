{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport useGroupData from './UseGroupData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({});\n  const [lapCount, setLapCount] = useState({});\n  const intervalIdRef = useRef(null);\n  const {\n    selectedGroup\n  } = useGroupData();\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      console.log('Received lap timer event:', lapTimerData);\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n      const previousLapsTotalTime = Array.isArray(laps[teamId]) ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0) : 0;\n      const existingLapIndex = Array.isArray(laps[teamId]) ? laps[teamId].findIndex(lap => lap.taskName === taskName) : -1;\n      let lapTime;\n      if (existingLapIndex !== -1) {\n        lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\n        console.log(`Team: ${teamId}, Task: ${taskName}, Updated Lap Time: ${lapTime} milliseconds`);\n      } else {\n        lapTime = elapsedTime * 10 - previousLapsTotalTime;\n\n        // Check if lap time exceeds max_aika for the task\n        const task = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.find(t => t.tehtävä_nimi === taskName);\n        if (task && lapTime > task.max_aika * 1000) {\n          lapTime = task.max_aika * 1000;\n          console.log(`Adjusted Lap Time for ${taskName}: ${lapTime} milliseconds`);\n          setLapCount(prevLapCount => ({\n            ...prevLapCount,\n            [teamId]: (prevLapCount[teamId] || 0) + 1\n          }));\n          setLaps(prevLaps => {\n            const updatedLaps = {\n              ...prevLaps\n            };\n            const currentLapCount = prevLaps[teamId] ? prevLaps[teamId].length : 0;\n            if (existingLapIndex !== -1) {\n              updatedLaps[teamId][existingLapIndex] = {\n                taskName,\n                lapTime\n              };\n            } else {\n              updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n                taskName,\n                lapTime\n              }];\n            }\n            if (currentLapCount + 1 === 3) {\n              const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n              console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n            }\n            return updatedLaps;\n          });\n\n          // Check if all required laps are completed for the team\n          if (currentLapCount + 1 === 3) {\n            return; // Skip the rest of the logic\n          }\n\n          for (let i = currentLapCount + 1; i < 3; i++) {\n            setLapCount(prevLapCount => ({\n              ...prevLapCount,\n              [teamId]: (prevLapCount[teamId] || 0) + 1\n            }));\n            setLaps(prevLaps => {\n              const updatedLaps = {\n                ...prevLaps\n              };\n              const maxAika = task.max_aika * 1000;\n              updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n                taskName,\n                lapTime: maxAika\n              }];\n              return updatedLaps;\n            });\n          }\n          return;\n        }\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\n      }\n      setLapCount(prevLapCount => ({\n        ...prevLapCount,\n        [teamId]: (prevLapCount[teamId] || 0) + 1\n      }));\n      setLaps(prevLaps => {\n        const updatedLaps = {\n          ...prevLaps\n        };\n        if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\n          return prevLaps;\n        }\n        const currentLapCount = prevLaps[teamId] ? prevLaps[teamId].length : 0;\n        if (existingLapIndex !== -1) {\n          updatedLaps[teamId][existingLapIndex] = {\n            taskName,\n            lapTime\n          };\n        } else {\n          updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n            taskName,\n            lapTime\n          }];\n        }\n        if (currentLapCount + 1 === 3) {\n          const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n          console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n        }\n        return updatedLaps;\n      });\n    };\n    socket.on('timerStart', startTimerHandler);\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime, lapCount, laps]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    const teamLaps = laps[teamId] || [];\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n    return combinedTime;\n  };\n\n  // Render the teams from selectedGroup\n  const renderTeams = () => {\n    if (!selectedGroup || !selectedGroup.teams) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No teams available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 14\n      }, this);\n    }\n    return selectedGroup.teams.map(team => {\n      var _laps$team$joukkue_id, _laps$team$joukkue_id2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Team: \", team.joukkue_nimi]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [(_laps$team$joukkue_id = laps[team.joukkue_id]) === null || _laps$team$joukkue_id === void 0 ? void 0 : _laps$team$joukkue_id.map(lap => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n          }, `${team.joukkue_id}-${lap.taskName}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 3\n          }, this)), ((_laps$team$joukkue_id2 = laps[team.joukkue_id]) === null || _laps$team$joukkue_id2 === void 0 ? void 0 : _laps$team$joukkue_id2.length) === 3 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Combined Time: \", formatTime(getCombinedTime(team.joukkue_id))]\n          }, `${team.joukkue_id}-combined`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }, this)]\n      }, team.joukkue_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }, this);\n    });\n  };\n\n  // useEffect to check if all teams have completed their laps\n  useEffect(() => {\n    var _selectedGroup$teams;\n    // Check if all laps are completed\n    const allLapsCompleted = selectedGroup === null || selectedGroup === void 0 ? void 0 : (_selectedGroup$teams = selectedGroup.teams) === null || _selectedGroup$teams === void 0 ? void 0 : _selectedGroup$teams.every(team => {\n      const teamLaps = laps[team.joukkue_id] || [];\n      return teamLaps.length === 3; // Assuming each team needs to complete 3 laps\n    });\n\n    if (allLapsCompleted) {\n      // Stop the timer\n      setIsRunning(false);\n    }\n  }, [selectedGroup, laps]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-times-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Maximum Time for Each Task:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Task: \", task.tehtävä_nimi, \", Maximum Time: \", formatTime(task.max_aika * 1000)]\n        }, `${task.tehtävä_id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 3\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), renderTeams()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"NpUzDrt8x2bXyTk/sKjUtU1wvsE=\", false, function () {\n  return [useGroupData];\n});\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","useGroupData","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","selectedGroup","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","console","log","lapTimerHandler","lapTimerData","teamId","taskName","error","previousLapsTotalTime","Array","isArray","reduce","totalTime","lap","lapTime","existingLapIndex","findIndex","task","selectedTasks","find","t","tehtävä_nimi","max_aika","prevLapCount","prevLaps","updatedLaps","currentLapCount","length","combinedTime","i","maxAika","on","off","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","teamLaps","renderTeams","teams","children","fileName","_jsxFileName","lineNumber","columnNumber","map","team","_laps$team$joukkue_id","_laps$team$joukkue_id2","joukkue_nimi","joukkue_id","formatTime","_selectedGroup$teams","allLapsCompleted","every","className","index","tehtävä_id","_c","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport useGroupData from './UseGroupData';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({});\r\n  const [lapCount, setLapCount] = useState({});\r\n  const intervalIdRef = useRef(null);\r\n  const { selectedGroup } = useGroupData();\r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\n    const lapTimerHandler = (lapTimerData) => {\r\n        console.log('Received lap timer event:', lapTimerData);\r\n      \r\n        const { teamId, taskName } = lapTimerData;\r\n      \r\n        if (!startTime) {\r\n          console.error('Error: startTime is not set.');\r\n          return;\r\n        }\r\n      \r\n        const previousLapsTotalTime = Array.isArray(laps[teamId])\r\n          ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0)\r\n          : 0;\r\n      \r\n        const existingLapIndex = Array.isArray(laps[teamId])\r\n          ? laps[teamId].findIndex((lap) => lap.taskName === taskName)\r\n          : -1;\r\n      \r\n        let lapTime;\r\n      \r\n        if (existingLapIndex !== -1) {\r\n          lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\r\n          console.log(`Team: ${teamId}, Task: ${taskName}, Updated Lap Time: ${lapTime} milliseconds`);\r\n        } else {\r\n          lapTime = elapsedTime * 10 - previousLapsTotalTime;\r\n      \r\n          // Check if lap time exceeds max_aika for the task\r\n          const task = selectedGroup?.selectedTasks.find((t) => t.tehtävä_nimi === taskName);\r\n          if (task && lapTime > task.max_aika * 1000) {\r\n            lapTime = task.max_aika * 1000;\r\n            console.log(`Adjusted Lap Time for ${taskName}: ${lapTime} milliseconds`);\r\n      \r\n            setLapCount((prevLapCount) => ({\r\n              ...prevLapCount,\r\n              [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n            }));\r\n      \r\n            setLaps((prevLaps) => {\r\n              const updatedLaps = { ...prevLaps };\r\n              const currentLapCount = prevLaps[teamId] ? prevLaps[teamId].length : 0;\r\n      \r\n              if (existingLapIndex !== -1) {\r\n                updatedLaps[teamId][existingLapIndex] = { taskName, lapTime };\r\n              } else {\r\n                updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n              }\r\n      \r\n              if (currentLapCount + 1 === 3) {\r\n                const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n                console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n              }\r\n      \r\n              return updatedLaps;\r\n            });\r\n      \r\n            // Check if all required laps are completed for the team\r\n            if (currentLapCount + 1 === 3) {\r\n              return; // Skip the rest of the logic\r\n            }\r\n            for (let i = currentLapCount + 1; i < 3; i++) {\r\n              setLapCount((prevLapCount) => ({\r\n                ...prevLapCount,\r\n                [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n              }));\r\n      \r\n              setLaps((prevLaps) => {\r\n                const updatedLaps = { ...prevLaps };\r\n                const maxAika = task.max_aika * 1000;\r\n                updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime: maxAika }];\r\n                return updatedLaps;\r\n              });\r\n            }\r\n      \r\n            return;\r\n          }\r\n      \r\n          console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\r\n        }\r\n      \r\n        setLapCount((prevLapCount) => ({\r\n          ...prevLapCount,\r\n          [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n        }));\r\n      \r\n        setLaps((prevLaps) => {\r\n          const updatedLaps = { ...prevLaps };\r\n      \r\n          if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\r\n            return prevLaps;\r\n          }\r\n      \r\n          const currentLapCount = prevLaps[teamId] ? prevLaps[teamId].length : 0;\r\n      \r\n          if (existingLapIndex !== -1) {\r\n            updatedLaps[teamId][existingLapIndex] = { taskName, lapTime };\r\n          } else {\r\n            updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n          }\r\n      \r\n          if (currentLapCount + 1 === 3) {\r\n            const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n            console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n          }\r\n      \r\n          return updatedLaps;\r\n        });\r\n      };\r\n      \r\n      \r\n    socket.on('timerStart', startTimerHandler);\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime, lapCount, laps]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  const getCombinedTime = (teamId) => {\r\n    const teamLaps = laps[teamId] || [];\r\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n    return combinedTime;\r\n  };\r\n\r\n  // Render the teams from selectedGroup\r\n  const renderTeams = () => {\r\n    if (!selectedGroup || !selectedGroup.teams) {\r\n      return <p>No teams available.</p>;\r\n    }\r\n  \r\n    return selectedGroup.teams.map((team) => (\r\n      <div key={team.joukkue_id}>\r\n        <h4>Team: {team.joukkue_nimi}</h4>\r\n        <ul>\r\n        {laps[team.joukkue_id]?.map((lap) => (\r\n  <li key={`${team.joukkue_id}-${lap.taskName}`}>\r\n    Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n  </li>\r\n))}\r\n\r\n{laps[team.joukkue_id]?.length === 3 && (\r\n  <li key={`${team.joukkue_id}-combined`}>\r\n    Combined Time: {formatTime(getCombinedTime(team.joukkue_id))}\r\n  </li>\r\n)}\r\n\r\n        </ul>\r\n      </div>\r\n    ));\r\n  };\r\n  \r\n\r\n// useEffect to check if all teams have completed their laps\r\nuseEffect(() => {\r\n    // Check if all laps are completed\r\n    const allLapsCompleted = selectedGroup?.teams?.every((team) => {\r\n      const teamLaps = laps[team.joukkue_id] || [];\r\n      return teamLaps.length === 3; // Assuming each team needs to complete 3 laps\r\n    });\r\n  \r\n    if (allLapsCompleted) {\r\n      // Stop the timer\r\n      setIsRunning(false);\r\n    }\r\n  }, [selectedGroup, laps]);\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"max-times-container\">\r\n        <h4>Maximum Time for Each Task:</h4>\r\n        <ul>\r\n        {selectedGroup?.selectedTasks.map((task, index) => (\r\n  <li key={`${task.tehtävä_id}-${index}`}>\r\n    Task: {task.tehtävä_nimi}, Maximum Time: {formatTime(task.max_aika * 1000)}\r\n  </li>\r\n))}\r\n\r\n        </ul>\r\n      </div>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        {renderTeams()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}