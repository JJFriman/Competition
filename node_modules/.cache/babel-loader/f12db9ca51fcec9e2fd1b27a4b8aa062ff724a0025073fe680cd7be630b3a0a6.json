{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Competition.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport '../css/Competition.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Competition() {\n  _s();\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [finishedTimes, setFinishedTimes] = useState({});\n  const [updatedGroupData, setUpdatedGroupData] = useState(null);\n  useEffect(() => {\n    const socket = io('http://localhost:8000');\n    socket.on('selectedGroupUpdate', updatedGroupData => {\n      console.log('Received updated group data:', updatedGroupData);\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\n      clearLocalStorage();\n    });\n    socket.on('groupDataUpdate', updatedGroupData => {\n      console.log('Received group data update:', updatedGroupData);\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\n    });\n    const clearLocalStorage = () => {\n      localStorage.clear();\n    };\n    socket.on('finishedTimeUpdate', finishedTimeData => {\n      console.log('Received finished time data:', finishedTimeData);\n      try {\n        const parsedData = JSON.parse(finishedTimeData);\n        if (parsedData && parsedData.teamId && parsedData.finishedTime) {\n          setFinishedTimes(prevFinishedTimes => {\n            const updatedFinishedTimes = {\n              ...prevFinishedTimes,\n              [parsedData.teamId]: parsedData.finishedTime\n            };\n            localStorage.setItem('finishedTimes', JSON.stringify(updatedFinishedTimes));\n            console.log('Updated finishedTimes:', updatedFinishedTimes);\n            return updatedFinishedTimes;\n          });\n        } else {\n          console.error('Invalid finished time data:', finishedTimeData);\n        }\n      } catch (error) {\n        console.error('Error parsing finished time data:', error);\n      }\n    });\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\n    if (storedSelectedGroup) {\n      const parsedData = JSON.parse(storedSelectedGroup);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n    }\n    return () => {\n      if (socket.connected) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const storedFinishedTimes = localStorage.getItem('finishedTimes');\n    if (storedFinishedTimes) {\n      const parsedFinishedTimes = JSON.parse(storedFinishedTimes);\n      setFinishedTimes(parsedFinishedTimes);\n    }\n  }, []);\n  const getBackgroundColor = teamId => {\n    const time = finishedTimes[teamId];\n    const sortedTimes = Object.entries(finishedTimes).sort(([, timeA], [, timeB]) => {\n      const [minutesA, secondsA, millisecondsA] = timeA.split(':').map(Number);\n      const [minutesB, secondsB, millisecondsB] = timeB.split(':').map(Number);\n      if (minutesA !== minutesB) {\n        return minutesA - minutesB;\n      } else if (secondsA !== secondsB) {\n        return secondsA - secondsB;\n      } else {\n        return millisecondsA - millisecondsB;\n      }\n    });\n    const tiedTeams = getTiedTeams(sortedTimes, time);\n    const teamRank = sortedTimes.findIndex(([id, t]) => t === time) + 1;\n    if (tiedTeams.length > 1) {\n      return isTiedTeam(tiedTeams, teamId) ? 'tied' : 'transparent';\n    }\n    switch (teamRank) {\n      case 1:\n        return 'gold';\n      case 2:\n        return 'silver';\n      case 3:\n        return 'bronze';\n      default:\n        return 'transparent';\n    }\n  };\n  const getTiedTeams = (sortedTimes, time) => {\n    return sortedTimes.filter(([id, t]) => t === time).map(([id]) => id);\n  };\n  const isTiedTeam = (tiedTeams, teamId) => {\n    return tiedTeams.includes(teamId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Competition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), updatedGroupData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: updatedGroupData.groupInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Selected Task: \", updatedGroupData.selectedTask ? updatedGroupData.selectedTask.tehtävä_nimi : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Max Aika: \", updatedGroupData.selectedTask ? updatedGroupData.selectedTask.max_aika : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: updatedGroupData.teams.map(team => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: getBackgroundColor(team.joukkue_id),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: team.joukkue_nimi\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 7\n          }, this), finishedTimes[team.joukkue_id] && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Finished Time: \", finishedTimes[team.joukkue_id]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Members: \", team.jäsenet]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 7\n          }, this)]\n        }, team.joukkue_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No selected group available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(Competition, \"2Cjw4fJiUqIyV0ZzrHaJmYG7b/U=\");\n_c = Competition;\nexport default Competition;\nvar _c;\n$RefreshReg$(_c, \"Competition\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","Competition","_s","selectedGroup","setSelectedGroup","finishedTimes","setFinishedTimes","updatedGroupData","setUpdatedGroupData","socket","on","console","log","parsedData","JSON","parse","localStorage","setItem","stringify","clearLocalStorage","clear","finishedTimeData","teamId","finishedTime","prevFinishedTimes","updatedFinishedTimes","error","storedSelectedGroup","getItem","connected","disconnect","storedFinishedTimes","parsedFinishedTimes","getBackgroundColor","time","sortedTimes","Object","entries","sort","timeA","timeB","minutesA","secondsA","millisecondsA","split","map","Number","minutesB","secondsB","millisecondsB","tiedTeams","getTiedTeams","teamRank","findIndex","id","t","length","isTiedTeam","filter","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","groupInfo","selectedTask","tehtävä_nimi","max_aika","teams","team","className","joukkue_id","joukkue_nimi","jäsenet","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/Competition.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport '../css/Competition.css';\r\nfunction Competition() {\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  const [finishedTimes, setFinishedTimes] = useState({});\r\n  const [updatedGroupData, setUpdatedGroupData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const socket = io('http://localhost:8000');\r\n\r\n    socket.on('selectedGroupUpdate', (updatedGroupData) => {\r\n      console.log('Received updated group data:', updatedGroupData);\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\r\n\r\n      clearLocalStorage();\r\n    });\r\n    \r\n    socket.on('groupDataUpdate', (updatedGroupData) => {\r\n      console.log('Received group data update:', updatedGroupData);\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\r\n    });\r\n\r\n    const clearLocalStorage = () => {\r\n      localStorage.clear();\r\n    };\r\n    \r\n    \r\n\r\n    socket.on('finishedTimeUpdate', (finishedTimeData) => {\r\n      console.log('Received finished time data:', finishedTimeData);\r\n    \r\n      try {\r\n        const parsedData = JSON.parse(finishedTimeData);\r\n    \r\n        if (parsedData && parsedData.teamId && parsedData.finishedTime) {\r\n          setFinishedTimes((prevFinishedTimes) => {\r\n            const updatedFinishedTimes = {\r\n              ...prevFinishedTimes,\r\n              [parsedData.teamId]: parsedData.finishedTime,\r\n            };\r\n    \r\n            localStorage.setItem('finishedTimes', JSON.stringify(updatedFinishedTimes));\r\n    \r\n            console.log('Updated finishedTimes:', updatedFinishedTimes);\r\n            return updatedFinishedTimes;\r\n          });\r\n        } else {\r\n          console.error('Invalid finished time data:', finishedTimeData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing finished time data:', error);\r\n      }\r\n    });\r\n    \r\n    \r\n\r\n    \r\n\r\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\r\n    if (storedSelectedGroup) {\r\n      const parsedData = JSON.parse(storedSelectedGroup);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n    }\r\n\r\n    return () => {\r\n      if (socket.connected) {\r\n        socket.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const storedFinishedTimes = localStorage.getItem('finishedTimes');\r\n    if (storedFinishedTimes) {\r\n      const parsedFinishedTimes = JSON.parse(storedFinishedTimes);\r\n      setFinishedTimes(parsedFinishedTimes);\r\n    }\r\n  }, []);\r\n\r\n  const getBackgroundColor = (teamId) => {\r\n    const time = finishedTimes[teamId];\r\n    const sortedTimes = Object.entries(finishedTimes).sort(([, timeA], [, timeB]) => {\r\n      const [minutesA, secondsA, millisecondsA] = timeA.split(':').map(Number);\r\n      const [minutesB, secondsB, millisecondsB] = timeB.split(':').map(Number);\r\n  \r\n      if (minutesA !== minutesB) {\r\n        return minutesA - minutesB;\r\n      } else if (secondsA !== secondsB) {\r\n        return secondsA - secondsB;\r\n      } else {\r\n        return millisecondsA - millisecondsB;\r\n      }\r\n    });\r\n  \r\n    const tiedTeams = getTiedTeams(sortedTimes, time);\r\n  \r\n    const teamRank = sortedTimes.findIndex(([id, t]) => t === time) + 1;\r\n  \r\n    if (tiedTeams.length > 1) {\r\n      return isTiedTeam(tiedTeams, teamId) ? 'tied' : 'transparent';\r\n    }\r\n  \r\n    switch (teamRank) {\r\n      case 1:\r\n        return 'gold';\r\n      case 2:\r\n        return 'silver';\r\n      case 3:\r\n        return 'bronze';\r\n      default:\r\n        return 'transparent';\r\n    }\r\n  };\r\n  \r\n  const getTiedTeams = (sortedTimes, time) => {\r\n    return sortedTimes.filter(([id, t]) => t === time).map(([id]) => id);\r\n  };\r\n  \r\n  const isTiedTeam = (tiedTeams, teamId) => {\r\n    return tiedTeams.includes(teamId);\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h1>Competition</h1>\r\n      {updatedGroupData ? (\r\n        <div>\r\n          <h2>{updatedGroupData.groupInfo}</h2>\r\n          <h3>Selected Task: {updatedGroupData.selectedTask ? updatedGroupData.selectedTask.tehtävä_nimi : 'None'}</h3>\r\n          <p>Max Aika: {updatedGroupData.selectedTask ? updatedGroupData.selectedTask.max_aika : 'N/A'}</p>\r\n          <ul>\r\n  {updatedGroupData.teams.map((team) => (\r\n    <li key={team.joukkue_id} className={getBackgroundColor(team.joukkue_id)}>\r\n      <h3>{team.joukkue_nimi}</h3>\r\n      {finishedTimes[team.joukkue_id] && (\r\n        <p>Finished Time: {finishedTimes[team.joukkue_id]}</p>\r\n      )}\r\n      <p>Members: {team.jäsenet}</p>\r\n    </li>\r\n  ))}\r\n</ul>\r\n\r\n        </div>\r\n      ) : (\r\n        <p>No selected group available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Competition;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE9DC,SAAS,CAAC,MAAM;IACd,MAAMY,MAAM,GAAGX,EAAE,CAAC,uBAAuB,CAAC;IAE1CW,MAAM,CAACC,EAAE,CAAC,qBAAqB,EAAGH,gBAAgB,IAAK;MACrDI,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEL,gBAAgB,CAAC;MAC7D,MAAMM,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACR,gBAAgB,CAAC;MAC/CH,gBAAgB,CAACS,UAAU,CAAC;MAC5BL,mBAAmB,CAACK,UAAU,CAAC;MAC/BG,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEH,IAAI,CAACI,SAAS,CAACL,UAAU,CAAC,CAAC;MAEjEM,iBAAiB,CAAC,CAAC;IACrB,CAAC,CAAC;IAEFV,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAGH,gBAAgB,IAAK;MACjDI,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEL,gBAAgB,CAAC;MAC5D,MAAMM,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACR,gBAAgB,CAAC;MAC/CH,gBAAgB,CAACS,UAAU,CAAC;MAC5BL,mBAAmB,CAACK,UAAU,CAAC;MAC/BG,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEH,IAAI,CAACI,SAAS,CAACL,UAAU,CAAC,CAAC;IACnE,CAAC,CAAC;IAEF,MAAMM,iBAAiB,GAAGA,CAAA,KAAM;MAC9BH,YAAY,CAACI,KAAK,CAAC,CAAC;IACtB,CAAC;IAIDX,MAAM,CAACC,EAAE,CAAC,oBAAoB,EAAGW,gBAAgB,IAAK;MACpDV,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAES,gBAAgB,CAAC;MAE7D,IAAI;QACF,MAAMR,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACM,gBAAgB,CAAC;QAE/C,IAAIR,UAAU,IAAIA,UAAU,CAACS,MAAM,IAAIT,UAAU,CAACU,YAAY,EAAE;UAC9DjB,gBAAgB,CAAEkB,iBAAiB,IAAK;YACtC,MAAMC,oBAAoB,GAAG;cAC3B,GAAGD,iBAAiB;cACpB,CAACX,UAAU,CAACS,MAAM,GAAGT,UAAU,CAACU;YAClC,CAAC;YAEDP,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEH,IAAI,CAACI,SAAS,CAACO,oBAAoB,CAAC,CAAC;YAE3Ed,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEa,oBAAoB,CAAC;YAC3D,OAAOA,oBAAoB;UAC7B,CAAC,CAAC;QACJ,CAAC,MAAM;UACLd,OAAO,CAACe,KAAK,CAAC,6BAA6B,EAAEL,gBAAgB,CAAC;QAChE;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdf,OAAO,CAACe,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC,CAAC;IAMF,MAAMC,mBAAmB,GAAGX,YAAY,CAACY,OAAO,CAAC,eAAe,CAAC;IACjE,IAAID,mBAAmB,EAAE;MACvB,MAAMd,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACY,mBAAmB,CAAC;MAClDvB,gBAAgB,CAACS,UAAU,CAAC;MAC5BL,mBAAmB,CAACK,UAAU,CAAC;IACjC;IAEA,OAAO,MAAM;MACX,IAAIJ,MAAM,CAACoB,SAAS,EAAE;QACpBpB,MAAM,CAACqB,UAAU,CAAC,CAAC;MACrB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENjC,SAAS,CAAC,MAAM;IACd,MAAMkC,mBAAmB,GAAGf,YAAY,CAACY,OAAO,CAAC,eAAe,CAAC;IACjE,IAAIG,mBAAmB,EAAE;MACvB,MAAMC,mBAAmB,GAAGlB,IAAI,CAACC,KAAK,CAACgB,mBAAmB,CAAC;MAC3DzB,gBAAgB,CAAC0B,mBAAmB,CAAC;IACvC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAIX,MAAM,IAAK;IACrC,MAAMY,IAAI,GAAG7B,aAAa,CAACiB,MAAM,CAAC;IAClC,MAAMa,WAAW,GAAGC,MAAM,CAACC,OAAO,CAAChC,aAAa,CAAC,CAACiC,IAAI,CAAC,CAAC,GAAGC,KAAK,CAAC,EAAE,GAAGC,KAAK,CAAC,KAAK;MAC/E,MAAM,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MACxE,MAAM,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGT,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MAExE,IAAIL,QAAQ,KAAKM,QAAQ,EAAE;QACzB,OAAON,QAAQ,GAAGM,QAAQ;MAC5B,CAAC,MAAM,IAAIL,QAAQ,KAAKM,QAAQ,EAAE;QAChC,OAAON,QAAQ,GAAGM,QAAQ;MAC5B,CAAC,MAAM;QACL,OAAOL,aAAa,GAAGM,aAAa;MACtC;IACF,CAAC,CAAC;IAEF,MAAMC,SAAS,GAAGC,YAAY,CAAChB,WAAW,EAAED,IAAI,CAAC;IAEjD,MAAMkB,QAAQ,GAAGjB,WAAW,CAACkB,SAAS,CAAC,CAAC,CAACC,EAAE,EAAEC,CAAC,CAAC,KAAKA,CAAC,KAAKrB,IAAI,CAAC,GAAG,CAAC;IAEnE,IAAIgB,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;MACxB,OAAOC,UAAU,CAACP,SAAS,EAAE5B,MAAM,CAAC,GAAG,MAAM,GAAG,aAAa;IAC/D;IAEA,QAAQ8B,QAAQ;MACd,KAAK,CAAC;QACJ,OAAO,MAAM;MACf,KAAK,CAAC;QACJ,OAAO,QAAQ;MACjB,KAAK,CAAC;QACJ,OAAO,QAAQ;MACjB;QACE,OAAO,aAAa;IACxB;EACF,CAAC;EAED,MAAMD,YAAY,GAAGA,CAAChB,WAAW,EAAED,IAAI,KAAK;IAC1C,OAAOC,WAAW,CAACuB,MAAM,CAAC,CAAC,CAACJ,EAAE,EAAEC,CAAC,CAAC,KAAKA,CAAC,KAAKrB,IAAI,CAAC,CAACW,GAAG,CAAC,CAAC,CAACS,EAAE,CAAC,KAAKA,EAAE,CAAC;EACtE,CAAC;EAED,MAAMG,UAAU,GAAGA,CAACP,SAAS,EAAE5B,MAAM,KAAK;IACxC,OAAO4B,SAAS,CAACS,QAAQ,CAACrC,MAAM,CAAC;EACnC,CAAC;EAMD,oBACEtB,OAAA;IAAA4D,QAAA,gBACE5D,OAAA;MAAA4D,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBzD,gBAAgB,gBACfP,OAAA;MAAA4D,QAAA,gBACE5D,OAAA;QAAA4D,QAAA,EAAKrD,gBAAgB,CAAC0D;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrChE,OAAA;QAAA4D,QAAA,GAAI,iBAAe,EAACrD,gBAAgB,CAAC2D,YAAY,GAAG3D,gBAAgB,CAAC2D,YAAY,CAACC,YAAY,GAAG,MAAM;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7GhE,OAAA;QAAA4D,QAAA,GAAG,YAAU,EAACrD,gBAAgB,CAAC2D,YAAY,GAAG3D,gBAAgB,CAAC2D,YAAY,CAACE,QAAQ,GAAG,KAAK;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjGhE,OAAA;QAAA4D,QAAA,EACPrD,gBAAgB,CAAC8D,KAAK,CAACxB,GAAG,CAAEyB,IAAI,iBAC/BtE,OAAA;UAA0BuE,SAAS,EAAEtC,kBAAkB,CAACqC,IAAI,CAACE,UAAU,CAAE;UAAAZ,QAAA,gBACvE5D,OAAA;YAAA4D,QAAA,EAAKU,IAAI,CAACG;UAAY;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAC3B3D,aAAa,CAACiE,IAAI,CAACE,UAAU,CAAC,iBAC7BxE,OAAA;YAAA4D,QAAA,GAAG,iBAAe,EAACvD,aAAa,CAACiE,IAAI,CAACE,UAAU,CAAC;UAAA;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CACtD,eACDhE,OAAA;YAAA4D,QAAA,GAAG,WAAS,EAACU,IAAI,CAACI,OAAO;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GALvBM,IAAI,CAACE,UAAU;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMpB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEQ,CAAC,gBAENhE,OAAA;MAAA4D,QAAA,EAAG;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACnC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9D,EAAA,CA7JQD,WAAW;AAAA0E,EAAA,GAAX1E,WAAW;AA+JpB,eAAeA,WAAW;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}