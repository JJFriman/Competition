{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({});\n  const [lapCount, setLapCount] = useState({});\n  const intervalIdRef = useRef(null);\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      console.log('Received lap timer event:', lapTimerData);\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n\n      // Calculate the total time of all previous laps for the team\n      const previousLapsTotalTime = Array.isArray(laps[teamId]) ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0) : 0;\n      const lapTime = elapsedTime * 10 - previousLapsTotalTime;\n      console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\n\n      // Update the lap count for the team\n      setLapCount(prevLapCount => ({\n        ...prevLapCount,\n        [teamId]: (prevLapCount[teamId] || 0) + 1\n      }));\n\n      // Update the laps state with the new lap time\n      setLaps(prevLaps => {\n        const updatedLaps = {\n          ...prevLaps\n        };\n\n        // Check if the team has reached the lap limit\n        if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\n          return prevLaps; // Do not update state if the team has completed three laps\n        }\n\n        // Get the current lap count for the team\n        const currentLapCount = prevLaps[teamId] ? prevLaps[teamId].length : 0;\n\n        // If the team has not reached the lap limit, update the state with the new lap time\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n          taskName,\n          lapTime\n        }];\n\n        // Check if the team has completed three laps\n        if (currentLapCount + 1 === 3) {\n          // Calculate the combined time for the team\n          const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n          console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n        }\n        return updatedLaps;\n      });\n    };\n\n    // Listen for timerStart event from the server\n    socket.on('timerStart', startTimerHandler);\n\n    // Listen for lapTimer event from the server\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      // Clean up event listeners when the component unmounts\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime, lapCount, laps]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    const teamLaps = laps[teamId] || [];\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n    return combinedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), Object.entries(laps).map(([teamId, teamLaps]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Team: \", teamId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [teamLaps.map((lap, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n          }, `${teamId}-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this)), \"Combined Time: \", formatTime(getCombinedTime(teamId))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, teamId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"xy0GN5j6+1Co+jN4YoI+36srkjg=\");\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","console","log","lapTimerHandler","lapTimerData","teamId","taskName","error","previousLapsTotalTime","Array","isArray","reduce","totalTime","lap","lapTime","prevLapCount","prevLaps","updatedLaps","length","currentLapCount","combinedTime","on","off","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","teamLaps","children","fileName","_jsxFileName","lineNumber","columnNumber","className","formatTime","Object","entries","map","index","_c","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({});\r\n  const [lapCount, setLapCount] = useState({});\r\n  const intervalIdRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\nconst lapTimerHandler = (lapTimerData) => {\r\n  console.log('Received lap timer event:', lapTimerData);\r\n\r\n  const { teamId, taskName } = lapTimerData;\r\n\r\n  if (!startTime) {\r\n    console.error('Error: startTime is not set.');\r\n    return;\r\n  }\r\n\r\n  // Calculate the total time of all previous laps for the team\r\n  const previousLapsTotalTime = Array.isArray(laps[teamId])\r\n    ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0)\r\n    : 0;\r\n\r\n  const lapTime = elapsedTime * 10 - previousLapsTotalTime;\r\n\r\n  console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\r\n\r\n  // Update the lap count for the team\r\n  setLapCount((prevLapCount) => ({\r\n    ...prevLapCount,\r\n    [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n  }));\r\n\r\n  // Update the laps state with the new lap time\r\n  setLaps((prevLaps) => {\r\n    const updatedLaps = { ...prevLaps };\r\n\r\n    // Check if the team has reached the lap limit\r\n    if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\r\n      return prevLaps; // Do not update state if the team has completed three laps\r\n    }\r\n\r\n    // Get the current lap count for the team\r\n    const currentLapCount = prevLaps[teamId] ? prevLaps[teamId].length : 0;\r\n\r\n    // If the team has not reached the lap limit, update the state with the new lap time\r\n    updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n\r\n    // Check if the team has completed three laps\r\n    if (currentLapCount + 1 === 3) {\r\n      // Calculate the combined time for the team\r\n      const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n      console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n    }\r\n\r\n    return updatedLaps;\r\n  });\r\n};\r\n\r\n      \r\n      \r\n      \r\n\r\n    // Listen for timerStart event from the server\r\n    socket.on('timerStart', startTimerHandler);\r\n\r\n    // Listen for lapTimer event from the server\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      // Clean up event listeners when the component unmounts\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime, lapCount, laps]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  const getCombinedTime = (teamId) => {\r\n    const teamLaps = laps[teamId] || [];\r\n\r\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n    return combinedTime;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        {Object.entries(laps).map(([teamId, teamLaps]) => (\r\n          <div key={teamId}>\r\n            <h4>Team: {teamId}</h4> \r\n            <ul>\r\n              {teamLaps.map((lap, index) => (\r\n                <li key={`${teamId}-${index}`}>\r\n                  Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n                </li>\r\n              ))}\r\n               Combined Time: {formatTime(getCombinedTime(teamId))}\r\n            </ul>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}