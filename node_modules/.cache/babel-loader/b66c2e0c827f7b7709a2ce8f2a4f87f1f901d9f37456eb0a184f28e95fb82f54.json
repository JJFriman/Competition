{"ast":null,"code":"let socket;\nexport function initializeWebSocket() {\n  socket = new WebSocket('ws://localhost:8000');\n  socket.onopen = () => {\n    console.log('WebSocket connection is open.');\n  };\n  socket.onclose = () => {\n    console.log('WebSocket connection is closed.');\n  };\n}\nexport function sendSelectedGroupData(selectedGroupData) {\n  return new Promise((resolve, reject) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      const message = JSON.stringify(selectedGroupData);\n      socket.send(message);\n      resolve();\n    } else {\n      reject(new Error('WebSocket connection is not open'));\n    }\n  });\n}\nexport function sendSelectedTaskData(selectedTaskData) {\n  return new Promise((resolve, reject) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      const message = JSON.stringify(selectedTaskData);\n      socket.send(message);\n      resolve();\n    } else {\n      reject(new Error('WebSocket connection is not open'));\n    }\n  });\n}","map":{"version":3,"names":["socket","initializeWebSocket","WebSocket","onopen","console","log","onclose","sendSelectedGroupData","selectedGroupData","Promise","resolve","reject","readyState","OPEN","message","JSON","stringify","send","Error","sendSelectedTaskData","selectedTaskData"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/WebSocketUtils.js"],"sourcesContent":["let socket;\r\n\r\nexport function initializeWebSocket() {\r\n  socket = new WebSocket('ws://localhost:8000');\r\n\r\n  socket.onopen = () => {\r\n    console.log('WebSocket connection is open.');\r\n  };\r\n\r\n  socket.onclose = () => {\r\n    console.log('WebSocket connection is closed.');\r\n  };\r\n}\r\n\r\nexport function sendSelectedGroupData(selectedGroupData) {\r\n  return new Promise((resolve, reject) => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      const message = JSON.stringify(selectedGroupData);\r\n      socket.send(message);\r\n      resolve();\r\n    } else {\r\n      reject(new Error('WebSocket connection is not open'));\r\n    }\r\n  });\r\n}\r\n\r\nexport function sendSelectedTaskData(selectedTaskData) {\r\n  return new Promise((resolve, reject) => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      const message = JSON.stringify(selectedTaskData);\r\n      socket.send(message);\r\n      resolve();\r\n    } else {\r\n      reject(new Error('WebSocket connection is not open'));\r\n    }\r\n  });\r\n}\r\n"],"mappings":"AAAA,IAAIA,MAAM;AAEV,OAAO,SAASC,mBAAmBA,CAAA,EAAG;EACpCD,MAAM,GAAG,IAAIE,SAAS,CAAC,qBAAqB,CAAC;EAE7CF,MAAM,CAACG,MAAM,GAAG,MAAM;IACpBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC;EAEDL,MAAM,CAACM,OAAO,GAAG,MAAM;IACrBF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAChD,CAAC;AACH;AAEA,OAAO,SAASE,qBAAqBA,CAACC,iBAAiB,EAAE;EACvD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIX,MAAM,IAAIA,MAAM,CAACY,UAAU,KAAKV,SAAS,CAACW,IAAI,EAAE;MAClD,MAAMC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACR,iBAAiB,CAAC;MACjDR,MAAM,CAACiB,IAAI,CAACH,OAAO,CAAC;MACpBJ,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLC,MAAM,CAAC,IAAIO,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACvD;EACF,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,oBAAoBA,CAACC,gBAAgB,EAAE;EACrD,OAAO,IAAIX,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIX,MAAM,IAAIA,MAAM,CAACY,UAAU,KAAKV,SAAS,CAACW,IAAI,EAAE;MAClD,MAAMC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACI,gBAAgB,CAAC;MAChDpB,MAAM,CAACiB,IAAI,CAACH,OAAO,CAAC;MACpBJ,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLC,MAAM,CAAC,IAAIO,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACvD;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}