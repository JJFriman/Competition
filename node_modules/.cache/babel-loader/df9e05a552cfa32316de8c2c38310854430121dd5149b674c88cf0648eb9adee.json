{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const calculateCombinedTimesByRound = () => {\n    const combinedTimesByRound = {};\n    times.forEach(time => {\n      const teamId = time.joukkue_id;\n      const round = time.era;\n\n      // Calculate combined time for each team in each round\n      if (!combinedTimesByRound[round]) {\n        combinedTimesByRound[round] = {};\n      }\n      if (!combinedTimesByRound[round][teamId]) {\n        combinedTimesByRound[round][teamId] = 0;\n      }\n      combinedTimesByRound[round][teamId] += time.aika;\n    });\n    return combinedTimesByRound;\n  };\n  const findWinnersByRound = () => {\n    const combinedTimesByRound = calculateCombinedTimesByRound();\n    const winnersByRound = {};\n    Object.keys(combinedTimesByRound).forEach(round => {\n      const combinedTimesByTeam = combinedTimesByRound[round];\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\n\n      // Store round winners\n      winnersByRound[round] = roundWinners;\n    });\n    return winnersByRound;\n  };\n  const findRoundWinners = combinedTimesByTeam => {\n    const roundWinners = [];\n    Object.keys(combinedTimesByTeam).forEach(teamId => {\n      const combinedTime = combinedTimesByTeam[teamId];\n\n      // Compare combined time with other teams in the round\n      const isWinner = Object.values(combinedTimesByTeam).every(otherCombinedTime => combinedTime <= otherCombinedTime);\n      if (isWinner) {\n        roundWinners.push({\n          teamId,\n          combinedTime\n        });\n      }\n    });\n    return roundWinners;\n  };\n  const handleLopetaClick = async () => {\n    try {\n      await fetchTimes();\n      if (times && times.length > 0) {\n        const groupedByEra = groupTimesByEra(times, 'Alkuerä');\n        console.log('Grouped by era:', groupedByEra);\n        const winnersByRound = {};\n        const allWinners = [];\n\n        // Loop through each round\n        Object.keys(groupedByEra).forEach((eraKey, index) => {\n          const roundKey = `Alkuerä ${index + 1}`;\n\n          // Sort teams in the current round by combined time\n          const sortedTeams = groupedByEra[eraKey].sort((a, b) => a.aika - b.aika);\n\n          // Get the top 6 winners from the current round\n          const roundWinners = sortedTeams.slice(0, 6);\n\n          // Add round winners to the winnersByRound object\n          winnersByRound[roundKey] = roundWinners;\n\n          // Add round winners to the allWinners array\n          allWinners.push(...roundWinners);\n        });\n\n        // Ensure allWinners only contains unique teams\n        const uniqueWinners = Array.from(new Set(allWinners.map(winner => winner.joukkue_id))).map(teamId => ({\n          teamId,\n          combinedTime: allWinners.find(winner => winner.joukkue_id === teamId).aika\n        }));\n\n        // Get additional winners from the remaining teams (up to 6) based on combined time\n        const additionalWinners = uniqueWinners.sort((a, b) => a.combinedTime - b.combinedTime).slice(0, 6);\n\n        // Add additional winners to the winnersByRound object\n        winnersByRound['Additional Winners'] = additionalWinners;\n        console.log('Winners by Round:', winnersByRound);\n      } else {\n        alert('No times available.');\n      }\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","error","console","calculateCombinedTimesByRound","combinedTimesByRound","forEach","time","teamId","joukkue_id","round","era","aika","findWinnersByRound","winnersByRound","Object","keys","combinedTimesByTeam","roundWinners","findRoundWinners","combinedTime","isWinner","values","every","otherCombinedTime","push","handleLopetaClick","length","groupedByEra","groupTimesByEra","log","allWinners","eraKey","index","roundKey","sortedTeams","sort","a","b","slice","uniqueWinners","Array","from","Set","map","winner","find","additionalWinners","alert","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const calculateCombinedTimesByRound = () => {\r\n    const combinedTimesByRound = {};\r\n\r\n    times.forEach((time) => {\r\n      const teamId = time.joukkue_id;\r\n      const round = time.era;\r\n\r\n      // Calculate combined time for each team in each round\r\n      if (!combinedTimesByRound[round]) {\r\n        combinedTimesByRound[round] = {};\r\n      }\r\n\r\n      if (!combinedTimesByRound[round][teamId]) {\r\n        combinedTimesByRound[round][teamId] = 0;\r\n      }\r\n\r\n      combinedTimesByRound[round][teamId] += time.aika;\r\n    });\r\n\r\n    return combinedTimesByRound;\r\n  };\r\n\r\n  const findWinnersByRound = () => {\r\n    const combinedTimesByRound = calculateCombinedTimesByRound();\r\n    const winnersByRound = {};\r\n\r\n    Object.keys(combinedTimesByRound).forEach((round) => {\r\n      const combinedTimesByTeam = combinedTimesByRound[round];\r\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\r\n\r\n      // Store round winners\r\n      winnersByRound[round] = roundWinners;\r\n    });\r\n\r\n    return winnersByRound;\r\n  };\r\n\r\n  const findRoundWinners = (combinedTimesByTeam) => {\r\n    const roundWinners = [];\r\n    Object.keys(combinedTimesByTeam).forEach((teamId) => {\r\n      const combinedTime = combinedTimesByTeam[teamId];\r\n\r\n      // Compare combined time with other teams in the round\r\n      const isWinner = Object.values(combinedTimesByTeam).every(\r\n        (otherCombinedTime) => combinedTime <= otherCombinedTime\r\n      );\r\n\r\n      if (isWinner) {\r\n        roundWinners.push({ teamId, combinedTime });\r\n      }\r\n    });\r\n\r\n    return roundWinners;\r\n  };\r\n\r\nconst handleLopetaClick = async () => {\r\n  try {\r\n    await fetchTimes();\r\n\r\n    if (times && times.length > 0) {\r\n      const groupedByEra = groupTimesByEra(times, 'Alkuerä');\r\n      console.log('Grouped by era:', groupedByEra);\r\n\r\n      const winnersByRound = {};\r\n      const allWinners = [];\r\n\r\n      // Loop through each round\r\n      Object.keys(groupedByEra).forEach((eraKey, index) => {\r\n        const roundKey = `Alkuerä ${index + 1}`;\r\n\r\n        // Sort teams in the current round by combined time\r\n        const sortedTeams = groupedByEra[eraKey]\r\n          .sort((a, b) => a.aika - b.aika);\r\n\r\n        // Get the top 6 winners from the current round\r\n        const roundWinners = sortedTeams.slice(0, 6);\r\n\r\n        // Add round winners to the winnersByRound object\r\n        winnersByRound[roundKey] = roundWinners;\r\n\r\n        // Add round winners to the allWinners array\r\n        allWinners.push(...roundWinners);\r\n      });\r\n\r\n      // Ensure allWinners only contains unique teams\r\n      const uniqueWinners = Array.from(new Set(allWinners.map((winner) => winner.joukkue_id)))\r\n        .map((teamId) => ({\r\n          teamId,\r\n          combinedTime: allWinners.find((winner) => winner.joukkue_id === teamId).aika,\r\n        }));\r\n\r\n      // Get additional winners from the remaining teams (up to 6) based on combined time\r\n      const additionalWinners = uniqueWinners\r\n        .sort((a, b) => a.combinedTime - b.combinedTime)\r\n        .slice(0, 6);\r\n\r\n      // Add additional winners to the winnersByRound object\r\n      winnersByRound['Additional Winners'] = additionalWinners;\r\n\r\n      console.log('Winners by Round:', winnersByRound);\r\n    } else {\r\n      alert('No times available.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling lopeta click:', error);\r\n  }\r\n};\r\n\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}