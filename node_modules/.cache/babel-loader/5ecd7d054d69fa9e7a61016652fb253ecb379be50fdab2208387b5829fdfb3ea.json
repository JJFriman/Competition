{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp2\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport useGroupData from './UseGroupData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({});\n  const [lapCount, setLapCount] = useState({});\n  const intervalIdRef = useRef(null);\n  const {\n    selectedGroup\n  } = useGroupData();\n  const submitMaxAikaLaps = (teamId, taskName, round) => {\n    const task = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.find(t => t.tehtävä_nimi === taskName);\n    const maxAika = task ? task.max_aika * 1000 : 0;\n    setLapCount(prevLapCount => ({\n      ...prevLapCount,\n      [teamId]: (prevLapCount[teamId] || 0) + 1\n    }));\n    setLaps(prevLaps => {\n      const updatedLaps = {\n        ...prevLaps\n      };\n      const existingLapIndex = Array.isArray(updatedLaps[teamId]) ? updatedLaps[teamId].findIndex(lap => lap.taskName === taskName) : -1;\n      if (existingLapIndex === -1) {\n        const previousLapsTotalTime = Array.isArray(updatedLaps[teamId]) ? updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0) : 0;\n        let lapTime;\n        if (round === 1) {\n          // Lap 1 needs to be finished before task 1 max_aika\n          lapTime = elapsedTime * 10 - previousLapsTotalTime;\n        } else {\n          const teamPreviousTime = existingLapIndex > 0 ? updatedLaps[teamId][existingLapIndex - 1].lapTime : 0;\n          if (round === 2) {\n            // Lap 2 needs to be combined with the team's previous time and task 2 max_aika\n            const startOfSecondLap = existingLapIndex > 0 ? updatedLaps[teamId][existingLapIndex - 1].lapTime : previousLapsTotalTime;\n            lapTime = Math.min(maxAika + startOfSecondLap, maxAika);\n          } else if (round === 3) {\n            // Lap 3 needs to be combined with team's lap 1 + lap 2 + task 3 max_aika\n            const startOfThirdLap = previousLapsTotalTime + teamPreviousTime + maxAika;\n            lapTime = Math.min(startOfThirdLap, maxAika);\n          }\n        }\n\n        // Handle the case where lapTime exceeds maxAika\n        lapTime = Math.min(lapTime, maxAika);\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n          taskName,\n          lapTime\n        }];\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\n      }\n      const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\n      if (currentLapCount === 3) {\n        const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n        console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n      }\n      return updatedLaps;\n    });\n  };\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      console.log('Received lap timer event:', lapTimerData);\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n      const previousLapsTotalTime = Array.isArray(laps[teamId]) ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0) : 0;\n      const existingLapIndex = Array.isArray(laps[teamId]) ? laps[teamId].findIndex(lap => lap.taskName === taskName) : -1;\n      let lapTime;\n      if (existingLapIndex !== -1) {\n        lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\n        console.log(`Team: ${teamId}, Task: ${taskName}, Updated Lap Time: ${lapTime} milliseconds`);\n      } else {\n        lapTime = elapsedTime * 10 - previousLapsTotalTime;\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\n      }\n      setLapCount(prevLapCount => ({\n        ...prevLapCount,\n        [teamId]: (prevLapCount[teamId] || 0) + 1\n      }));\n      setLaps(prevLaps => {\n        const updatedLaps = {\n          ...prevLaps\n        };\n        if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\n          return prevLaps;\n        }\n        const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\n        if (existingLapIndex !== -1) {\n          updatedLaps[teamId][existingLapIndex] = {\n            taskName,\n            lapTime\n          };\n        } else {\n          updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n            taskName,\n            lapTime\n          }];\n        }\n        if (currentLapCount + 1 === 3) {\n          const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n          console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n        }\n        return updatedLaps;\n      });\n    };\n    socket.on('timerStart', startTimerHandler);\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime, lapCount, laps]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    const teamLaps = laps[teamId] || [];\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n    return combinedTime;\n  };\n  const renderTeams = () => {\n    if (!selectedGroup || !selectedGroup.teams) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No teams available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 14\n      }, this);\n    }\n    return selectedGroup.teams.map(team => {\n      var _laps$team$joukkue_id, _laps$team$joukkue_id2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Team: \", team.joukkue_nimi]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [(_laps$team$joukkue_id = laps[team.joukkue_id]) === null || _laps$team$joukkue_id === void 0 ? void 0 : _laps$team$joukkue_id.map(lap => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n          }, `${team.joukkue_id}-${lap.taskName}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)), ((_laps$team$joukkue_id2 = laps[team.joukkue_id]) === null || _laps$team$joukkue_id2 === void 0 ? void 0 : _laps$team$joukkue_id2.length) === 3 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Combined Time: \", formatTime(getCombinedTime(team.joukkue_id))]\n          }, `${team.joukkue_id}-combined`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }, this)]\n      }, team.joukkue_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }, this);\n    });\n  };\n  useEffect(() => {\n    var _selectedGroup$teams;\n    const allLapsCompleted = selectedGroup === null || selectedGroup === void 0 ? void 0 : (_selectedGroup$teams = selectedGroup.teams) === null || _selectedGroup$teams === void 0 ? void 0 : _selectedGroup$teams.every(team => {\n      const teamLaps = laps[team.joukkue_id] || [];\n      return teamLaps.length === 3;\n    });\n    if (allLapsCompleted) {\n      setIsRunning(false);\n    }\n  }, [selectedGroup, laps]);\n  useEffect(() => {\n    if (selectedGroup !== null && selectedGroup !== void 0 && selectedGroup.selectedTasks && laps && elapsedTime > 0) {\n      selectedGroup.selectedTasks.forEach(task => {\n        selectedGroup.teams.forEach(team => {\n          const teamLaps = laps[team.joukkue_id] || [];\n          const currentLapCount = teamLaps.filter(lap => lap.taskName === task.tehtävä_nimi).length;\n          if (currentLapCount < 3 && elapsedTime * 10 >= task.max_aika * 1000) {\n            console.log(`Max_aika reached for Team: ${team.joukkue_id}, Task: ${task.tehtävä_nimi}`);\n            // Here's where you call the submitMaxAikaLaps function\n            submitMaxAikaLaps(team.joukkue_id, task.tehtävä_nimi);\n          }\n        });\n      });\n    }\n  }, [selectedGroup, laps, elapsedTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-times-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Maximum Time for Each Task:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Task: \", task.tehtävä_nimi, \", Maximum Time: \", formatTime(task.max_aika * 1000)]\n        }, `${task.tehtävä_id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), renderTeams()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"QKpA02NnjqE5Tvum0bN6/WEKh7Q=\", false, function () {\n  return [useGroupData];\n});\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","useGroupData","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","selectedGroup","submitMaxAikaLaps","teamId","taskName","round","task","selectedTasks","find","t","tehtävä_nimi","maxAika","max_aika","prevLapCount","prevLaps","updatedLaps","existingLapIndex","Array","isArray","findIndex","lap","previousLapsTotalTime","reduce","totalTime","lapTime","teamPreviousTime","startOfSecondLap","Math","min","startOfThirdLap","console","log","currentLapCount","length","combinedTime","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","lapTimerHandler","lapTimerData","error","on","off","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","teamLaps","renderTeams","teams","children","fileName","_jsxFileName","lineNumber","columnNumber","map","team","_laps$team$joukkue_id","_laps$team$joukkue_id2","joukkue_nimi","joukkue_id","formatTime","_selectedGroup$teams","allLapsCompleted","every","forEach","filter","className","index","tehtävä_id","_c","milliseconds","totalSeconds","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp2/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport useGroupData from './UseGroupData';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({});\r\n  const [lapCount, setLapCount] = useState({});\r\n  const intervalIdRef = useRef(null);\r\n  const { selectedGroup } = useGroupData();\r\n\r\n  const submitMaxAikaLaps = (teamId, taskName, round) => {\r\n    const task = selectedGroup?.selectedTasks.find((t) => t.tehtävä_nimi === taskName);\r\n    const maxAika = task ? task.max_aika * 1000 : 0;\r\n  \r\n    setLapCount((prevLapCount) => ({\r\n      ...prevLapCount,\r\n      [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n    }));\r\n  \r\n    setLaps((prevLaps) => {\r\n      const updatedLaps = { ...prevLaps };\r\n  \r\n      const existingLapIndex = Array.isArray(updatedLaps[teamId])\r\n        ? updatedLaps[teamId].findIndex((lap) => lap.taskName === taskName)\r\n        : -1;\r\n  \r\n      if (existingLapIndex === -1) {\r\n        const previousLapsTotalTime = Array.isArray(updatedLaps[teamId])\r\n          ? updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0)\r\n          : 0;\r\n  \r\n        let lapTime;\r\n  \r\n        if (round === 1) {\r\n          // Lap 1 needs to be finished before task 1 max_aika\r\n          lapTime = elapsedTime * 10 - previousLapsTotalTime;\r\n        } else {\r\n          const teamPreviousTime = existingLapIndex > 0\r\n            ? updatedLaps[teamId][existingLapIndex - 1].lapTime\r\n            : 0;\r\n  \r\n          if (round === 2) {\r\n            // Lap 2 needs to be combined with the team's previous time and task 2 max_aika\r\n            const startOfSecondLap = existingLapIndex > 0\r\n              ? updatedLaps[teamId][existingLapIndex - 1].lapTime\r\n              : previousLapsTotalTime;\r\n            lapTime = Math.min(maxAika + startOfSecondLap, maxAika);\r\n          } else if (round === 3) {\r\n            // Lap 3 needs to be combined with team's lap 1 + lap 2 + task 3 max_aika\r\n            const startOfThirdLap = previousLapsTotalTime + teamPreviousTime + maxAika;\r\n            lapTime = Math.min(startOfThirdLap, maxAika);\r\n          }\r\n        }\r\n  \r\n        // Handle the case where lapTime exceeds maxAika\r\n        lapTime = Math.min(lapTime, maxAika);\r\n  \r\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n  \r\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\r\n      }\r\n  \r\n      const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\r\n  \r\n      if (currentLapCount === 3) {\r\n        const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n        console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n      }\r\n  \r\n      return updatedLaps;\r\n    });\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\n    const lapTimerHandler = (lapTimerData) => {\r\n      console.log('Received lap timer event:', lapTimerData);\r\n\r\n      const { teamId, taskName } = lapTimerData;\r\n\r\n      if (!startTime) {\r\n        console.error('Error: startTime is not set.');\r\n        return;\r\n      }\r\n\r\n      const previousLapsTotalTime = Array.isArray(laps[teamId])\r\n        ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0)\r\n        : 0;\r\n\r\n      const existingLapIndex = Array.isArray(laps[teamId])\r\n        ? laps[teamId].findIndex((lap) => lap.taskName === taskName)\r\n        : -1;\r\n\r\n      let lapTime;\r\n\r\n      if (existingLapIndex !== -1) {\r\n        lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\r\n        console.log(`Team: ${teamId}, Task: ${taskName}, Updated Lap Time: ${lapTime} milliseconds`);\r\n      } else {\r\n        lapTime = elapsedTime * 10 - previousLapsTotalTime;\r\n\r\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\r\n      }\r\n\r\n      setLapCount((prevLapCount) => ({\r\n        ...prevLapCount,\r\n        [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n      }));\r\n\r\n      setLaps((prevLaps) => {\r\n        const updatedLaps = { ...prevLaps };\r\n\r\n        if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\r\n          return prevLaps;\r\n        }\r\n\r\n        const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\r\n\r\n        if (existingLapIndex !== -1) {\r\n          updatedLaps[teamId][existingLapIndex] = { taskName, lapTime };\r\n        } else {\r\n          updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n        }\r\n\r\n        if (currentLapCount + 1 === 3) {\r\n          const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n          console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n        }\r\n\r\n        return updatedLaps;\r\n      });\r\n    };\r\n\r\n    socket.on('timerStart', startTimerHandler);\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime, lapCount, laps]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  const getCombinedTime = (teamId) => {\r\n    const teamLaps = laps[teamId] || [];\r\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n    return combinedTime;\r\n  };\r\n\r\n  const renderTeams = () => {\r\n    if (!selectedGroup || !selectedGroup.teams) {\r\n      return <p>No teams available.</p>;\r\n    }\r\n\r\n    return selectedGroup.teams.map((team) => (\r\n      <div key={team.joukkue_id}>\r\n        <h4>Team: {team.joukkue_nimi}</h4>\r\n        <ul>\r\n          {laps[team.joukkue_id]?.map((lap) => (\r\n            <li key={`${team.joukkue_id}-${lap.taskName}`}>\r\n              Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n            </li>\r\n          ))}\r\n\r\n          {laps[team.joukkue_id]?.length === 3 && (\r\n            <li key={`${team.joukkue_id}-combined`}>\r\n              Combined Time: {formatTime(getCombinedTime(team.joukkue_id))}\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const allLapsCompleted = selectedGroup?.teams?.every((team) => {\r\n      const teamLaps = laps[team.joukkue_id] || [];\r\n      return teamLaps.length === 3;\r\n    });\r\n\r\n    if (allLapsCompleted) {\r\n      setIsRunning(false);\r\n    }\r\n  }, [selectedGroup, laps]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (selectedGroup?.selectedTasks && laps && elapsedTime > 0) {\r\n      selectedGroup.selectedTasks.forEach((task) => {\r\n        selectedGroup.teams.forEach((team) => {\r\n          const teamLaps = laps[team.joukkue_id] || [];\r\n          const currentLapCount = teamLaps.filter((lap) => lap.taskName === task.tehtävä_nimi).length;\r\n  \r\n          if (currentLapCount < 3 && elapsedTime * 10 >= task.max_aika * 1000) {\r\n            console.log(`Max_aika reached for Team: ${team.joukkue_id}, Task: ${task.tehtävä_nimi}`);\r\n            // Here's where you call the submitMaxAikaLaps function\r\n            submitMaxAikaLaps(team.joukkue_id, task.tehtävä_nimi);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }, [selectedGroup, laps, elapsedTime]);\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"max-times-container\">\r\n        <h4>Maximum Time for Each Task:</h4>\r\n        <ul>\r\n          {selectedGroup?.selectedTasks.map((task, index) => (\r\n            <li key={`${task.tehtävä_id}-${index}`}>\r\n              Task: {task.tehtävä_nimi}, Maximum Time: {formatTime(task.max_aika * 1000)}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        {renderTeams()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}