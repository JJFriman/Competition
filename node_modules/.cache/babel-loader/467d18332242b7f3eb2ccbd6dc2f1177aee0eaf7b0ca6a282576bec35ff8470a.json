{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({}); // State to store lap times for each team\n  const [lapCount, setLapCount] = useState({}); // State to track the lap count for each team\n  const intervalIdRef = useRef(null);\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      console.log('Received lap timer event:', lapTimerData);\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n      const currentElapsedTime = elapsedTime * 10; // Capture the current elapsed time when the lap timer is received\n\n      // Check if the current elapsed time is defined and greater than or equal to the start time\n      if (currentElapsedTime !== undefined && currentElapsedTime >= startTime) {\n        // Calculate the lap time by subtracting the start time and all previous laps for the specific team\n        const lapTime = currentElapsedTime - startTime - (laps[teamId] ? laps[teamId].reduce((total, lap) => total + lap.lapTime, 0) : 0);\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\n\n        // Update the lap count for the team\n        setLapCount(prevLapCount => ({\n          ...prevLapCount,\n          [teamId]: (prevLapCount[teamId] || 0) + 1\n        }));\n\n        // Update the laps state with the new lap time for the specific team\n        setLaps(prevLaps => {\n          const updatedLaps = {\n            ...prevLaps\n          };\n          updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n            taskName,\n            lapTime\n          }];\n          return updatedLaps;\n        });\n      } else {\n        console.error('Invalid lap event: Elapsed time is not defined or not greater than start time.');\n      }\n    };\n\n    // Listen for timerStart event from the server\n    socket.on('timerStart', startTimerHandler);\n\n    // Listen for lapTimer event from the server\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      // Clean up event listeners when the component unmounts\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime, laps]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    // Get the laps for the specific team\n    const teamLaps = laps[teamId] || [];\n\n    // Check if all three laps are made\n    if (teamLaps.length === 3) {\n      // Calculate the combined time for the team\n      const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n      return combinedTime;\n    } else {\n      return null; // If not all three laps are made, return null\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.entries(laps).map(([teamId, teamLaps]) => teamLaps.map((lap, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Team: \", teamId, \", Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n        }, `${teamId}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Combined Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.keys(lapCount).map(teamId => {\n          const combinedTime = getCombinedTime(teamId);\n          return combinedTime !== null ? /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Team: \", teamId, \", Combined Time: \", formatTime(combinedTime)]\n          }, teamId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this) : null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"xy0GN5j6+1Co+jN4YoI+36srkjg=\");\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","console","log","lapTimerHandler","lapTimerData","teamId","taskName","error","currentElapsedTime","undefined","lapTime","reduce","total","lap","prevLapCount","prevLaps","updatedLaps","on","off","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","teamLaps","length","combinedTime","totalTime","children","fileName","_jsxFileName","lineNumber","columnNumber","className","formatTime","Object","entries","map","index","keys","_c","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({}); // State to store lap times for each team\r\n  const [lapCount, setLapCount] = useState({}); // State to track the lap count for each team\r\n  const intervalIdRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\nconst lapTimerHandler = (lapTimerData) => {\r\n  console.log('Received lap timer event:', lapTimerData);\r\n\r\n  const { teamId, taskName } = lapTimerData;\r\n\r\n  if (!startTime) {\r\n    console.error('Error: startTime is not set.');\r\n    return;\r\n  }\r\n\r\n  const currentElapsedTime = elapsedTime * 10; // Capture the current elapsed time when the lap timer is received\r\n\r\n  // Check if the current elapsed time is defined and greater than or equal to the start time\r\n  if (currentElapsedTime !== undefined && currentElapsedTime >= startTime) {\r\n    // Calculate the lap time by subtracting the start time and all previous laps for the specific team\r\n    const lapTime = currentElapsedTime - startTime - (laps[teamId] ? laps[teamId].reduce((total, lap) => total + lap.lapTime, 0) : 0);\r\n\r\n    console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\r\n\r\n    // Update the lap count for the team\r\n    setLapCount((prevLapCount) => ({\r\n      ...prevLapCount,\r\n      [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n    }));\r\n\r\n    // Update the laps state with the new lap time for the specific team\r\n    setLaps((prevLaps) => {\r\n      const updatedLaps = { ...prevLaps };\r\n      updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n      return updatedLaps;\r\n    });\r\n  } else {\r\n    console.error('Invalid lap event: Elapsed time is not defined or not greater than start time.');\r\n  }\r\n};\r\n\r\n\r\n    // Listen for timerStart event from the server\r\n    socket.on('timerStart', startTimerHandler);\r\n\r\n    // Listen for lapTimer event from the server\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      // Clean up event listeners when the component unmounts\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime, laps]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  const getCombinedTime = (teamId) => {\r\n    // Get the laps for the specific team\r\n    const teamLaps = laps[teamId] || [];\r\n\r\n    // Check if all three laps are made\r\n    if (teamLaps.length === 3) {\r\n      // Calculate the combined time for the team\r\n      const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n      return combinedTime;\r\n    } else {\r\n      return null; // If not all three laps are made, return null\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        <ul>\r\n          {Object.entries(laps).map(([teamId, teamLaps]) =>\r\n            teamLaps.map((lap, index) => (\r\n              <li key={`${teamId}-${index}`}>\r\n                Team: {teamId}, Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n              </li>\r\n            ))\r\n          )}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h4>Combined Times:</h4>\r\n        <ul>\r\n          {Object.keys(lapCount).map((teamId) => {\r\n            const combinedTime = getCombinedTime(teamId);\r\n            return combinedTime !== null ? (\r\n              <li key={teamId}>\r\n                Team: {teamId}, Combined Time: {formatTime(combinedTime)}\r\n              </li>\r\n            ) : null;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}