{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  const [allWinners, setAllWinners] = useState([]);\n  const [remainingNonWinners, setRemainingNonWinners] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const calculateCombinedTimesByRound = () => {\n    const combinedTimesByRound = {};\n    times.forEach(time => {\n      const teamId = time.joukkue_id;\n      const round = time.era;\n      if (!combinedTimesByRound[round]) {\n        combinedTimesByRound[round] = {};\n      }\n      if (!combinedTimesByRound[round][teamId]) {\n        combinedTimesByRound[round][teamId] = 0;\n      }\n      combinedTimesByRound[round][teamId] += time.aika;\n    });\n    return combinedTimesByRound;\n  };\n  const findWinnersAndNonWinnersByRound = () => {\n    const combinedTimesByRound = calculateCombinedTimesByRound();\n    const winnersByRound = {};\n    const allWinners = [];\n    let allNonWinners = [];\n    Object.keys(combinedTimesByRound).forEach(round => {\n      const combinedTimesByTeam = combinedTimesByRound[round];\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\n      allWinners.push(...roundWinners);\n      winnersByRound[round] = roundWinners;\n      const nonWinners = Object.keys(combinedTimesByTeam).filter(teamId => !roundWinners.some(winner => winner.teamId === teamId)).map(teamId => ({\n        teamId,\n        combinedTime: combinedTimesByTeam[teamId],\n        round\n      }));\n      allNonWinners.push(...nonWinners);\n    });\n    allNonWinners.sort((a, b) => a.combinedTime - b.combinedTime);\n    return {\n      winnersByRound,\n      allNonWinners\n    };\n  };\n  const findRoundWinners = combinedTimesByTeam => {\n    const roundWinners = [];\n    Object.keys(combinedTimesByTeam).forEach(teamId => {\n      const combinedTime = combinedTimesByTeam[teamId];\n      const isWinner = Object.values(combinedTimesByTeam).every(otherCombinedTime => combinedTime <= otherCombinedTime);\n      if (isWinner) {\n        roundWinners.push({\n          teamId,\n          combinedTime\n        });\n      }\n    });\n    return roundWinners;\n  };\n  const handleLopetaClick = async () => {\n    try {\n      const {\n        winnersByRound,\n        allNonWinners\n      } = findWinnersAndNonWinnersByRound();\n      const removedTeams = allNonWinners.slice(0, 6);\n      const remainingNonWinners = allNonWinners.slice(6);\n      const allWinners = Object.values(winnersByRound).reduce((acc, roundWinners) => acc.concat(roundWinners), []).concat(removedTeams);\n      setAllWinners(allWinners);\n      setRemainingNonWinners(remainingNonWinners);\n      const allWinnersUpdates = allWinners.map(async winner => {\n        var _data$updateResults$f;\n        const response = await fetch('http://localhost:3001/api/updateJoukkueet', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            updates: [{\n              joukkueId: winner.teamId,\n              updatedFields: {\n                semifinalist: true\n              }\n            }]\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to update data');\n        }\n        const data = await response.json();\n        return {\n          joukkueId: winner.teamId,\n          updatedFields: (_data$updateResults$f = data.updateResults.find(result => result.joukkueId === winner.teamId)) === null || _data$updateResults$f === void 0 ? void 0 : _data$updateResults$f.updatedFields\n        };\n      });\n      const remainingNonWinnersUpdates = remainingNonWinners.map(async nonWinner => {\n        var _data$updateResults$f2;\n        const response = await fetch('http://localhost:3001/api/updateJoukkueet', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            updates: [{\n              joukkueId: nonWinner.teamId,\n              updatedFields: {\n                kerailyera: true\n              }\n            }]\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to update data');\n        }\n        const data = await response.json();\n        return {\n          joukkueId: nonWinner.teamId,\n          updatedFields: (_data$updateResults$f2 = data.updateResults.find(result => result.joukkueId === nonWinner.teamId)) === null || _data$updateResults$f2 === void 0 ? void 0 : _data$updateResults$f2.updatedFields\n        };\n      });\n      const response = await fetch('http://localhost:3001/api/updateJoukkueet', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          updates: allWinnersUpdates.concat(await Promise.all(remainingNonWinnersUpdates))\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update winners and non-winners');\n      }\n      const data = await response.json();\n      console.log('All Winners:', allWinners);\n      console.log('All Non-winners:', remainingNonWinners);\n      console.log('Update Results:', data.updateResults);\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"Ak/8EFRhAg4HFqhPMQB2oqHH9sw=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","allWinners","setAllWinners","remainingNonWinners","setRemainingNonWinners","fetchTimes","response","fetch","ok","Error","data","json","error","console","calculateCombinedTimesByRound","combinedTimesByRound","forEach","time","teamId","joukkue_id","round","era","aika","findWinnersAndNonWinnersByRound","winnersByRound","allNonWinners","Object","keys","combinedTimesByTeam","roundWinners","findRoundWinners","push","nonWinners","filter","some","winner","map","combinedTime","sort","a","b","isWinner","values","every","otherCombinedTime","handleLopetaClick","removedTeams","slice","reduce","acc","concat","allWinnersUpdates","_data$updateResults$f","method","headers","body","JSON","stringify","updates","joukkueId","updatedFields","semifinalist","updateResults","find","result","remainingNonWinnersUpdates","nonWinner","_data$updateResults$f2","kerailyera","Promise","all","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n  const [allWinners, setAllWinners] = useState([]);\r\n  const [remainingNonWinners, setRemainingNonWinners] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const calculateCombinedTimesByRound = () => {\r\n    const combinedTimesByRound = {};\r\n\r\n    times.forEach((time) => {\r\n      const teamId = time.joukkue_id;\r\n      const round = time.era;\r\n\r\n      if (!combinedTimesByRound[round]) {\r\n        combinedTimesByRound[round] = {};\r\n      }\r\n\r\n      if (!combinedTimesByRound[round][teamId]) {\r\n        combinedTimesByRound[round][teamId] = 0;\r\n      }\r\n\r\n      combinedTimesByRound[round][teamId] += time.aika;\r\n    });\r\n\r\n    return combinedTimesByRound;\r\n  };\r\n\r\n  const findWinnersAndNonWinnersByRound = () => {\r\n    const combinedTimesByRound = calculateCombinedTimesByRound();\r\n    const winnersByRound = {};\r\n    const allWinners = [];\r\n    let allNonWinners = [];\r\n  \r\n    Object.keys(combinedTimesByRound).forEach((round) => {\r\n      const combinedTimesByTeam = combinedTimesByRound[round];\r\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\r\n\r\n      allWinners.push(...roundWinners);\r\n  \r\n      winnersByRound[round] = roundWinners;\r\n  \r\n      const nonWinners = Object.keys(combinedTimesByTeam)\r\n        .filter((teamId) => !roundWinners.some((winner) => winner.teamId === teamId))\r\n        .map((teamId) => ({ teamId, combinedTime: combinedTimesByTeam[teamId], round }));\r\n  \r\n      allNonWinners.push(...nonWinners);\r\n    });\r\n  \r\n    allNonWinners.sort((a, b) => a.combinedTime - b.combinedTime);\r\n  \r\n    return { winnersByRound, allNonWinners };\r\n  };\r\n\r\n  \r\n\r\n  const findRoundWinners = (combinedTimesByTeam) => {\r\n    const roundWinners = [];\r\n    Object.keys(combinedTimesByTeam).forEach((teamId) => {\r\n      const combinedTime = combinedTimesByTeam[teamId];\r\n\r\n      const isWinner = Object.values(combinedTimesByTeam).every(\r\n        (otherCombinedTime) => combinedTime <= otherCombinedTime\r\n      );\r\n\r\n      if (isWinner) {\r\n        roundWinners.push({ teamId, combinedTime });\r\n      }\r\n    });\r\n\r\n    return roundWinners;\r\n  };\r\n\r\n  const handleLopetaClick = async () => {\r\n    try {\r\n      const { winnersByRound, allNonWinners } = findWinnersAndNonWinnersByRound();\r\n  \r\n      const removedTeams = allNonWinners.slice(0, 6);\r\n      const remainingNonWinners = allNonWinners.slice(6);\r\n  \r\n      const allWinners = Object.values(winnersByRound)\r\n        .reduce((acc, roundWinners) => acc.concat(roundWinners), [])\r\n        .concat(removedTeams);\r\n  \r\n      setAllWinners(allWinners);\r\n      setRemainingNonWinners(remainingNonWinners);\r\n  \r\n\r\n      const allWinnersUpdates = allWinners.map(async (winner) => {\r\n        const response = await fetch('http://localhost:3001/api/updateJoukkueet', {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            updates: [{\r\n              joukkueId: winner.teamId,\r\n              updatedFields: { semifinalist: true },\r\n            }],\r\n          }),\r\n        });\r\n      \r\n        if (!response.ok) {\r\n          throw new Error('Failed to update data');\r\n        }\r\n      \r\n        const data = await response.json();\r\n        return {\r\n          joukkueId: winner.teamId,\r\n          updatedFields: data.updateResults.find(result => result.joukkueId === winner.teamId)?.updatedFields,\r\n        };\r\n      });\r\n      \r\n      const remainingNonWinnersUpdates = remainingNonWinners.map(async (nonWinner) => {\r\n        const response = await fetch('http://localhost:3001/api/updateJoukkueet', {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            updates: [{\r\n              joukkueId: nonWinner.teamId,\r\n              updatedFields: { kerailyera: true },\r\n            }],\r\n          }),\r\n        });\r\n      \r\n        if (!response.ok) {\r\n          throw new Error('Failed to update data');\r\n        }\r\n      \r\n        const data = await response.json();\r\n        return {\r\n          joukkueId: nonWinner.teamId,\r\n          updatedFields: data.updateResults.find(result => result.joukkueId === nonWinner.teamId)?.updatedFields,\r\n        };\r\n      });\r\n      \r\n      const response = await fetch('http://localhost:3001/api/updateJoukkueet', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          updates: allWinnersUpdates.concat(await Promise.all(remainingNonWinnersUpdates)),\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to update winners and non-winners');\r\n      }\r\n  \r\n      const data = await response.json();\r\n  \r\n      console.log('All Winners:', allWinners);\r\n      console.log('All Non-winners:', remainingNonWinners);\r\n      console.log('Update Results:', data.updateResults);\r\n    } catch (error) {\r\n      console.error('Error handling lopeta click:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}