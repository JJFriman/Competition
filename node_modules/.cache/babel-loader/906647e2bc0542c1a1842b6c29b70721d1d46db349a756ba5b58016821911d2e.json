{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const calculateCombinedTimesByRound = () => {\n    const combinedTimesByRound = {};\n    times.forEach(time => {\n      const teamId = time.joukkue_id;\n      const round = time.era;\n\n      // Calculate combined time for each team in each round\n      if (!combinedTimesByRound[round]) {\n        combinedTimesByRound[round] = {};\n      }\n      if (!combinedTimesByRound[round][teamId]) {\n        combinedTimesByRound[round][teamId] = 0;\n      }\n      combinedTimesByRound[round][teamId] += time.aika;\n    });\n    return combinedTimesByRound;\n  };\n  const findWinnersByRound = () => {\n    const combinedTimesByRound = calculateCombinedTimesByRound();\n    const winnersByRound = {};\n    const allWinners = []; // Keep track of all winners\n    const allNonWinners = []; // Keep track of all non-winners\n\n    Object.keys(combinedTimesByRound).forEach(round => {\n      const combinedTimesByTeam = combinedTimesByRound[round];\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\n\n      // Add round winners to the list of all winners\n      allWinners.push(...roundWinners);\n\n      // Store round winners\n      winnersByRound[round] = roundWinners;\n\n      // Find non-winners for the current round\n      const nonWinners = Object.keys(combinedTimesByTeam).filter(teamId => !roundWinners.some(winner => winner.teamId === teamId)).map(teamId => ({\n        teamId,\n        combinedTime: combinedTimesByTeam[teamId]\n      }));\n\n      // Add non-winners to the list of all non-winners\n      allNonWinners.push(...nonWinners);\n\n      // Log non-winners for the current round\n      console.log(`Non-winners for ${round}:`, nonWinners);\n    });\n\n    // Now you have a list of all winners in 'allWinners'\n    // And a list of all non-winners in 'allNonWinners'\n\n    // Log all non-winners\n    console.log('All non-winners:', allNonWinners);\n    return winnersByRound;\n  };\n  const findRoundWinners = combinedTimesByTeam => {\n    const roundWinners = [];\n    Object.keys(combinedTimesByTeam).forEach(teamId => {\n      const combinedTime = combinedTimesByTeam[teamId];\n\n      // Compare combined time with other teams in the round\n      const isWinner = Object.values(combinedTimesByTeam).every(otherCombinedTime => combinedTime <= otherCombinedTime);\n      if (isWinner) {\n        roundWinners.push({\n          teamId,\n          combinedTime\n        });\n      }\n    });\n    return roundWinners;\n  };\n  const handleLopetaClick = async () => {\n    try {\n      // Fetch and process times\n      const winnersByRound = findWinnersByRound();\n\n      // Get all non-winners\n      const allNonWinners = Object.values(winnersByRound).reduce((acc, roundData) => [...acc, ...roundData.nonWinners], []);\n\n      // Sort non-winners by combined time in ascending order\n      const sortedNonWinners = allNonWinners.sort((a, b) => a.combinedTime - b.combinedTime);\n\n      // Get the 6 best times from non-winners\n      const sixBestNonWinners = sortedNonWinners.slice(0, 6);\n\n      // Display or use the 6 best non-winners as needed\n      console.log('Six best non-winners:', sixBestNonWinners);\n\n      // Combine the winners and the 6 best non-winners to get the final list of 12 winners\n      const allWinners = Object.values(winnersByRound).reduce((acc, roundData) => [...acc, ...roundData.winners], []);\n      const finalWinnersList = [...allWinners, ...sixBestNonWinners];\n\n      // Display or use the final list of 12 winners as needed\n      console.log('Final Winners List:', finalWinnersList);\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","error","console","calculateCombinedTimesByRound","combinedTimesByRound","forEach","time","teamId","joukkue_id","round","era","aika","findWinnersByRound","winnersByRound","allWinners","allNonWinners","Object","keys","combinedTimesByTeam","roundWinners","findRoundWinners","push","nonWinners","filter","some","winner","map","combinedTime","log","isWinner","values","every","otherCombinedTime","handleLopetaClick","reduce","acc","roundData","sortedNonWinners","sort","a","b","sixBestNonWinners","slice","winners","finalWinnersList","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const calculateCombinedTimesByRound = () => {\r\n    const combinedTimesByRound = {};\r\n\r\n    times.forEach((time) => {\r\n      const teamId = time.joukkue_id;\r\n      const round = time.era;\r\n\r\n      // Calculate combined time for each team in each round\r\n      if (!combinedTimesByRound[round]) {\r\n        combinedTimesByRound[round] = {};\r\n      }\r\n\r\n      if (!combinedTimesByRound[round][teamId]) {\r\n        combinedTimesByRound[round][teamId] = 0;\r\n      }\r\n\r\n      combinedTimesByRound[round][teamId] += time.aika;\r\n    });\r\n\r\n    return combinedTimesByRound;\r\n  };\r\n\r\n  const findWinnersByRound = () => {\r\n    const combinedTimesByRound = calculateCombinedTimesByRound();\r\n    const winnersByRound = {};\r\n    const allWinners = []; // Keep track of all winners\r\n    const allNonWinners = []; // Keep track of all non-winners\r\n  \r\n    Object.keys(combinedTimesByRound).forEach((round) => {\r\n      const combinedTimesByTeam = combinedTimesByRound[round];\r\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\r\n  \r\n      // Add round winners to the list of all winners\r\n      allWinners.push(...roundWinners);\r\n  \r\n      // Store round winners\r\n      winnersByRound[round] = roundWinners;\r\n  \r\n      // Find non-winners for the current round\r\n      const nonWinners = Object.keys(combinedTimesByTeam)\r\n        .filter((teamId) => !roundWinners.some((winner) => winner.teamId === teamId))\r\n        .map((teamId) => ({ teamId, combinedTime: combinedTimesByTeam[teamId] }));\r\n  \r\n      // Add non-winners to the list of all non-winners\r\n      allNonWinners.push(...nonWinners);\r\n  \r\n      // Log non-winners for the current round\r\n      console.log(`Non-winners for ${round}:`, nonWinners);\r\n    });\r\n  \r\n    // Now you have a list of all winners in 'allWinners'\r\n    // And a list of all non-winners in 'allNonWinners'\r\n  \r\n    // Log all non-winners\r\n    console.log('All non-winners:', allNonWinners);\r\n  \r\n    return winnersByRound;\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  const findRoundWinners = (combinedTimesByTeam) => {\r\n    const roundWinners = [];\r\n    Object.keys(combinedTimesByTeam).forEach((teamId) => {\r\n      const combinedTime = combinedTimesByTeam[teamId];\r\n\r\n      // Compare combined time with other teams in the round\r\n      const isWinner = Object.values(combinedTimesByTeam).every(\r\n        (otherCombinedTime) => combinedTime <= otherCombinedTime\r\n      );\r\n\r\n      if (isWinner) {\r\n        roundWinners.push({ teamId, combinedTime });\r\n      }\r\n    });\r\n\r\n    return roundWinners;\r\n  };\r\n\r\n  const handleLopetaClick = async () => {\r\n    try {\r\n      // Fetch and process times\r\n      const winnersByRound = findWinnersByRound();\r\n  \r\n      // Get all non-winners\r\n      const allNonWinners = Object.values(winnersByRound).reduce(\r\n        (acc, roundData) => [...acc, ...roundData.nonWinners],\r\n        []\r\n      );\r\n  \r\n      // Sort non-winners by combined time in ascending order\r\n      const sortedNonWinners = allNonWinners.sort((a, b) => a.combinedTime - b.combinedTime);\r\n  \r\n      // Get the 6 best times from non-winners\r\n      const sixBestNonWinners = sortedNonWinners.slice(0, 6);\r\n  \r\n      // Display or use the 6 best non-winners as needed\r\n      console.log('Six best non-winners:', sixBestNonWinners);\r\n  \r\n      // Combine the winners and the 6 best non-winners to get the final list of 12 winners\r\n      const allWinners = Object.values(winnersByRound).reduce(\r\n        (acc, roundData) => [...acc, ...roundData.winners],\r\n        []\r\n      );\r\n  \r\n      const finalWinnersList = [...allWinners, ...sixBestNonWinners];\r\n  \r\n      // Display or use the final list of 12 winners as needed\r\n      console.log('Final Winners List:', finalWinnersList);\r\n    } catch (error) {\r\n      console.error('Error handling lopeta click:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}