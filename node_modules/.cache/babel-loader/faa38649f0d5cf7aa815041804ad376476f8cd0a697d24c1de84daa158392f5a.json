{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const calculateCombinedTimes = () => {\n    const combinedTimesByTeam = {};\n    times.forEach(time => {\n      const teamId = time.joukkue_id;\n\n      // Calculate combined time for each team\n      if (!combinedTimesByTeam[teamId]) {\n        combinedTimesByTeam[teamId] = 0;\n      }\n      combinedTimesByTeam[teamId] += time.aika;\n    });\n    return combinedTimesByTeam;\n  };\n  const findBestCombinedTimes = () => {\n    const combinedTimesByTeam = calculateCombinedTimes();\n    const bestCombinedTimes = {};\n    Object.keys(combinedTimesByTeam).forEach(teamId => {\n      const combinedTime = combinedTimesByTeam[teamId];\n\n      // Find the best combined time for each team\n      if (!bestCombinedTimes[teamId] || combinedTime < bestCombinedTimes[teamId]) {\n        bestCombinedTimes[teamId] = combinedTime;\n      }\n    });\n    return bestCombinedTimes;\n  };\n  const handleLopetaClick = async () => {\n    try {\n      const bestCombinedTimes = findBestCombinedTimes();\n      console.log('Best Combined Times by Team:', bestCombinedTimes);\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","error","console","calculateCombinedTimes","combinedTimesByTeam","forEach","time","teamId","joukkue_id","aika","findBestCombinedTimes","bestCombinedTimes","Object","keys","combinedTime","handleLopetaClick","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const calculateCombinedTimes = () => {\r\n    const combinedTimesByTeam = {};\r\n\r\n    times.forEach((time) => {\r\n      const teamId = time.joukkue_id;\r\n\r\n      // Calculate combined time for each team\r\n      if (!combinedTimesByTeam[teamId]) {\r\n        combinedTimesByTeam[teamId] = 0;\r\n      }\r\n      combinedTimesByTeam[teamId] += time.aika;\r\n    });\r\n\r\n    return combinedTimesByTeam;\r\n  };\r\n\r\n  const findBestCombinedTimes = () => {\r\n    const combinedTimesByTeam = calculateCombinedTimes();\r\n    const bestCombinedTimes = {};\r\n\r\n    Object.keys(combinedTimesByTeam).forEach((teamId) => {\r\n      const combinedTime = combinedTimesByTeam[teamId];\r\n\r\n      // Find the best combined time for each team\r\n      if (!bestCombinedTimes[teamId] || combinedTime < bestCombinedTimes[teamId]) {\r\n        bestCombinedTimes[teamId] = combinedTime;\r\n      }\r\n    });\r\n\r\n    return bestCombinedTimes;\r\n  };\r\n\r\n  const handleLopetaClick = async () => {\r\n    try {\r\n      const bestCombinedTimes = findBestCombinedTimes();\r\n\r\n      console.log('Best Combined Times by Team:', bestCombinedTimes);\r\n    } catch (error) {\r\n      console.error('Error handling lopeta click:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdQ,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;MACnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCP,QAAQ,CAACM,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAME,sBAAsB,GAAGA,CAAA,KAAM;IACnC,MAAMC,mBAAmB,GAAG,CAAC,CAAC;IAE9BZ,KAAK,CAACa,OAAO,CAAEC,IAAI,IAAK;MACtB,MAAMC,MAAM,GAAGD,IAAI,CAACE,UAAU;;MAE9B;MACA,IAAI,CAACJ,mBAAmB,CAACG,MAAM,CAAC,EAAE;QAChCH,mBAAmB,CAACG,MAAM,CAAC,GAAG,CAAC;MACjC;MACAH,mBAAmB,CAACG,MAAM,CAAC,IAAID,IAAI,CAACG,IAAI;IAC1C,CAAC,CAAC;IAEF,OAAOL,mBAAmB;EAC5B,CAAC;EAED,MAAMM,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMN,mBAAmB,GAAGD,sBAAsB,CAAC,CAAC;IACpD,MAAMQ,iBAAiB,GAAG,CAAC,CAAC;IAE5BC,MAAM,CAACC,IAAI,CAACT,mBAAmB,CAAC,CAACC,OAAO,CAAEE,MAAM,IAAK;MACnD,MAAMO,YAAY,GAAGV,mBAAmB,CAACG,MAAM,CAAC;;MAEhD;MACA,IAAI,CAACI,iBAAiB,CAACJ,MAAM,CAAC,IAAIO,YAAY,GAAGH,iBAAiB,CAACJ,MAAM,CAAC,EAAE;QAC1EI,iBAAiB,CAACJ,MAAM,CAAC,GAAGO,YAAY;MAC1C;IACF,CAAC,CAAC;IAEF,OAAOH,iBAAiB;EAC1B,CAAC;EAED,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMJ,iBAAiB,GAAGD,qBAAqB,CAAC,CAAC;MAEjDR,OAAO,CAACc,GAAG,CAAC,8BAA8B,EAAEL,iBAAiB,CAAC;IAChE,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED,oBACEb,OAAA;IAAA6B,QAAA,eACE7B,OAAA;MAAQ8B,OAAO,EAAEH,iBAAkB;MAAAE,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV,CAAC;AAAC/B,EAAA,CApEIF,cAAc;AAAAkC,EAAA,GAAdlC,cAAc;AAsEpB,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}