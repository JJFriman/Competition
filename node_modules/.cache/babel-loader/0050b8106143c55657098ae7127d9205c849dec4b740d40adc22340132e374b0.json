{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Er\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      const filteredTimes = data.filter(time => time.era.includes(eraName));\n      setTimes(filteredTimes);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const extractEraNumber = era => {\n    const match = era.match(/\\d+/);\n    return match ? parseInt(match[0], 10) : null;\n  };\n  const determineWinnersFromGroup = (allParticipants, group, winnersCount) => {\n    const sortedGroup = group.sort((a, b) => a.aika - b.aika);\n    const winners = [];\n    let currentRank = 1;\n    for (let i = 0; i < sortedGroup.length && winners.length < winnersCount; i++) {\n      const team = sortedGroup[i];\n      const nextTeam = sortedGroup[i + 1];\n      winners.push({\n        ...team,\n        rank: currentRank\n      });\n      if (nextTeam && nextTeam.aika !== team.aika) {\n        currentRank += 1;\n      }\n    }\n    const winningParticipants = winners.map(winner => winner.joukkue_id);\n    const nonWinners = allParticipants.filter(participant => !winningParticipants.includes(participant));\n    const additionalWinners = determineWinnersFromGroup(allParticipants, nonWinners, winnersCount - winners.length);\n    return [...winners, ...additionalWinners];\n  };\n  const determineWinners = (groupedTimes, additionalWinnersCount) => {\n    const allParticipants = Object.values(groupedTimes).flatMap(group => group.map(time => time.joukkue_id));\n    const firstPlaceWinners = {};\n    Object.keys(groupedTimes).forEach(eraNumber => {\n      const eraGroup = groupedTimes[eraNumber];\n      const winners = determineWinnersFromGroup(allParticipants, eraGroup, 1);\n      const firstPlaceWinner = winners.find(winner => winner.rank === 1);\n      if (firstPlaceWinner) {\n        firstPlaceWinners[eraNumber] = [firstPlaceWinner];\n      }\n    });\n    const additionalWinners = determineWinnersFromGroup(allParticipants, allParticipants, additionalWinnersCount);\n    return {\n      ...firstPlaceWinners,\n      additionalWinners\n    };\n  };\n  const allWinners = determineWinners(groupTimesByEraNumber(times), 6);\n  const handleLopetaEräClick = async () => {\n    await fetchTimes();\n    if (times && times.length > 0) {\n      alert(`Lopetit erän '${eraName}`);\n    } else {\n      alert('No times available.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaEräClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"All Winners\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(allWinners, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(EräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = EräLopetus;\nexport default EräLopetus;\nvar _c;\n$RefreshReg$(_c, \"Er\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","EräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","filteredTimes","filter","time","era","includes","error","console","extractEraNumber","match","parseInt","determineWinnersFromGroup","allParticipants","group","winnersCount","sortedGroup","sort","a","b","aika","winners","currentRank","i","length","team","nextTeam","push","rank","winningParticipants","map","winner","joukkue_id","nonWinners","participant","additionalWinners","determineWinners","groupedTimes","additionalWinnersCount","Object","values","flatMap","firstPlaceWinners","keys","forEach","eraNumber","eraGroup","firstPlaceWinner","find","allWinners","groupTimesByEraNumber","handleLopetaEräClick","alert","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/EräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst EräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      const filteredTimes = data.filter((time) => time.era.includes(eraName));\r\n      setTimes(filteredTimes);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const extractEraNumber = (era) => {\r\n    const match = era.match(/\\d+/);\r\n    return match ? parseInt(match[0], 10) : null;\r\n  };\r\n  \r\n\r\n  const determineWinnersFromGroup = (allParticipants, group, winnersCount) => {\r\n    const sortedGroup = group.sort((a, b) => a.aika - b.aika);\r\n\r\n    const winners = [];\r\n    let currentRank = 1;\r\n    for (let i = 0; i < sortedGroup.length && winners.length < winnersCount; i++) {\r\n      const team = sortedGroup[i];\r\n      const nextTeam = sortedGroup[i + 1];\r\n\r\n      winners.push({\r\n        ...team,\r\n        rank: currentRank,\r\n      });\r\n\r\n      if (nextTeam && nextTeam.aika !== team.aika) {\r\n        currentRank += 1;\r\n      }\r\n    }\r\n\r\n    const winningParticipants = winners.map((winner) => winner.joukkue_id);\r\n    const nonWinners = allParticipants.filter((participant) => !winningParticipants.includes(participant));\r\n\r\n    const additionalWinners = determineWinnersFromGroup(allParticipants, nonWinners, winnersCount - winners.length);\r\n\r\n    return [...winners, ...additionalWinners];\r\n  };\r\n\r\n  const determineWinners = (groupedTimes, additionalWinnersCount) => {\r\n    const allParticipants = Object.values(groupedTimes).flatMap((group) =>\r\n      group.map((time) => time.joukkue_id)\r\n    );\r\n\r\n    const firstPlaceWinners = {};\r\n    Object.keys(groupedTimes).forEach((eraNumber) => {\r\n      const eraGroup = groupedTimes[eraNumber];\r\n      const winners = determineWinnersFromGroup(allParticipants, eraGroup, 1);\r\n\r\n      const firstPlaceWinner = winners.find((winner) => winner.rank === 1);\r\n\r\n      if (firstPlaceWinner) {\r\n        firstPlaceWinners[eraNumber] = [firstPlaceWinner];\r\n      }\r\n    });\r\n\r\n    const additionalWinners = determineWinnersFromGroup(allParticipants, allParticipants, additionalWinnersCount);\r\n\r\n    return { ...firstPlaceWinners, additionalWinners };\r\n  };\r\n\r\n  const allWinners = determineWinners(groupTimesByEraNumber(times), 6);\r\n\r\n  const handleLopetaEräClick = async () => {\r\n    await fetchTimes();\r\n\r\n    if (times && times.length > 0) {\r\n      alert(`Lopetit erän '${eraName}`);\r\n    } else {\r\n      alert('No times available.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaEräClick}>Lopeta erä</button>\r\n      <div>\r\n        <h3>All Winners</h3>\r\n        <pre>{JSON.stringify(allWinners, null, 2)}</pre>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EräLopetus;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdQ,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;MACnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,MAAMC,aAAa,GAAGF,IAAI,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACf,OAAO,CAAC,CAAC;MACvEG,QAAQ,CAACQ,aAAa,CAAC;IACzB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAME,gBAAgB,GAAIJ,GAAG,IAAK;IAChC,MAAMK,KAAK,GAAGL,GAAG,CAACK,KAAK,CAAC,KAAK,CAAC;IAC9B,OAAOA,KAAK,GAAGC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI;EAC9C,CAAC;EAGD,MAAME,yBAAyB,GAAGA,CAACC,eAAe,EAAEC,KAAK,EAAEC,YAAY,KAAK;IAC1E,MAAMC,WAAW,GAAGF,KAAK,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,CAAC;IAEzD,MAAMC,OAAO,GAAG,EAAE;IAClB,IAAIC,WAAW,GAAG,CAAC;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,WAAW,CAACQ,MAAM,IAAIH,OAAO,CAACG,MAAM,GAAGT,YAAY,EAAEQ,CAAC,EAAE,EAAE;MAC5E,MAAME,IAAI,GAAGT,WAAW,CAACO,CAAC,CAAC;MAC3B,MAAMG,QAAQ,GAAGV,WAAW,CAACO,CAAC,GAAG,CAAC,CAAC;MAEnCF,OAAO,CAACM,IAAI,CAAC;QACX,GAAGF,IAAI;QACPG,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAII,QAAQ,IAAIA,QAAQ,CAACN,IAAI,KAAKK,IAAI,CAACL,IAAI,EAAE;QAC3CE,WAAW,IAAI,CAAC;MAClB;IACF;IAEA,MAAMO,mBAAmB,GAAGR,OAAO,CAACS,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,UAAU,CAAC;IACtE,MAAMC,UAAU,GAAGpB,eAAe,CAACV,MAAM,CAAE+B,WAAW,IAAK,CAACL,mBAAmB,CAACvB,QAAQ,CAAC4B,WAAW,CAAC,CAAC;IAEtG,MAAMC,iBAAiB,GAAGvB,yBAAyB,CAACC,eAAe,EAAEoB,UAAU,EAAElB,YAAY,GAAGM,OAAO,CAACG,MAAM,CAAC;IAE/G,OAAO,CAAC,GAAGH,OAAO,EAAE,GAAGc,iBAAiB,CAAC;EAC3C,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAACC,YAAY,EAAEC,sBAAsB,KAAK;IACjE,MAAMzB,eAAe,GAAG0B,MAAM,CAACC,MAAM,CAACH,YAAY,CAAC,CAACI,OAAO,CAAE3B,KAAK,IAChEA,KAAK,CAACgB,GAAG,CAAE1B,IAAI,IAAKA,IAAI,CAAC4B,UAAU,CACrC,CAAC;IAED,MAAMU,iBAAiB,GAAG,CAAC,CAAC;IAC5BH,MAAM,CAACI,IAAI,CAACN,YAAY,CAAC,CAACO,OAAO,CAAEC,SAAS,IAAK;MAC/C,MAAMC,QAAQ,GAAGT,YAAY,CAACQ,SAAS,CAAC;MACxC,MAAMxB,OAAO,GAAGT,yBAAyB,CAACC,eAAe,EAAEiC,QAAQ,EAAE,CAAC,CAAC;MAEvE,MAAMC,gBAAgB,GAAG1B,OAAO,CAAC2B,IAAI,CAAEjB,MAAM,IAAKA,MAAM,CAACH,IAAI,KAAK,CAAC,CAAC;MAEpE,IAAImB,gBAAgB,EAAE;QACpBL,iBAAiB,CAACG,SAAS,CAAC,GAAG,CAACE,gBAAgB,CAAC;MACnD;IACF,CAAC,CAAC;IAEF,MAAMZ,iBAAiB,GAAGvB,yBAAyB,CAACC,eAAe,EAAEA,eAAe,EAAEyB,sBAAsB,CAAC;IAE7G,OAAO;MAAE,GAAGI,iBAAiB;MAAEP;IAAkB,CAAC;EACpD,CAAC;EAED,MAAMc,UAAU,GAAGb,gBAAgB,CAACc,qBAAqB,CAACzD,KAAK,CAAC,EAAE,CAAC,CAAC;EAEpE,MAAM0D,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,MAAMxD,UAAU,CAAC,CAAC;IAElB,IAAIF,KAAK,IAAIA,KAAK,CAAC+B,MAAM,GAAG,CAAC,EAAE;MAC7B4B,KAAK,CAAE,iBAAgB7D,OAAQ,EAAC,CAAC;IACnC,CAAC,MAAM;MACL6D,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAED,oBACE/D,OAAA;IAAAgE,QAAA,gBACEhE,OAAA;MAAQiE,OAAO,EAAEH,oBAAqB;MAAAE,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1DrE,OAAA;MAAAgE,QAAA,gBACEhE,OAAA;QAAAgE,QAAA,EAAI;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBrE,OAAA;QAAAgE,QAAA,EAAMM,IAAI,CAACC,SAAS,CAACX,UAAU,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClE,EAAA,CAlGIF,UAAU;AAAAuE,EAAA,GAAVvE,UAAU;AAoGhB,eAAeA,UAAU;AAAC,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}