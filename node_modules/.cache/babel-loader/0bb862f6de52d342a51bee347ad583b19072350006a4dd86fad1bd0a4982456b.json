{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AjastinKello.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst AjastinKello = ({\n  teamId,\n  task,\n  era,\n  max\n}) => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const intervalIdRef = React.useRef(null);\n  useEffect(() => {\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    socket.emit('timerUpdate', {\n      teamId,\n      era,\n      taskName: task.tehtävä_nimi,\n      isRunning\n    });\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, teamId, era, task.tehtävä_nimi]);\n  const startTimer = () => {\n    setIsRunning(true);\n  };\n  const stopTimer = () => {\n    console.log('teamId:', teamId);\n    setIsRunning(false);\n    const finishedTime = elapsedTime;\n    socket.emit('finishedTime', {\n      teamId,\n      era,\n      taskName: task.tehtävä_nimi,\n      finishedTime\n    });\n    postToMySQL(era, task.tehtävä_nimi, teamId, finishedTime);\n  };\n  const resetTimer = () => {\n    setElapsedTime(0);\n    clearInterval(intervalIdRef.current);\n    setIsRunning(false);\n  };\n  const formatTime = timeInMilliseconds => {\n    const minutes = Math.floor(timeInMilliseconds / (60 * 1000));\n    const seconds = Math.floor(timeInMilliseconds % (60 * 1000) / 1000);\n    const milliseconds = Math.floor(timeInMilliseconds % 1000 / 10);\n    return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}:${milliseconds < 10 ? '0' : ''}${milliseconds}`;\n  };\n  const postToMySQL = async (era, tehtava, teamId, finishedTime) => {\n    const selectedGroup = localStorage.getItem('selectedGroup');\n    if (selectedGroup) {\n      try {\n        const parsedData = JSON.parse(selectedGroup);\n        console.log('teamId:', teamId);\n        const response = await fetch('http://localhost:3001/api/aikataulu', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            era: parsedData.groupInfo,\n            tehtava,\n            joukkueId: teamId,\n            aika: finishedTime\n          })\n        });\n        if (!response.ok) {\n          console.error('Failed to send finished time to aikataulu:', response.status);\n        }\n      } catch (error) {\n        console.error('Error sending finished time to aikataulu:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: task.tehtävä_nimi\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startTimer,\n        disabled: isRunning,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopTimer,\n        disabled: !isRunning,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTimer,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(AjastinKello, \"nnGTbcYB9CEf/jGK8ShcSV5Iqq0=\");\n_c = AjastinKello;\nexport default AjastinKello;\nvar _c;\n$RefreshReg$(_c, \"AjastinKello\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","AjastinKello","teamId","task","era","max","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","intervalIdRef","useRef","clearInterval","current","intervalId","setInterval","prevElapsedTime","emit","taskName","tehtävä_nimi","startTimer","stopTimer","console","log","finishedTime","postToMySQL","resetTimer","formatTime","timeInMilliseconds","minutes","Math","floor","seconds","milliseconds","tehtava","selectedGroup","localStorage","getItem","parsedData","JSON","parse","response","fetch","method","headers","body","stringify","groupInfo","joukkueId","aika","ok","error","status","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AjastinKello.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst AjastinKello = ({ teamId, task, era, max }) => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const intervalIdRef = React.useRef(null);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    socket.emit('timerUpdate', {\r\n      teamId,\r\n      era,\r\n      taskName: task.tehtävä_nimi,\r\n      isRunning,\r\n    });\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, teamId, era, task.tehtävä_nimi]);\r\n\r\n  const startTimer = () => {\r\n    setIsRunning(true);\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    console.log('teamId:', teamId);\r\n    setIsRunning(false);\r\n    const finishedTime = elapsedTime;\r\n    socket.emit('finishedTime', {\r\n      teamId,\r\n      era,\r\n      taskName: task.tehtävä_nimi,\r\n      finishedTime,\r\n    });\r\n    postToMySQL(era, task.tehtävä_nimi,teamId,  finishedTime);\r\n  };\r\n  \r\n\r\n  const resetTimer = () => {\r\n    setElapsedTime(0);\r\n    clearInterval(intervalIdRef.current);\r\n    setIsRunning(false);\r\n  };\r\n  \r\n\r\n  const formatTime = (timeInMilliseconds) => {\r\n    const minutes = Math.floor(timeInMilliseconds / (60 * 1000));\r\n    const seconds = Math.floor((timeInMilliseconds % (60 * 1000)) / 1000);\r\n    const milliseconds = Math.floor((timeInMilliseconds % 1000) / 10);\r\n\r\n    return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}:${milliseconds < 10 ? '0' : ''}${milliseconds}`;\r\n  };\r\n\r\n  const postToMySQL = async (era, tehtava,teamId, finishedTime) => {\r\n    const selectedGroup = localStorage.getItem('selectedGroup');\r\n  \r\n    if (selectedGroup) {\r\n      try {\r\n        const parsedData = JSON.parse(selectedGroup);\r\n        console.log('teamId:', teamId);\r\n        const response = await fetch('http://localhost:3001/api/aikataulu', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            era: parsedData.groupInfo,\r\n            tehtava,\r\n            joukkueId: teamId,\r\n            aika: finishedTime,\r\n          }),\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          console.error('Failed to send finished time to aikataulu:', response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error sending finished time to aikataulu:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h3>{task.tehtävä_nimi}</h3>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div className=\"controls\">\r\n        <button onClick={startTimer} disabled={isRunning}>\r\n          Start\r\n        </button>\r\n        <button onClick={stopTimer} disabled={!isRunning}>\r\n          Stop\r\n        </button>\r\n        <button onClick={resetTimer}>Reset</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AjastinKello;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMI,YAAY,GAAGA,CAAC;EAAEC,MAAM;EAAEC,IAAI;EAAEC,GAAG;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMgB,aAAa,GAAGjB,KAAK,CAACkB,MAAM,CAAC,IAAI,CAAC;EAExChB,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXiB,aAAa,CAACF,aAAa,CAACG,OAAO,CAAC;IACtC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENlB,SAAS,CAAC,MAAM;IACd,IAAIa,SAAS,EAAE;MACb,MAAMM,UAAU,GAAGC,WAAW,CAAC,MAAM;QACnCR,cAAc,CAAES,eAAe,IAAKA,eAAe,GAAG,CAAC,CAAC;MAC1D,CAAC,EAAE,EAAE,CAAC;MAENN,aAAa,CAACG,OAAO,GAAGC,UAAU;IACpC,CAAC,MAAM;MACLF,aAAa,CAACF,aAAa,CAACG,OAAO,CAAC;IACtC;IAEAd,MAAM,CAACkB,IAAI,CAAC,aAAa,EAAE;MACzBhB,MAAM;MACNE,GAAG;MACHe,QAAQ,EAAEhB,IAAI,CAACiB,YAAY;MAC3BX;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXI,aAAa,CAACF,aAAa,CAACG,OAAO,CAAC;IACtC,CAAC;EACH,CAAC,EAAE,CAACL,SAAS,EAAEP,MAAM,EAAEE,GAAG,EAAED,IAAI,CAACiB,YAAY,CAAC,CAAC;EAE/C,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBX,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMY,SAAS,GAAGA,CAAA,KAAM;IACtBC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEtB,MAAM,CAAC;IAC9BQ,YAAY,CAAC,KAAK,CAAC;IACnB,MAAMe,YAAY,GAAGlB,WAAW;IAChCP,MAAM,CAACkB,IAAI,CAAC,cAAc,EAAE;MAC1BhB,MAAM;MACNE,GAAG;MACHe,QAAQ,EAAEhB,IAAI,CAACiB,YAAY;MAC3BK;IACF,CAAC,CAAC;IACFC,WAAW,CAACtB,GAAG,EAAED,IAAI,CAACiB,YAAY,EAAClB,MAAM,EAAGuB,YAAY,CAAC;EAC3D,CAAC;EAGD,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvBnB,cAAc,CAAC,CAAC,CAAC;IACjBK,aAAa,CAACF,aAAa,CAACG,OAAO,CAAC;IACpCJ,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAGD,MAAMkB,UAAU,GAAIC,kBAAkB,IAAK;IACzC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,kBAAkB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;IAC5D,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,kBAAkB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAI,IAAI,CAAC;IACrE,MAAMK,YAAY,GAAGH,IAAI,CAACC,KAAK,CAAEH,kBAAkB,GAAG,IAAI,GAAI,EAAE,CAAC;IAEjE,OAAQ,GAAEC,OAAO,GAAG,EAAE,GAAG,GAAG,GAAG,EAAG,GAAEA,OAAQ,IAAGG,OAAO,GAAG,EAAE,GAAG,GAAG,GAAG,EAAG,GAAEA,OAAQ,IAAGC,YAAY,GAAG,EAAE,GAAG,GAAG,GAAG,EAAG,GAAEA,YAAa,EAAC;EACnI,CAAC;EAED,MAAMR,WAAW,GAAG,MAAAA,CAAOtB,GAAG,EAAE+B,OAAO,EAACjC,MAAM,EAAEuB,YAAY,KAAK;IAC/D,MAAMW,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAE3D,IAAIF,aAAa,EAAE;MACjB,IAAI;QACF,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;QAC5Cb,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEtB,MAAM,CAAC;QAC9B,MAAMwC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;UAClEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEN,IAAI,CAACO,SAAS,CAAC;YACnB3C,GAAG,EAAEmC,UAAU,CAACS,SAAS;YACzBb,OAAO;YACPc,SAAS,EAAE/C,MAAM;YACjBgD,IAAI,EAAEzB;UACR,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACiB,QAAQ,CAACS,EAAE,EAAE;UAChB5B,OAAO,CAAC6B,KAAK,CAAC,4CAA4C,EAAEV,QAAQ,CAACW,MAAM,CAAC;QAC9E;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACd7B,OAAO,CAAC6B,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE;IACF;EACF,CAAC;EAKD,oBACErD,OAAA;IAAAuD,QAAA,gBACEvD,OAAA;MAAAuD,QAAA,EAAKnD,IAAI,CAACiB;IAAY;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC5B3D,OAAA;MAAK4D,SAAS,EAAC,OAAO;MAAAL,QAAA,eACpBvD,OAAA;QAAAuD,QAAA,EAAO1B,UAAU,CAACrB,WAAW,GAAG,EAAE;MAAC;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACN3D,OAAA;MAAK4D,SAAS,EAAC,UAAU;MAAAL,QAAA,gBACvBvD,OAAA;QAAQ6D,OAAO,EAAEvC,UAAW;QAACwC,QAAQ,EAAEpD,SAAU;QAAA6C,QAAA,EAAC;MAElD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT3D,OAAA;QAAQ6D,OAAO,EAAEtC,SAAU;QAACuC,QAAQ,EAAE,CAACpD,SAAU;QAAA6C,QAAA,EAAC;MAElD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT3D,OAAA;QAAQ6D,OAAO,EAAEjC,UAAW;QAAA2B,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpD,EAAA,CApHIL,YAAY;AAAA6D,EAAA,GAAZ7D,YAAY;AAsHlB,eAAeA,YAAY;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}