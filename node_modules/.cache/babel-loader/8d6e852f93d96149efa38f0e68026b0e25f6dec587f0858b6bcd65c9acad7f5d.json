{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [teams, setTeams] = useState([]);\n  useEffect(() => {\n    fetchTeams();\n  }, []);\n  const fetchTeams = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch teams');\n      }\n      const data = await response.json();\n      setTeams(data);\n    } catch (error) {\n      console.error('Error fetching teams:', error);\n    }\n  };\n  const sortTeamsIntoEras = () => {\n    // Assuming each team has an 'era' property, adjust this based on your data structure\n    const teamsByEra = teams.reduce((acc, team) => {\n      const era = team.era; // Adjust this based on your data structure\n      acc[era] = acc[era] || [];\n      acc[era].push(team);\n      return acc;\n    }, {});\n    return teamsByEra;\n  };\n  const findWinners = teams => {\n    const winners = [];\n    teams.forEach(team => {\n      const combinedTime = team.combinedTime; // Adjust this based on your data structure\n      const isWinner = teams.every(otherTeam => combinedTime <= otherTeam.combinedTime);\n      if (isWinner) {\n        winners.push(team);\n      }\n    });\n    return winners;\n  };\n  const handleLopetaClick = async () => {\n    try {\n      // Step 1: Get all teams\n      await fetchTeams();\n\n      // Step 2: Sort teams into eras\n      const teamsByEra = sortTeamsIntoEras();\n\n      // Step 3: Get winners for each era\n      const allWinners = [];\n      Object.values(teamsByEra).forEach(eraTeams => {\n        const eraWinners = findWinners(eraTeams);\n        allWinners.push(...eraWinners);\n      });\n\n      // Step 4: Remove winners from all the teams\n      const allNonWinners = teams.filter(team => !allWinners.includes(team));\n\n      // Step 5: Get 6 more winners from all the teams\n      const sixMoreWinners = findWinners(allNonWinners).slice(0, 6);\n\n      // Step 6: Remove the new winners from all the teams and add them to winners\n      const finalWinnersList = [...allWinners, ...sixMoreWinners];\n      const remainingNonWinners = allNonWinners.filter(team => !finalWinnersList.includes(team));\n\n      // Step 7: Log Winners and Non-winners\n      console.log('All Winners:', finalWinnersList);\n      console.log('All Non-Winners:', remainingNonWinners);\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"nt+I693XwTdNiKlXHWfWa22BjIk=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","teams","setTeams","fetchTeams","response","fetch","ok","Error","data","json","error","console","sortTeamsIntoEras","teamsByEra","reduce","acc","team","era","push","findWinners","winners","forEach","combinedTime","isWinner","every","otherTeam","handleLopetaClick","allWinners","Object","values","eraTeams","eraWinners","allNonWinners","filter","includes","sixMoreWinners","slice","finalWinnersList","remainingNonWinners","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [teams, setTeams] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTeams();\r\n  }, []);\r\n\r\n  const fetchTeams = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch teams');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTeams(data);\r\n    } catch (error) {\r\n      console.error('Error fetching teams:', error);\r\n    }\r\n  };\r\n\r\n  const sortTeamsIntoEras = () => {\r\n    // Assuming each team has an 'era' property, adjust this based on your data structure\r\n    const teamsByEra = teams.reduce((acc, team) => {\r\n      const era = team.era; // Adjust this based on your data structure\r\n      acc[era] = acc[era] || [];\r\n      acc[era].push(team);\r\n      return acc;\r\n    }, {});\r\n\r\n    return teamsByEra;\r\n  };\r\n\r\n  const findWinners = (teams) => {\r\n    const winners = [];\r\n    teams.forEach((team) => {\r\n      const combinedTime = team.combinedTime; // Adjust this based on your data structure\r\n      const isWinner = teams.every((otherTeam) => combinedTime <= otherTeam.combinedTime);\r\n      if (isWinner) {\r\n        winners.push(team);\r\n      }\r\n    });\r\n    return winners;\r\n  };\r\n\r\n  const handleLopetaClick = async () => {\r\n    try {\r\n      // Step 1: Get all teams\r\n      await fetchTeams();\r\n\r\n      // Step 2: Sort teams into eras\r\n      const teamsByEra = sortTeamsIntoEras();\r\n\r\n      // Step 3: Get winners for each era\r\n      const allWinners = [];\r\n      Object.values(teamsByEra).forEach((eraTeams) => {\r\n        const eraWinners = findWinners(eraTeams);\r\n        allWinners.push(...eraWinners);\r\n      });\r\n\r\n      // Step 4: Remove winners from all the teams\r\n      const allNonWinners = teams.filter((team) => !allWinners.includes(team));\r\n\r\n      // Step 5: Get 6 more winners from all the teams\r\n      const sixMoreWinners = findWinners(allNonWinners).slice(0, 6);\r\n\r\n      // Step 6: Remove the new winners from all the teams and add them to winners\r\n      const finalWinnersList = [...allWinners, ...sixMoreWinners];\r\n      const remainingNonWinners = allNonWinners.filter((team) => !finalWinnersList.includes(team));\r\n\r\n      // Step 7: Log Winners and Non-winners\r\n      console.log('All Winners:', finalWinnersList);\r\n      console.log('All Non-Winners:', remainingNonWinners);\r\n    } catch (error) {\r\n      console.error('Error handling lopeta click:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}