{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Er\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      const filteredTimes = data.filter(time => time.era.includes(eraName));\n      setTimes(filteredTimes);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const extractEraNumber = era => {\n    const match = era.match(/\\d+/);\n    return match ? parseInt(match[0], 10) : null;\n  };\n  const groupTimesByEraNumber = times => {\n    const groupedTimes = {};\n    times.forEach(time => {\n      const eraNumber = extractEraNumber(time.era);\n      if (eraNumber !== null) {\n        if (!groupedTimes[eraNumber]) {\n          groupedTimes[eraNumber] = [];\n        }\n        groupedTimes[eraNumber].push(time);\n      }\n    });\n    return groupedTimes;\n  };\n  const determineWinners = (groupedTimes, additionalWinnersCount) => {\n    const allParticipants = Object.values(groupedTimes).flatMap(group => group.map(time => time.joukkue_id));\n    const firstPlaceWinners = {};\n    Object.keys(groupedTimes).forEach(eraNumber => {\n      const eraGroup = groupedTimes[eraNumber];\n      const winners = determineWinnersFromGroup(eraGroup, 1);\n      const firstPlaceWinner = winners.find(winner => winner.rank === 1);\n      if (firstPlaceWinner) {\n        firstPlaceWinners[eraNumber] = [firstPlaceWinner];\n      }\n    });\n    const additionalWinners = determineWinnersFromGroup(allParticipants, additionalWinnersCount);\n    return {\n      ...firstPlaceWinners,\n      additionalWinners\n    };\n  };\n  const determineWinnersFromGroup = (group, winnersCount) => {\n    const sortedGroup = group.sort((a, b) => a.aika - b.aika);\n    const winners = [];\n    let currentRank = 1;\n    for (let i = 0; i < sortedGroup.length && winners.length < winnersCount; i++) {\n      const team = sortedGroup[i];\n      const nextTeam = sortedGroup[i + 1];\n      winners.push({\n        ...team,\n        rank: currentRank\n      });\n      if (nextTeam && nextTeam.aika !== team.aika) {\n        currentRank += 1;\n      }\n    }\n    return winners;\n  };\n\n  // Usage example\n  const groupedTimes = groupTimesByEraNumber(times);\n  const allWinners = determineWinners(groupedTimes, 6);\n  console.log(allWinners);\n  const handleLopetaEräClick = async () => {\n    await fetchTimes();\n    if (times && times.length > 0) {\n      alert(`Lopetit erän '${eraName}`);\n    } else {\n      alert('No times available.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaEräClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(EräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = EräLopetus;\nexport default EräLopetus;\nvar _c;\n$RefreshReg$(_c, \"Er\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","EräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","filteredTimes","filter","time","era","includes","error","console","extractEraNumber","match","parseInt","groupTimesByEraNumber","groupedTimes","forEach","eraNumber","push","determineWinners","additionalWinnersCount","allParticipants","Object","values","flatMap","group","map","joukkue_id","firstPlaceWinners","keys","eraGroup","winners","determineWinnersFromGroup","firstPlaceWinner","find","winner","rank","additionalWinners","winnersCount","sortedGroup","sort","a","b","aika","currentRank","i","length","team","nextTeam","allWinners","log","handleLopetaEräClick","alert","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/EräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst EräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      const filteredTimes = data.filter(time => time.era.includes(eraName));\r\n      setTimes(filteredTimes);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const extractEraNumber = (era) => {\r\n    const match = era.match(/\\d+/);\r\n    return match ? parseInt(match[0], 10) : null;\r\n  };\r\n\r\n  \r\n  const groupTimesByEraNumber = (times) => {\r\n    const groupedTimes = {};\r\n    times.forEach((time) => {\r\n      const eraNumber = extractEraNumber(time.era);\r\n      if (eraNumber !== null) {\r\n        if (!groupedTimes[eraNumber]) {\r\n          groupedTimes[eraNumber] = [];\r\n        }\r\n        groupedTimes[eraNumber].push(time);\r\n      }\r\n    });\r\n    return groupedTimes;\r\n  };\r\n\r\n  const determineWinners = (groupedTimes, additionalWinnersCount) => {\r\n    const allParticipants = Object.values(groupedTimes).flatMap((group) =>\r\n      group.map((time) => time.joukkue_id)\r\n    );\r\n  \r\n    const firstPlaceWinners = {};\r\n    Object.keys(groupedTimes).forEach((eraNumber) => {\r\n      const eraGroup = groupedTimes[eraNumber];\r\n      const winners = determineWinnersFromGroup(eraGroup, 1);\r\n  \r\n      const firstPlaceWinner = winners.find((winner) => winner.rank === 1);\r\n  \r\n      if (firstPlaceWinner) {\r\n        firstPlaceWinners[eraNumber] = [firstPlaceWinner];\r\n      }\r\n    });\r\n  \r\n    const additionalWinners = determineWinnersFromGroup(allParticipants, additionalWinnersCount);\r\n  \r\n    return { ...firstPlaceWinners, additionalWinners };\r\n  };\r\n  \r\n  const determineWinnersFromGroup = (group, winnersCount) => {\r\n    const sortedGroup = group.sort((a, b) => a.aika - b.aika);\r\n  \r\n    const winners = [];\r\n    let currentRank = 1;\r\n    for (let i = 0; i < sortedGroup.length && winners.length < winnersCount; i++) {\r\n      const team = sortedGroup[i];\r\n      const nextTeam = sortedGroup[i + 1];\r\n  \r\n      winners.push({\r\n        ...team,\r\n        rank: currentRank,\r\n      });\r\n  \r\n      if (nextTeam && nextTeam.aika !== team.aika) {\r\n        currentRank += 1;\r\n      }\r\n    }\r\n  \r\n    return winners;\r\n  };\r\n  \r\n  // Usage example\r\n  const groupedTimes = groupTimesByEraNumber(times);\r\n  const allWinners = determineWinners(groupedTimes, 6);\r\n  console.log(allWinners);\r\n  \r\n\r\n  const handleLopetaEräClick = async () => {\r\n    await fetchTimes();\r\n\r\n    if (times && times.length > 0) {\r\n      alert(`Lopetit erän '${eraName}`);\r\n    } else {\r\n      alert('No times available.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaEräClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EräLopetus;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdQ,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;MACnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,MAAMC,aAAa,GAAGF,IAAI,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACf,OAAO,CAAC,CAAC;MACrEG,QAAQ,CAACQ,aAAa,CAAC;IACzB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAME,gBAAgB,GAAIJ,GAAG,IAAK;IAChC,MAAMK,KAAK,GAAGL,GAAG,CAACK,KAAK,CAAC,KAAK,CAAC;IAC9B,OAAOA,KAAK,GAAGC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI;EAC9C,CAAC;EAGD,MAAME,qBAAqB,GAAInB,KAAK,IAAK;IACvC,MAAMoB,YAAY,GAAG,CAAC,CAAC;IACvBpB,KAAK,CAACqB,OAAO,CAAEV,IAAI,IAAK;MACtB,MAAMW,SAAS,GAAGN,gBAAgB,CAACL,IAAI,CAACC,GAAG,CAAC;MAC5C,IAAIU,SAAS,KAAK,IAAI,EAAE;QACtB,IAAI,CAACF,YAAY,CAACE,SAAS,CAAC,EAAE;UAC5BF,YAAY,CAACE,SAAS,CAAC,GAAG,EAAE;QAC9B;QACAF,YAAY,CAACE,SAAS,CAAC,CAACC,IAAI,CAACZ,IAAI,CAAC;MACpC;IACF,CAAC,CAAC;IACF,OAAOS,YAAY;EACrB,CAAC;EAED,MAAMI,gBAAgB,GAAGA,CAACJ,YAAY,EAAEK,sBAAsB,KAAK;IACjE,MAAMC,eAAe,GAAGC,MAAM,CAACC,MAAM,CAACR,YAAY,CAAC,CAACS,OAAO,CAAEC,KAAK,IAChEA,KAAK,CAACC,GAAG,CAAEpB,IAAI,IAAKA,IAAI,CAACqB,UAAU,CACrC,CAAC;IAED,MAAMC,iBAAiB,GAAG,CAAC,CAAC;IAC5BN,MAAM,CAACO,IAAI,CAACd,YAAY,CAAC,CAACC,OAAO,CAAEC,SAAS,IAAK;MAC/C,MAAMa,QAAQ,GAAGf,YAAY,CAACE,SAAS,CAAC;MACxC,MAAMc,OAAO,GAAGC,yBAAyB,CAACF,QAAQ,EAAE,CAAC,CAAC;MAEtD,MAAMG,gBAAgB,GAAGF,OAAO,CAACG,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,KAAK,CAAC,CAAC;MAEpE,IAAIH,gBAAgB,EAAE;QACpBL,iBAAiB,CAACX,SAAS,CAAC,GAAG,CAACgB,gBAAgB,CAAC;MACnD;IACF,CAAC,CAAC;IAEF,MAAMI,iBAAiB,GAAGL,yBAAyB,CAACX,eAAe,EAAED,sBAAsB,CAAC;IAE5F,OAAO;MAAE,GAAGQ,iBAAiB;MAAES;IAAkB,CAAC;EACpD,CAAC;EAED,MAAML,yBAAyB,GAAGA,CAACP,KAAK,EAAEa,YAAY,KAAK;IACzD,MAAMC,WAAW,GAAGd,KAAK,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,CAAC;IAEzD,MAAMZ,OAAO,GAAG,EAAE;IAClB,IAAIa,WAAW,GAAG,CAAC;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,WAAW,CAACO,MAAM,IAAIf,OAAO,CAACe,MAAM,GAAGR,YAAY,EAAEO,CAAC,EAAE,EAAE;MAC5E,MAAME,IAAI,GAAGR,WAAW,CAACM,CAAC,CAAC;MAC3B,MAAMG,QAAQ,GAAGT,WAAW,CAACM,CAAC,GAAG,CAAC,CAAC;MAEnCd,OAAO,CAACb,IAAI,CAAC;QACX,GAAG6B,IAAI;QACPX,IAAI,EAAEQ;MACR,CAAC,CAAC;MAEF,IAAII,QAAQ,IAAIA,QAAQ,CAACL,IAAI,KAAKI,IAAI,CAACJ,IAAI,EAAE;QAC3CC,WAAW,IAAI,CAAC;MAClB;IACF;IAEA,OAAOb,OAAO;EAChB,CAAC;;EAED;EACA,MAAMhB,YAAY,GAAGD,qBAAqB,CAACnB,KAAK,CAAC;EACjD,MAAMsD,UAAU,GAAG9B,gBAAgB,CAACJ,YAAY,EAAE,CAAC,CAAC;EACpDL,OAAO,CAACwC,GAAG,CAACD,UAAU,CAAC;EAGvB,MAAME,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,MAAMtD,UAAU,CAAC,CAAC;IAElB,IAAIF,KAAK,IAAIA,KAAK,CAACmD,MAAM,GAAG,CAAC,EAAE;MAC7BM,KAAK,CAAE,iBAAgB3D,OAAQ,EAAC,CAAC;IACnC,CAAC,MAAM;MACL2D,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAED,oBACE7D,OAAA;IAAA8D,QAAA,eACE9D,OAAA;MAAQ+D,OAAO,EAAEH,oBAAqB;MAAAE,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAAChE,EAAA,CA3GIF,UAAU;AAAAmE,EAAA,GAAVnE,UAAU;AA6GhB,eAAeA,UAAU;AAAC,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}