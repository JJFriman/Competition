{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const groupTimesByEra = (times, eraName) => {\n    const filteredTimes = times.filter(time => time.era.includes(eraName));\n    const groupedTimes = {};\n    filteredTimes.forEach(time => {\n      const eraNumber = time.era.match(/\\d+/);\n      if (eraNumber) {\n        const key = `Era ${eraNumber[0]}`;\n        if (!groupedTimes[key]) {\n          groupedTimes[key] = [];\n        }\n        groupedTimes[key].push(time);\n      }\n    });\n    return groupedTimes;\n  };\n  const handleLopetaClick = async () => {\n    try {\n      await fetchTimes();\n      if (times && times.length > 0) {\n        const groupedByEra = groupTimesByEra(times, 'Alkuerä');\n        console.log('Grouped by era:', groupedByEra);\n\n        // Determine the winner for each group\n        const winners = {};\n        Object.keys(groupedByEra).forEach(eraKey => {\n          const group = groupedByEra[eraKey];\n          // Assuming there is a property called 'time' in each time object\n          const winner = findWinner(group);\n          winners[eraKey] = winner;\n        });\n        console.log('Winners:', winners);\n\n        // Create a new list excluding the winners\n        const nonWinners = [];\n        Object.keys(groupedByEra).forEach(eraKey => {\n          const group = groupedByEra[eraKey];\n          const winner = findWinner(group);\n          const nonWinnerGroup = group.filter(time => !isSameTime(time, winner));\n          nonWinners.push(...nonWinnerGroup);\n        });\n        console.log('Non-winners:', nonWinners);\n        const sortedNonWinners = nonWinners.sort((a, b) => a.aika - b.aika);\n        const sixBestNonWinners = sortedNonWinners.slice(0, 6);\n        console.log('Six best non-winners:', sixBestNonWinners);\n        const combinedWinners = Object.values(winners).concat(sixBestNonWinners);\n        console.log('Combined winners:', combinedWinners);\n      } else {\n        alert('No times available.');\n      }\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n    }\n  };\n  const isSameTime = (time1, time2) => {\n    return time1.aika === time2.aika;\n  };\n  const findWinner = group => {\n    return group.reduce((winner, current) => {\n      return Number(current.aika) < Number(winner.aika) ? current : winner;\n    });\n  };\n  console.log(times);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","error","console","groupTimesByEra","filteredTimes","filter","time","era","includes","groupedTimes","forEach","eraNumber","match","key","push","handleLopetaClick","length","groupedByEra","log","winners","Object","keys","eraKey","group","winner","findWinner","nonWinners","nonWinnerGroup","isSameTime","sortedNonWinners","sort","a","b","aika","sixBestNonWinners","slice","combinedWinners","values","concat","alert","time1","time2","reduce","current","Number","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const groupTimesByEra = (times, eraName) => {\r\n    const filteredTimes = times.filter((time) => time.era.includes(eraName));\r\n  \r\n    const groupedTimes = {};\r\n    filteredTimes.forEach((time) => {\r\n      const eraNumber = time.era.match(/\\d+/);\r\n      if (eraNumber) {\r\n        const key = `Era ${eraNumber[0]}`;\r\n        if (!groupedTimes[key]) {\r\n          groupedTimes[key] = [];\r\n        }\r\n        groupedTimes[key].push(time);\r\n      }\r\n    });\r\n  \r\n    return groupedTimes;\r\n  };\r\n  \r\n\r\n  const handleLopetaClick = async () => {\r\n    try {\r\n      await fetchTimes();\r\n  \r\n      if (times && times.length > 0) {\r\n        const groupedByEra = groupTimesByEra(times, 'Alkuerä');\r\n        console.log('Grouped by era:', groupedByEra);\r\n  \r\n        // Determine the winner for each group\r\n        const winners = {};\r\n        Object.keys(groupedByEra).forEach((eraKey) => {\r\n          const group = groupedByEra[eraKey];\r\n          // Assuming there is a property called 'time' in each time object\r\n          const winner = findWinner(group);\r\n          winners[eraKey] = winner;\r\n        });\r\n  \r\n        console.log('Winners:', winners);\r\n  \r\n        // Create a new list excluding the winners\r\n        const nonWinners = [];\r\n        Object.keys(groupedByEra).forEach((eraKey) => {\r\n          const group = groupedByEra[eraKey];\r\n          const winner = findWinner(group);\r\n          const nonWinnerGroup = group.filter((time) => !isSameTime(time, winner));\r\n          nonWinners.push(...nonWinnerGroup);\r\n        });\r\n  \r\n        console.log('Non-winners:', nonWinners);\r\n  \r\n        const sortedNonWinners = nonWinners.sort((a, b) => a.aika - b.aika);\r\n        const sixBestNonWinners = sortedNonWinners.slice(0, 6);\r\n  \r\n        console.log('Six best non-winners:', sixBestNonWinners);\r\n  \r\n        const combinedWinners = Object.values(winners).concat(sixBestNonWinners);\r\n  \r\n        console.log('Combined winners:', combinedWinners);\r\n      } else {\r\n        alert('No times available.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling lopeta click:', error);\r\n    }\r\n  };\r\n  \r\n  const isSameTime = (time1, time2) => {\r\n    return time1.aika === time2.aika;\r\n  };\r\n  \r\n  const findWinner = (group) => {\r\n    return group.reduce((winner, current) => {\r\n      return Number(current.aika) < Number(winner.aika) ? current : winner;\r\n    });\r\n  };\r\n  \r\n  \r\n  \r\n  \r\nconsole.log(times)\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}