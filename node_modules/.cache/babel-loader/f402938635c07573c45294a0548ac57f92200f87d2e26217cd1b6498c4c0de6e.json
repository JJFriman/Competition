{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Er\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      const filteredTimes = data.filter(time => time.era.includes(eraName));\n      setTimes(filteredTimes);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const extractEraNumber = era => {\n    const match = era.match(/\\d+/);\n    return match ? parseInt(match[0], 10) : null;\n  };\n  const determineWinners = group => {\n    // Sort the group based on the aika values\n    const sortedGroup = group.sort((a, b) => a.aika - b.aika);\n\n    // Determine winners\n    const winners = [];\n    let currentRank = 1;\n    for (let i = 0; i < sortedGroup.length; i++) {\n      const team = sortedGroup[i];\n      const nextTeam = sortedGroup[i + 1];\n      winners.push({\n        ...team,\n        rank: currentRank\n      });\n      if (nextTeam && nextTeam.aika !== team.aika) {\n        currentRank += 1;\n      }\n    }\n    return winners;\n  };\n  const groupTimesByEraNumber = times => {\n    const groupedTimes = {};\n    times.forEach(time => {\n      const eraNumber = extractEraNumber(time.era);\n      if (eraNumber !== null) {\n        if (!groupedTimes[eraNumber]) {\n          groupedTimes[eraNumber] = [];\n        }\n        groupedTimes[eraNumber].push(time);\n      }\n    });\n    return groupedTimes;\n  };\n  const determineFirstPlaceWinners = times => {\n    const groupedTimes = groupTimesByEraNumber(times);\n    const firstPlaceWinners = {};\n    Object.keys(groupedTimes).forEach(eraNumber => {\n      const eraGroup = groupedTimes[eraNumber];\n      const winners = determineWinners(eraGroup);\n      const firstPlaceWinner = winners.find(winner => winner.rank === 1);\n      if (firstPlaceWinner) {\n        firstPlaceWinners[eraNumber] = [firstPlaceWinner];\n      }\n    });\n    return firstPlaceWinners;\n  };\n  const firstPlaceWinners = determineFirstPlaceWinners(times);\n  console.log(firstPlaceWinners);\n  const determineAdditionalWinners = (times, firstPlaceWinners) => {\n    const groupedTimes = groupTimesByEraNumber(times);\n\n    // Determine additional winners for each era\n    const additionalWinners = {};\n    Object.keys(groupedTimes).forEach(eraNumber => {\n      const eraGroup = groupedTimes[eraNumber];\n      const remainingTeams = eraGroup.filter(team => !firstPlaceWinners[eraNumber].some(winner => winner.joukkue_id === team.joukkue_id));\n      const winners = determineWinners(remainingTeams);\n\n      // Include additional winners (excluding first-place winner)\n      const additionalWinnersList = winners.slice(1); // Exclude the first-place winner\n\n      if (additionalWinnersList.length > 0) {\n        additionalWinners[eraNumber] = additionalWinnersList;\n      }\n    });\n    return additionalWinners;\n  };\n  const additionalWinners = determineAdditionalWinners(times, firstPlaceWinners);\n  console.log(additionalWinners);\n  const handleLopetaEräClick = async () => {\n    await fetchTimes();\n    if (times && times.length > 0) {\n      alert(`Lopetit erän '${eraName}`);\n    } else {\n      alert('No times available.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaEräClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(EräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = EräLopetus;\nexport default EräLopetus;\nvar _c;\n$RefreshReg$(_c, \"Er\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","EräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","filteredTimes","filter","time","era","includes","error","console","extractEraNumber","match","parseInt","determineWinners","group","sortedGroup","sort","a","b","aika","winners","currentRank","i","length","team","nextTeam","push","rank","groupTimesByEraNumber","groupedTimes","forEach","eraNumber","determineFirstPlaceWinners","firstPlaceWinners","Object","keys","eraGroup","firstPlaceWinner","find","winner","log","determineAdditionalWinners","additionalWinners","remainingTeams","some","joukkue_id","additionalWinnersList","slice","handleLopetaEräClick","alert","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/EräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst EräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      const filteredTimes = data.filter(time => time.era.includes(eraName));\r\n      setTimes(filteredTimes);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const extractEraNumber = (era) => {\r\n    const match = era.match(/\\d+/);\r\n    return match ? parseInt(match[0], 10) : null;\r\n  };\r\n  \r\n  const determineWinners = (group) => {\r\n    // Sort the group based on the aika values\r\n    const sortedGroup = group.sort((a, b) => a.aika - b.aika);\r\n  \r\n    // Determine winners\r\n    const winners = [];\r\n    let currentRank = 1;\r\n    for (let i = 0; i < sortedGroup.length; i++) {\r\n      const team = sortedGroup[i];\r\n      const nextTeam = sortedGroup[i + 1];\r\n  \r\n      winners.push({\r\n        ...team,\r\n        rank: currentRank,\r\n      });\r\n  \r\n      if (nextTeam && nextTeam.aika !== team.aika) {\r\n        currentRank += 1;\r\n      }\r\n    }\r\n  \r\n    return winners;\r\n  };\r\n  \r\n  const groupTimesByEraNumber = (times) => {\r\n    const groupedTimes = {};\r\n    times.forEach((time) => {\r\n      const eraNumber = extractEraNumber(time.era);\r\n      if (eraNumber !== null) {\r\n        if (!groupedTimes[eraNumber]) {\r\n          groupedTimes[eraNumber] = [];\r\n        }\r\n        groupedTimes[eraNumber].push(time);\r\n      }\r\n    });\r\n    return groupedTimes;\r\n  };\r\n  \r\n  const determineFirstPlaceWinners = (times) => {\r\n    const groupedTimes = groupTimesByEraNumber(times);\r\n  \r\n    const firstPlaceWinners = {};\r\n    Object.keys(groupedTimes).forEach((eraNumber) => {\r\n      const eraGroup = groupedTimes[eraNumber];\r\n      const winners = determineWinners(eraGroup);\r\n  \r\n      const firstPlaceWinner = winners.find((winner) => winner.rank === 1);\r\n  \r\n      if (firstPlaceWinner) {\r\n        firstPlaceWinners[eraNumber] = [firstPlaceWinner];\r\n      }\r\n    });\r\n  \r\n    return firstPlaceWinners;\r\n  };\r\n  \r\n  const firstPlaceWinners = determineFirstPlaceWinners(times);\r\n  console.log(firstPlaceWinners);\r\n\r\n  const determineAdditionalWinners = (times, firstPlaceWinners) => {\r\n    const groupedTimes = groupTimesByEraNumber(times);\r\n  \r\n    // Determine additional winners for each era\r\n    const additionalWinners = {};\r\n    Object.keys(groupedTimes).forEach((eraNumber) => {\r\n      const eraGroup = groupedTimes[eraNumber];\r\n  \r\n\r\n      const remainingTeams = eraGroup.filter(\r\n        (team) => !firstPlaceWinners[eraNumber].some((winner) => winner.joukkue_id === team.joukkue_id)\r\n      );\r\n  \r\n      const winners = determineWinners(remainingTeams);\r\n  \r\n      // Include additional winners (excluding first-place winner)\r\n      const additionalWinnersList = winners.slice(1); // Exclude the first-place winner\r\n  \r\n      if (additionalWinnersList.length > 0) {\r\n        additionalWinners[eraNumber] = additionalWinnersList;\r\n      }\r\n    });\r\n  \r\n    return additionalWinners;\r\n  };\r\n  \r\n  const additionalWinners = determineAdditionalWinners(times, firstPlaceWinners);\r\n  console.log(additionalWinners);\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n  const handleLopetaEräClick = async () => {\r\n    await fetchTimes();\r\n\r\n    if (times && times.length > 0) {\r\n      alert(`Lopetit erän '${eraName}`);\r\n    } else {\r\n      alert('No times available.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaEräClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EräLopetus;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdQ,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;MACnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,MAAMC,aAAa,GAAGF,IAAI,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACf,OAAO,CAAC,CAAC;MACrEG,QAAQ,CAACQ,aAAa,CAAC;IACzB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAME,gBAAgB,GAAIJ,GAAG,IAAK;IAChC,MAAMK,KAAK,GAAGL,GAAG,CAACK,KAAK,CAAC,KAAK,CAAC;IAC9B,OAAOA,KAAK,GAAGC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI;EAC9C,CAAC;EAED,MAAME,gBAAgB,GAAIC,KAAK,IAAK;IAClC;IACA,MAAMC,WAAW,GAAGD,KAAK,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,CAAC;;IAEzD;IACA,MAAMC,OAAO,GAAG,EAAE;IAClB,IAAIC,WAAW,GAAG,CAAC;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,WAAW,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3C,MAAME,IAAI,GAAGT,WAAW,CAACO,CAAC,CAAC;MAC3B,MAAMG,QAAQ,GAAGV,WAAW,CAACO,CAAC,GAAG,CAAC,CAAC;MAEnCF,OAAO,CAACM,IAAI,CAAC;QACX,GAAGF,IAAI;QACPG,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAII,QAAQ,IAAIA,QAAQ,CAACN,IAAI,KAAKK,IAAI,CAACL,IAAI,EAAE;QAC3CE,WAAW,IAAI,CAAC;MAClB;IACF;IAEA,OAAOD,OAAO;EAChB,CAAC;EAED,MAAMQ,qBAAqB,GAAIlC,KAAK,IAAK;IACvC,MAAMmC,YAAY,GAAG,CAAC,CAAC;IACvBnC,KAAK,CAACoC,OAAO,CAAEzB,IAAI,IAAK;MACtB,MAAM0B,SAAS,GAAGrB,gBAAgB,CAACL,IAAI,CAACC,GAAG,CAAC;MAC5C,IAAIyB,SAAS,KAAK,IAAI,EAAE;QACtB,IAAI,CAACF,YAAY,CAACE,SAAS,CAAC,EAAE;UAC5BF,YAAY,CAACE,SAAS,CAAC,GAAG,EAAE;QAC9B;QACAF,YAAY,CAACE,SAAS,CAAC,CAACL,IAAI,CAACrB,IAAI,CAAC;MACpC;IACF,CAAC,CAAC;IACF,OAAOwB,YAAY;EACrB,CAAC;EAED,MAAMG,0BAA0B,GAAItC,KAAK,IAAK;IAC5C,MAAMmC,YAAY,GAAGD,qBAAqB,CAAClC,KAAK,CAAC;IAEjD,MAAMuC,iBAAiB,GAAG,CAAC,CAAC;IAC5BC,MAAM,CAACC,IAAI,CAACN,YAAY,CAAC,CAACC,OAAO,CAAEC,SAAS,IAAK;MAC/C,MAAMK,QAAQ,GAAGP,YAAY,CAACE,SAAS,CAAC;MACxC,MAAMX,OAAO,GAAGP,gBAAgB,CAACuB,QAAQ,CAAC;MAE1C,MAAMC,gBAAgB,GAAGjB,OAAO,CAACkB,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACZ,IAAI,KAAK,CAAC,CAAC;MAEpE,IAAIU,gBAAgB,EAAE;QACpBJ,iBAAiB,CAACF,SAAS,CAAC,GAAG,CAACM,gBAAgB,CAAC;MACnD;IACF,CAAC,CAAC;IAEF,OAAOJ,iBAAiB;EAC1B,CAAC;EAED,MAAMA,iBAAiB,GAAGD,0BAA0B,CAACtC,KAAK,CAAC;EAC3De,OAAO,CAAC+B,GAAG,CAACP,iBAAiB,CAAC;EAE9B,MAAMQ,0BAA0B,GAAGA,CAAC/C,KAAK,EAAEuC,iBAAiB,KAAK;IAC/D,MAAMJ,YAAY,GAAGD,qBAAqB,CAAClC,KAAK,CAAC;;IAEjD;IACA,MAAMgD,iBAAiB,GAAG,CAAC,CAAC;IAC5BR,MAAM,CAACC,IAAI,CAACN,YAAY,CAAC,CAACC,OAAO,CAAEC,SAAS,IAAK;MAC/C,MAAMK,QAAQ,GAAGP,YAAY,CAACE,SAAS,CAAC;MAGxC,MAAMY,cAAc,GAAGP,QAAQ,CAAChC,MAAM,CACnCoB,IAAI,IAAK,CAACS,iBAAiB,CAACF,SAAS,CAAC,CAACa,IAAI,CAAEL,MAAM,IAAKA,MAAM,CAACM,UAAU,KAAKrB,IAAI,CAACqB,UAAU,CAChG,CAAC;MAED,MAAMzB,OAAO,GAAGP,gBAAgB,CAAC8B,cAAc,CAAC;;MAEhD;MACA,MAAMG,qBAAqB,GAAG1B,OAAO,CAAC2B,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEhD,IAAID,qBAAqB,CAACvB,MAAM,GAAG,CAAC,EAAE;QACpCmB,iBAAiB,CAACX,SAAS,CAAC,GAAGe,qBAAqB;MACtD;IACF,CAAC,CAAC;IAEF,OAAOJ,iBAAiB;EAC1B,CAAC;EAED,MAAMA,iBAAiB,GAAGD,0BAA0B,CAAC/C,KAAK,EAAEuC,iBAAiB,CAAC;EAC9ExB,OAAO,CAAC+B,GAAG,CAACE,iBAAiB,CAAC;EAS9B,MAAMM,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,MAAMpD,UAAU,CAAC,CAAC;IAElB,IAAIF,KAAK,IAAIA,KAAK,CAAC6B,MAAM,GAAG,CAAC,EAAE;MAC7B0B,KAAK,CAAE,iBAAgBzD,OAAQ,EAAC,CAAC;IACnC,CAAC,MAAM;MACLyD,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAED,oBACE3D,OAAA;IAAA4D,QAAA,eACE5D,OAAA;MAAQ6D,OAAO,EAAEH,oBAAqB;MAAAE,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAAC9D,EAAA,CAzIIF,UAAU;AAAAiE,EAAA,GAAVjE,UAAU;AA2IhB,eAAeA,UAAU;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}