{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const calculateCombinedTimesByRound = () => {\n    const combinedTimesByRound = {};\n    times.forEach(time => {\n      const teamId = time.joukkue_id;\n      const round = time.era;\n      if (!combinedTimesByRound[round]) {\n        combinedTimesByRound[round] = {};\n      }\n      if (!combinedTimesByRound[round][teamId]) {\n        combinedTimesByRound[round][teamId] = 0;\n      }\n      combinedTimesByRound[round][teamId] += time.aika;\n    });\n    return combinedTimesByRound;\n  };\n  const findWinnersAndNonWinnersByRound = () => {\n    const combinedTimesByRound = calculateCombinedTimesByRound();\n    const winnersByRound = {};\n    const allWinners = [];\n    let allNonWinners = [];\n    Object.keys(combinedTimesByRound).forEach(round => {\n      const combinedTimesByTeam = combinedTimesByRound[round];\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\n      allWinners.push(...roundWinners);\n      winnersByRound[round] = roundWinners;\n      const nonWinners = Object.keys(combinedTimesByTeam).filter(teamId => !roundWinners.some(winner => winner.teamId === teamId)).map(teamId => ({\n        teamId,\n        combinedTime: combinedTimesByTeam[teamId],\n        round\n      }));\n      allNonWinners.push(...nonWinners);\n    });\n    allNonWinners.sort((a, b) => a.combinedTime - b.combinedTime);\n    return {\n      winnersByRound,\n      allNonWinners\n    };\n  };\n  const findRoundWinners = combinedTimesByTeam => {\n    const roundWinners = [];\n    Object.keys(combinedTimesByTeam).forEach(teamId => {\n      const combinedTime = combinedTimesByTeam[teamId];\n      const isWinner = Object.values(combinedTimesByTeam).every(otherCombinedTime => combinedTime <= otherCombinedTime);\n      if (isWinner) {\n        roundWinners.push({\n          teamId,\n          combinedTime\n        });\n      }\n    });\n    return roundWinners;\n  };\n  const handleLopetaClick = async () => {\n    try {\n      const {\n        winnersByRound,\n        allNonWinners\n      } = findWinnersAndNonWinnersByRound();\n\n      // Update joukkueet with unique values for semifinalist\n      const updateWinnersPromises = winnersByRound.flatMap(async winner => {\n        const {\n          joukkueId,\n          combinedTime\n        } = winner;\n        const uniqueSemifinalist = await data.generateUniqueSemifinalist();\n        const updatedFields = {\n          semifinalist: uniqueSemifinalist\n        };\n        await data.updateJoukkue(joukkueId, updatedFields);\n        return {\n          joukkueId,\n          success: true\n        };\n      });\n\n      // Update joukkueet with unique values for kerailyera\n      const updateNonWinnersPromises = allNonWinners.flatMap(async nonWinner => {\n        const {\n          teamId,\n          combinedTime\n        } = nonWinner;\n        const uniqueKerailyEra = await data.generateUniqueKerailyEra();\n        const updatedFields = {\n          kerailyera: uniqueKerailyEra\n        };\n        await data.updateJoukkue(teamId, updatedFields);\n        return {\n          teamId,\n          success: true\n        };\n      });\n\n      // Wait for all updates to complete\n      const updateWinnersResults = await Promise.all(updateWinnersPromises);\n      const updateNonWinnersResults = await Promise.all(updateNonWinnersPromises);\n      console.log('Winners updated successfully:', updateWinnersResults);\n      console.log('Non-winners updated successfully:', updateNonWinnersResults);\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n      // Handle error as needed\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","error","console","calculateCombinedTimesByRound","combinedTimesByRound","forEach","time","teamId","joukkue_id","round","era","aika","findWinnersAndNonWinnersByRound","winnersByRound","allWinners","allNonWinners","Object","keys","combinedTimesByTeam","roundWinners","findRoundWinners","push","nonWinners","filter","some","winner","map","combinedTime","sort","a","b","isWinner","values","every","otherCombinedTime","handleLopetaClick","updateWinnersPromises","flatMap","joukkueId","uniqueSemifinalist","generateUniqueSemifinalist","updatedFields","semifinalist","updateJoukkue","success","updateNonWinnersPromises","nonWinner","uniqueKerailyEra","generateUniqueKerailyEra","kerailyera","updateWinnersResults","Promise","all","updateNonWinnersResults","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  const calculateCombinedTimesByRound = () => {\r\n    const combinedTimesByRound = {};\r\n\r\n    times.forEach((time) => {\r\n      const teamId = time.joukkue_id;\r\n      const round = time.era;\r\n\r\n      if (!combinedTimesByRound[round]) {\r\n        combinedTimesByRound[round] = {};\r\n      }\r\n\r\n      if (!combinedTimesByRound[round][teamId]) {\r\n        combinedTimesByRound[round][teamId] = 0;\r\n      }\r\n\r\n      combinedTimesByRound[round][teamId] += time.aika;\r\n    });\r\n\r\n    return combinedTimesByRound;\r\n  };\r\n\r\n  const findWinnersAndNonWinnersByRound = () => {\r\n    const combinedTimesByRound = calculateCombinedTimesByRound();\r\n    const winnersByRound = {};\r\n    const allWinners = [];\r\n    let allNonWinners = [];\r\n  \r\n    Object.keys(combinedTimesByRound).forEach((round) => {\r\n      const combinedTimesByTeam = combinedTimesByRound[round];\r\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\r\n\r\n      allWinners.push(...roundWinners);\r\n  \r\n      winnersByRound[round] = roundWinners;\r\n  \r\n      const nonWinners = Object.keys(combinedTimesByTeam)\r\n        .filter((teamId) => !roundWinners.some((winner) => winner.teamId === teamId))\r\n        .map((teamId) => ({ teamId, combinedTime: combinedTimesByTeam[teamId], round }));\r\n  \r\n      allNonWinners.push(...nonWinners);\r\n    });\r\n  \r\n    allNonWinners.sort((a, b) => a.combinedTime - b.combinedTime);\r\n  \r\n    return { winnersByRound, allNonWinners };\r\n  };\r\n\r\n  \r\n\r\n  const findRoundWinners = (combinedTimesByTeam) => {\r\n    const roundWinners = [];\r\n    Object.keys(combinedTimesByTeam).forEach((teamId) => {\r\n      const combinedTime = combinedTimesByTeam[teamId];\r\n\r\n      const isWinner = Object.values(combinedTimesByTeam).every(\r\n        (otherCombinedTime) => combinedTime <= otherCombinedTime\r\n      );\r\n\r\n      if (isWinner) {\r\n        roundWinners.push({ teamId, combinedTime });\r\n      }\r\n    });\r\n\r\n    return roundWinners;\r\n  };\r\n\r\n\r\n\r\n  const handleLopetaClick = async () => {\r\n    try {\r\n      const { winnersByRound, allNonWinners } = findWinnersAndNonWinnersByRound();\r\n\r\n      // Update joukkueet with unique values for semifinalist\r\n      const updateWinnersPromises = winnersByRound.flatMap(async (winner) => {\r\n        const { joukkueId, combinedTime } = winner;\r\n        const uniqueSemifinalist = await data.generateUniqueSemifinalist();\r\n        const updatedFields = { semifinalist: uniqueSemifinalist };\r\n        await data.updateJoukkue(joukkueId, updatedFields);\r\n        return { joukkueId, success: true };\r\n      });\r\n\r\n      // Update joukkueet with unique values for kerailyera\r\n      const updateNonWinnersPromises = allNonWinners.flatMap(async (nonWinner) => {\r\n        const { teamId, combinedTime } = nonWinner;\r\n        const uniqueKerailyEra = await data.generateUniqueKerailyEra();\r\n        const updatedFields = { kerailyera: uniqueKerailyEra };\r\n        await data.updateJoukkue(teamId, updatedFields);\r\n        return { teamId, success: true };\r\n      });\r\n\r\n      // Wait for all updates to complete\r\n      const updateWinnersResults = await Promise.all(updateWinnersPromises);\r\n      const updateNonWinnersResults = await Promise.all(updateNonWinnersPromises);\r\n\r\n      console.log('Winners updated successfully:', updateWinnersResults);\r\n      console.log('Non-winners updated successfully:', updateNonWinnersResults);\r\n    } catch (error) {\r\n      console.error('Error handling lopeta click:', error);\r\n      // Handle error as needed\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}