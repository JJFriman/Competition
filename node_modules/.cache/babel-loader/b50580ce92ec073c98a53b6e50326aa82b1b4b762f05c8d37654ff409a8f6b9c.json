{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport useGroupData from './UseGroupData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({});\n  const [lapCount, setLapCount] = useState({});\n  const intervalIdRef = useRef(null);\n  const {\n    selectedGroup\n  } = useGroupData();\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      console.log('Received lap timer event:', lapTimerData);\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n      const previousLapsTotalTime = Array.isArray(laps[teamId]) ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0) : 0;\n      const existingLapIndex = Array.isArray(laps[teamId]) ? laps[teamId].findIndex(lap => lap.taskName === taskName) : -1;\n      let lapTime;\n      if (existingLapIndex !== -1) {\n        lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\n        console.log(`Team: ${teamId}, Task: ${taskName}, Updated Lap Time: ${lapTime} milliseconds`);\n      } else {\n        lapTime = elapsedTime * 10 - previousLapsTotalTime;\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\n      }\n      setLapCount(prevLapCount => ({\n        ...prevLapCount,\n        [teamId]: (prevLapCount[teamId] || 0) + 1\n      }));\n      setLaps(prevLaps => {\n        const updatedLaps = {\n          ...prevLaps\n        };\n        if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\n          return prevLaps;\n        }\n        const currentLapCount = prevLaps[teamId] ? prevLaps[teamId].length : 0;\n        if (existingLapIndex !== -1) {\n          updatedLaps[teamId][existingLapIndex] = {\n            taskName,\n            lapTime\n          };\n        } else {\n          updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n            taskName,\n            lapTime\n          }];\n        }\n        if (currentLapCount + 1 === 3) {\n          const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n          console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n        }\n        return updatedLaps;\n      });\n    };\n    socket.on('timerStart', startTimerHandler);\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime, lapCount, laps]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    const teamLaps = laps[teamId] || [];\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n    return combinedTime;\n  };\n\n  // Render the teams from selectedGroup\n  const renderTeams = () => {\n    if (!selectedGroup || !selectedGroup.teams) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No teams available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 14\n      }, this);\n    }\n    return selectedGroup.teams.map(team => {\n      var _laps$team$joukkue_id, _laps$team$joukkue_id2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Team: \", team.joukkue_nimi]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [(_laps$team$joukkue_id = laps[team.joukkue_id]) === null || _laps$team$joukkue_id === void 0 ? void 0 : _laps$team$joukkue_id.map((lap, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n          }, `${team.joukkue_id}-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)), ((_laps$team$joukkue_id2 = laps[team.joukkue_id]) === null || _laps$team$joukkue_id2 === void 0 ? void 0 : _laps$team$joukkue_id2.length) === 3 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Combined Time: \", formatTime(getCombinedTime(team.joukkue_id))]\n          }, `${team.joukkue_id}-combined`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this)]\n      }, team.joukkue_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }, this);\n    });\n  };\n\n  // useEffect to check if all teams have completed their laps\n  useEffect(() => {\n    var _selectedGroup$teams;\n    // Check if all laps are completed\n    const allLapsCompleted = selectedGroup === null || selectedGroup === void 0 ? void 0 : (_selectedGroup$teams = selectedGroup.teams) === null || _selectedGroup$teams === void 0 ? void 0 : _selectedGroup$teams.every(team => {\n      const teamLaps = laps[team.joukkue_id] || [];\n      return teamLaps.length === 3; // Assuming each team needs to complete 3 laps\n    });\n\n    if (allLapsCompleted) {\n      // Stop the timer\n      setIsRunning(false);\n    }\n  }, [selectedGroup, laps]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-times-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Maximum Time for Each Task:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Task: \", task.teht채v채_nimi, \", Maximum Time: \", formatTime(task.max_aika * 1000)]\n        }, task.teht채v채_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), renderTeams()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"NpUzDrt8x2bXyTk/sKjUtU1wvsE=\", false, function () {\n  return [useGroupData];\n});\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","useGroupData","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","selectedGroup","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","console","log","lapTimerHandler","lapTimerData","teamId","taskName","error","previousLapsTotalTime","Array","isArray","reduce","totalTime","lap","lapTime","existingLapIndex","findIndex","prevLapCount","prevLaps","updatedLaps","length","currentLapCount","combinedTime","on","off","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","teamLaps","renderTeams","teams","children","fileName","_jsxFileName","lineNumber","columnNumber","map","team","_laps$team$joukkue_id","_laps$team$joukkue_id2","joukkue_nimi","joukkue_id","index","formatTime","_selectedGroup$teams","allLapsCompleted","every","className","selectedTasks","task","teht채v채_nimi","max_aika","teht채v채_id","_c","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport useGroupData from './UseGroupData';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({});\r\n  const [lapCount, setLapCount] = useState({});\r\n  const intervalIdRef = useRef(null);\r\n  const { selectedGroup } = useGroupData();\r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\n    const lapTimerHandler = (lapTimerData) => {\r\n      console.log('Received lap timer event:', lapTimerData);\r\n\r\n      const { teamId, taskName } = lapTimerData;\r\n\r\n      if (!startTime) {\r\n        console.error('Error: startTime is not set.');\r\n        return;\r\n      }\r\n\r\n      const previousLapsTotalTime = Array.isArray(laps[teamId])\r\n        ? laps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0)\r\n        : 0;\r\n\r\n      const existingLapIndex = Array.isArray(laps[teamId])\r\n        ? laps[teamId].findIndex((lap) => lap.taskName === taskName)\r\n        : -1;\r\n\r\n      let lapTime;\r\n\r\n      if (existingLapIndex !== -1) {\r\n        lapTime = elapsedTime * 10 - previousLapsTotalTime + laps[teamId][existingLapIndex].lapTime;\r\n        console.log(`Team: ${teamId}, Task: ${taskName}, Updated Lap Time: ${lapTime} milliseconds`);\r\n      } else {\r\n        lapTime = elapsedTime * 10 - previousLapsTotalTime;\r\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\r\n      }\r\n\r\n      setLapCount((prevLapCount) => ({\r\n        ...prevLapCount,\r\n        [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n      }));\r\n\r\n      setLaps((prevLaps) => {\r\n        const updatedLaps = { ...prevLaps };\r\n\r\n        if (prevLaps[teamId] && prevLaps[teamId].length >= 3) {\r\n          return prevLaps;\r\n        }\r\n\r\n        const currentLapCount = prevLaps[teamId] ? prevLaps[teamId].length : 0;\r\n\r\n        if (existingLapIndex !== -1) {\r\n          updatedLaps[teamId][existingLapIndex] = { taskName, lapTime };\r\n        } else {\r\n          updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n        }\r\n\r\n        if (currentLapCount + 1 === 3) {\r\n          const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n          console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n        }\r\n\r\n        return updatedLaps;\r\n      });\r\n    };\r\n\r\n    socket.on('timerStart', startTimerHandler);\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime, lapCount, laps]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  const getCombinedTime = (teamId) => {\r\n    const teamLaps = laps[teamId] || [];\r\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n    return combinedTime;\r\n  };\r\n\r\n  // Render the teams from selectedGroup\r\n  const renderTeams = () => {\r\n    if (!selectedGroup || !selectedGroup.teams) {\r\n      return <p>No teams available.</p>;\r\n    }\r\n  \r\n    return selectedGroup.teams.map((team) => (\r\n      <div key={team.joukkue_id}>\r\n        <h4>Team: {team.joukkue_nimi}</h4>\r\n        <ul>\r\n          {laps[team.joukkue_id]?.map((lap, index) => (\r\n            <li key={`${team.joukkue_id}-${index}`}>\r\n              Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n            </li>\r\n          ))}\r\n          {laps[team.joukkue_id]?.length === 3 && (\r\n            <li key={`${team.joukkue_id}-combined`}>\r\n              Combined Time: {formatTime(getCombinedTime(team.joukkue_id))}\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    ));\r\n  };\r\n  \r\n\r\n// useEffect to check if all teams have completed their laps\r\nuseEffect(() => {\r\n    // Check if all laps are completed\r\n    const allLapsCompleted = selectedGroup?.teams?.every((team) => {\r\n      const teamLaps = laps[team.joukkue_id] || [];\r\n      return teamLaps.length === 3; // Assuming each team needs to complete 3 laps\r\n    });\r\n  \r\n    if (allLapsCompleted) {\r\n      // Stop the timer\r\n      setIsRunning(false);\r\n    }\r\n  }, [selectedGroup, laps]);\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"max-times-container\">\r\n        <h4>Maximum Time for Each Task:</h4>\r\n        <ul>\r\n          {selectedGroup?.selectedTasks.map((task) => (\r\n            <li key={task.teht채v채_id}>\r\n              Task: {task.teht채v채_nimi}, Maximum Time: {formatTime(task.max_aika * 1000)}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        {renderTeams()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMK,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAMoB,aAAa,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAClC,MAAM;IAAEmB;EAAc,CAAC,GAAGjB,YAAY,CAAC,CAAC;EAExCH,SAAS,CAAC,MAAM;IACd,MAAMqB,iBAAiB,GAAIC,IAAI,IAAK;MAClC,MAAMC,eAAe,GAAGD,IAAI,CAACE,SAAS;MACtC,MAAMC,cAAc,GAAGC,MAAM,CAACC,WAAW,CAACC,GAAG,CAAC,CAAC;MAC/C,MAAMC,YAAY,GAAGJ,cAAc,GAAGF,eAAe;MAErD,MAAMO,iBAAiB,GAAGP,eAAe,GAAGM,YAAY;MAExDE,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,iBAAiB,CAAC;MAE9DhB,YAAY,CAACgB,iBAAiB,CAAC;MAC/BlB,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC;IAED,MAAMqB,eAAe,GAAIC,YAAY,IAAK;MACxCH,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEE,YAAY,CAAC;MAEtD,MAAM;QAAEC,MAAM;QAAEC;MAAS,CAAC,GAAGF,YAAY;MAEzC,IAAI,CAACrB,SAAS,EAAE;QACdkB,OAAO,CAACM,KAAK,CAAC,8BAA8B,CAAC;QAC7C;MACF;MAEA,MAAMC,qBAAqB,GAAGC,KAAK,CAACC,OAAO,CAACzB,IAAI,CAACoB,MAAM,CAAC,CAAC,GACrDpB,IAAI,CAACoB,MAAM,CAAC,CAACM,MAAM,CAAC,CAACC,SAAS,EAAEC,GAAG,KAAKD,SAAS,GAAGC,GAAG,CAACC,OAAO,EAAE,CAAC,CAAC,GACnE,CAAC;MAEL,MAAMC,gBAAgB,GAAGN,KAAK,CAACC,OAAO,CAACzB,IAAI,CAACoB,MAAM,CAAC,CAAC,GAChDpB,IAAI,CAACoB,MAAM,CAAC,CAACW,SAAS,CAAEH,GAAG,IAAKA,GAAG,CAACP,QAAQ,KAAKA,QAAQ,CAAC,GAC1D,CAAC,CAAC;MAEN,IAAIQ,OAAO;MAEX,IAAIC,gBAAgB,KAAK,CAAC,CAAC,EAAE;QAC3BD,OAAO,GAAGnC,WAAW,GAAG,EAAE,GAAG6B,qBAAqB,GAAGvB,IAAI,CAACoB,MAAM,CAAC,CAACU,gBAAgB,CAAC,CAACD,OAAO;QAC3Fb,OAAO,CAACC,GAAG,CAAE,SAAQG,MAAO,WAAUC,QAAS,uBAAsBQ,OAAQ,eAAc,CAAC;MAC9F,CAAC,MAAM;QACLA,OAAO,GAAGnC,WAAW,GAAG,EAAE,GAAG6B,qBAAqB;QAClDP,OAAO,CAACC,GAAG,CAAE,SAAQG,MAAO,WAAUC,QAAS,eAAcQ,OAAQ,eAAc,CAAC;MACtF;MAEA1B,WAAW,CAAE6B,YAAY,KAAM;QAC7B,GAAGA,YAAY;QACf,CAACZ,MAAM,GAAG,CAACY,YAAY,CAACZ,MAAM,CAAC,IAAI,CAAC,IAAI;MAC1C,CAAC,CAAC,CAAC;MAEHnB,OAAO,CAAEgC,QAAQ,IAAK;QACpB,MAAMC,WAAW,GAAG;UAAE,GAAGD;QAAS,CAAC;QAEnC,IAAIA,QAAQ,CAACb,MAAM,CAAC,IAAIa,QAAQ,CAACb,MAAM,CAAC,CAACe,MAAM,IAAI,CAAC,EAAE;UACpD,OAAOF,QAAQ;QACjB;QAEA,MAAMG,eAAe,GAAGH,QAAQ,CAACb,MAAM,CAAC,GAAGa,QAAQ,CAACb,MAAM,CAAC,CAACe,MAAM,GAAG,CAAC;QAEtE,IAAIL,gBAAgB,KAAK,CAAC,CAAC,EAAE;UAC3BI,WAAW,CAACd,MAAM,CAAC,CAACU,gBAAgB,CAAC,GAAG;YAAET,QAAQ;YAAEQ;UAAQ,CAAC;QAC/D,CAAC,MAAM;UACLK,WAAW,CAACd,MAAM,CAAC,GAAG,CAAC,IAAIa,QAAQ,CAACb,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE;YAAEC,QAAQ;YAAEQ;UAAQ,CAAC,CAAC;QAC5E;QAEA,IAAIO,eAAe,GAAG,CAAC,KAAK,CAAC,EAAE;UAC7B,MAAMC,YAAY,GAAGH,WAAW,CAACd,MAAM,CAAC,CAACM,MAAM,CAAC,CAACC,SAAS,EAAEC,GAAG,KAAKD,SAAS,GAAGC,GAAG,CAACC,OAAO,EAAE,CAAC,CAAC;UAC/Fb,OAAO,CAACC,GAAG,CAAE,SAAQG,MAAO,oBAAmBiB,YAAa,eAAc,CAAC;QAC7E;QAEA,OAAOH,WAAW;MACpB,CAAC,CAAC;IACJ,CAAC;IAED3C,MAAM,CAAC+C,EAAE,CAAC,YAAY,EAAEhC,iBAAiB,CAAC;IAC1Cf,MAAM,CAAC+C,EAAE,CAAC,gBAAgB,EAAEpB,eAAe,CAAC;IAE5C,OAAO,MAAM;MACX3B,MAAM,CAACgD,GAAG,CAAC,YAAY,EAAEjC,iBAAiB,CAAC;MAC3Cf,MAAM,CAACgD,GAAG,CAAC,gBAAgB,EAAErB,eAAe,CAAC;IAC/C,CAAC;EACH,CAAC,EAAE,CAACpB,SAAS,EAAEJ,WAAW,EAAEQ,QAAQ,EAAEF,IAAI,CAAC,CAAC;EAE5Cf,SAAS,CAAC,MAAM;IACd,IAAIW,SAAS,EAAE;MACb,MAAM4C,UAAU,GAAGC,WAAW,CAAC,MAAM;QACnC9C,cAAc,CAAE+C,eAAe,IAAKA,eAAe,GAAG,CAAC,CAAC;MAC1D,CAAC,EAAE,EAAE,CAAC;MACNtC,aAAa,CAACuC,OAAO,GAAGH,UAAU;IACpC,CAAC,MAAM;MACLI,aAAa,CAACxC,aAAa,CAACuC,OAAO,CAAC;IACtC;IAEA,OAAO,MAAM;MACXC,aAAa,CAACxC,aAAa,CAACuC,OAAO,CAAC;IACtC,CAAC;EACH,CAAC,EAAE,CAAC/C,SAAS,EAAEF,WAAW,CAAC,CAAC;EAE5B,MAAMmD,eAAe,GAAIzB,MAAM,IAAK;IAClC,MAAM0B,QAAQ,GAAG9C,IAAI,CAACoB,MAAM,CAAC,IAAI,EAAE;IACnC,MAAMiB,YAAY,GAAGS,QAAQ,CAACpB,MAAM,CAAC,CAACC,SAAS,EAAEC,GAAG,KAAKD,SAAS,GAAGC,GAAG,CAACC,OAAO,EAAE,CAAC,CAAC;IACpF,OAAOQ,YAAY;EACrB,CAAC;;EAED;EACA,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAAC1C,aAAa,IAAI,CAACA,aAAa,CAAC2C,KAAK,EAAE;MAC1C,oBAAO1D,OAAA;QAAA2D,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IACnC;IAEA,OAAOhD,aAAa,CAAC2C,KAAK,CAACM,GAAG,CAAEC,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MAAA,oBAClCnE,OAAA;QAAA2D,QAAA,gBACE3D,OAAA;UAAA2D,QAAA,GAAI,QAAM,EAACM,IAAI,CAACG,YAAY;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAClC/D,OAAA;UAAA2D,QAAA,IAAAO,qBAAA,GACGxD,IAAI,CAACuD,IAAI,CAACI,UAAU,CAAC,cAAAH,qBAAA,uBAArBA,qBAAA,CAAuBF,GAAG,CAAC,CAAC1B,GAAG,EAAEgC,KAAK,kBACrCtE,OAAA;YAAA2D,QAAA,GAAwC,QAChC,EAACrB,GAAG,CAACP,QAAQ,EAAC,cAAY,EAACwC,UAAU,CAACjC,GAAG,CAACC,OAAO,CAAC,EAAC,eAC3D;UAAA,GAFU,GAAE0B,IAAI,CAACI,UAAW,IAAGC,KAAM,EAAC;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAElC,CACL,CAAC,EACD,EAAAI,sBAAA,GAAAzD,IAAI,CAACuD,IAAI,CAACI,UAAU,CAAC,cAAAF,sBAAA,uBAArBA,sBAAA,CAAuBtB,MAAM,MAAK,CAAC,iBAClC7C,OAAA;YAAA2D,QAAA,GAAwC,iBACvB,EAACY,UAAU,CAAChB,eAAe,CAACU,IAAI,CAACI,UAAU,CAAC,CAAC;UAAA,GADpD,GAAEJ,IAAI,CAACI,UAAW,WAAU;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAElC,CACL;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA,GAbGE,IAAI,CAACI,UAAU;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcpB,CAAC;IAAA,CACP,CAAC;EACJ,CAAC;;EAGH;EACApE,SAAS,CAAC,MAAM;IAAA,IAAA6E,oBAAA;IACZ;IACA,MAAMC,gBAAgB,GAAG1D,aAAa,aAAbA,aAAa,wBAAAyD,oBAAA,GAAbzD,aAAa,CAAE2C,KAAK,cAAAc,oBAAA,uBAApBA,oBAAA,CAAsBE,KAAK,CAAET,IAAI,IAAK;MAC7D,MAAMT,QAAQ,GAAG9C,IAAI,CAACuD,IAAI,CAACI,UAAU,CAAC,IAAI,EAAE;MAC5C,OAAOb,QAAQ,CAACX,MAAM,KAAK,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC;;IAEF,IAAI4B,gBAAgB,EAAE;MACpB;MACAlE,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACQ,aAAa,EAAEL,IAAI,CAAC,CAAC;EAGzB,oBACEV,OAAA;IAAA2D,QAAA,gBACE3D,OAAA;MAAA2D,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB/D,OAAA;MAAK2E,SAAS,EAAC,qBAAqB;MAAAhB,QAAA,gBAClC3D,OAAA;QAAA2D,QAAA,EAAI;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpC/D,OAAA;QAAA2D,QAAA,EACG5C,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE6D,aAAa,CAACZ,GAAG,CAAEa,IAAI,iBACrC7E,OAAA;UAAA2D,QAAA,GAA0B,QAClB,EAACkB,IAAI,CAACC,YAAY,EAAC,kBAAgB,EAACP,UAAU,CAACM,IAAI,CAACE,QAAQ,GAAG,IAAI,CAAC;QAAA,GADnEF,IAAI,CAACG,UAAU;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEpB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACN/D,OAAA;MAAK2E,SAAS,EAAC,OAAO;MAAAhB,QAAA,eACpB3D,OAAA;QAAA2D,QAAA,EAAOY,UAAU,CAACnE,WAAW,GAAG,EAAE;MAAC;QAAAwD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACN/D,OAAA;MAAA2D,QAAA,gBACE3D,OAAA;QAAA2D,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAClBN,WAAW,CAAC,CAAC;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5D,EAAA,CA7KID,eAAe;EAAA,QAOOJ,YAAY;AAAA;AAAAmF,EAAA,GAPlC/E,eAAe;AA8KrB,MAAMqE,UAAU,GAAIW,YAAY,IAAK;EACnC,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,GAAG,IAAI,CAAC;EACpD,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,YAAY,GAAG,EAAE,CAAC;EAC7C,MAAMI,gBAAgB,GAAGJ,YAAY,GAAG,EAAE;EAC1C,MAAMK,UAAU,GAAGJ,IAAI,CAACC,KAAK,CAAEH,YAAY,GAAG,IAAI,GAAI,EAAE,CAAC;EAEzD,OAAQ,GAAEO,MAAM,CAACH,OAAO,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACF,gBAAgB,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACD,UAAU,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;AAClI,CAAC;AAED,eAAexF,eAAe;AAAC,IAAA+E,EAAA;AAAAU,YAAA,CAAAV,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}