{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp2\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Ker\\xE4ilyEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KeräilyEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [allWinners, setAllWinners] = useState([]);\n  const [remainingNonWinners, setRemainingNonWinners] = useState([]);\n  const fetchAndHandleTeams = async () => {\n    try {\n      const fetchedTimes = await fetchTimes();\n      await handleTeams(fetchedTimes); // Make sure handleTeams is awaited\n    } catch (error) {\n      console.error('Error fetching and handling teams:', error);\n    }\n  };\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n\n      // Filter times for Keräilyerä\n      const filteredTimes = data.filter(time => time.era.includes('Keräilyerä'));\n      console.log(filteredTimes);\n      return filteredTimes;\n    } catch (error) {\n      console.error('Error fetching times:', error);\n      throw error;\n    }\n  };\n  const calculateCombinedTimesByRound = times => {\n    const combinedTimesByRound = {};\n    times.forEach(time => {\n      const teamId = time.joukkue_id;\n      const round = time.era;\n      if (!combinedTimesByRound[round]) {\n        combinedTimesByRound[round] = {};\n      }\n      if (!combinedTimesByRound[round][teamId]) {\n        combinedTimesByRound[round][teamId] = 0;\n      }\n      combinedTimesByRound[round][teamId] += time.aika;\n    });\n    return combinedTimesByRound;\n  };\n  const findWinnersAndNonWinnersByRound = times => {\n    const combinedTimesByRound = calculateCombinedTimesByRound(times);\n    const winnersByRound = {};\n    const allWinners = [];\n    let allNonWinners = [];\n    Object.keys(combinedTimesByRound).forEach(round => {\n      const combinedTimesByTeam = combinedTimesByRound[round];\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\n      allWinners.push(...roundWinners);\n      winnersByRound[round] = roundWinners;\n      const nonWinners = Object.keys(combinedTimesByTeam).filter(teamId => !roundWinners.some(winner => winner.teamId === teamId)).map(teamId => ({\n        teamId,\n        combinedTime: combinedTimesByTeam[teamId],\n        round\n      }));\n      allNonWinners.push(...nonWinners);\n    });\n    allNonWinners.sort((a, b) => a.combinedTime - b.combinedTime);\n    return {\n      winnersByRound,\n      allNonWinners\n    };\n  };\n  const findRoundWinners = combinedTimesByTeam => {\n    const roundWinners = [];\n    Object.keys(combinedTimesByTeam).forEach(teamId => {\n      const combinedTime = combinedTimesByTeam[teamId];\n      const isWinner = Object.values(combinedTimesByTeam).every(otherCombinedTime => combinedTime <= otherCombinedTime);\n      if (isWinner) {\n        roundWinners.push({\n          teamId,\n          combinedTime\n        });\n      }\n    });\n    return roundWinners;\n  };\n  const handleTeams = async fetchedTimes => {\n    try {\n      const {\n        winnersByRound,\n        allNonWinners\n      } = findWinnersAndNonWinnersByRound(fetchedTimes);\n      const removedTeams = allNonWinners.slice(0, 4);\n      const remainingNonWinners = allNonWinners.slice(4);\n      const allWinners = Object.values(winnersByRound).reduce((acc, roundWinners) => acc.concat(roundWinners), []).concat(removedTeams);\n      setAllWinners(allWinners);\n      setRemainingNonWinners(remainingNonWinners);\n      console.log('All Winners:', allWinners);\n      const allWinnersUpdates = await Promise.all(allWinners.map(async winner => {\n        var _data$updateResults$f;\n        const randomValue = generateRandomNumber();\n        const response = await fetch('http://localhost:3001/api/updateJoukkueet', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            updates: [{\n              joukkueId: winner.teamId,\n              updatedFields: {\n                semifinalist: randomValue\n              }\n            }]\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to update data');\n        }\n        const data = await response.json();\n        return {\n          joukkueId: winner.teamId,\n          updatedFields: (_data$updateResults$f = data.updateResults.find(result => result.joukkueId === winner.teamId)) === null || _data$updateResults$f === void 0 ? void 0 : _data$updateResults$f.updatedFields\n        };\n      }));\n      const winnersUpdateResults = await Promise.all(allWinnersUpdates);\n      console.log('Update Results for Semifinalists:', winnersUpdateResults);\n    } catch (error) {\n      console.error('Error handling teams:', error);\n    }\n  };\n  const handleLopetaClick = () => {\n    fetchAndHandleTeams(); // Fetch and handle teams before updating\n  };\n\n  const generateRandomNumber = () => {\n    return Math.floor(Math.random() * 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(KeräilyEräLopetus, \"d7Zam2pVrEJepOW7CCq37Kw273Q=\");\n_c = KeräilyEräLopetus;\nexport default KeräilyEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"Ker\\xE4ilyEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","KeräilyEräLopetus","eraName","_s","allWinners","setAllWinners","remainingNonWinners","setRemainingNonWinners","fetchAndHandleTeams","fetchedTimes","fetchTimes","handleTeams","error","console","response","fetch","ok","Error","data","json","filteredTimes","filter","time","era","includes","log","calculateCombinedTimesByRound","times","combinedTimesByRound","forEach","teamId","joukkue_id","round","aika","findWinnersAndNonWinnersByRound","winnersByRound","allNonWinners","Object","keys","combinedTimesByTeam","roundWinners","findRoundWinners","push","nonWinners","some","winner","map","combinedTime","sort","a","b","isWinner","values","every","otherCombinedTime","removedTeams","slice","reduce","acc","concat","allWinnersUpdates","Promise","all","_data$updateResults$f","randomValue","generateRandomNumber","method","headers","body","JSON","stringify","updates","joukkueId","updatedFields","semifinalist","updateResults","find","result","winnersUpdateResults","handleLopetaClick","Math","floor","random","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp2/htdocs/kilpailu/src/Components/KeräilyEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst KeräilyEräLopetus = ({ eraName }) => {\r\n  const [allWinners, setAllWinners] = useState([]);\r\n  const [remainingNonWinners, setRemainingNonWinners] = useState([]);\r\n\r\n  const fetchAndHandleTeams = async () => {\r\n    try {\r\n      const fetchedTimes = await fetchTimes();\r\n      await handleTeams(fetchedTimes); // Make sure handleTeams is awaited\r\n    } catch (error) {\r\n      console.error('Error fetching and handling teams:', error);\r\n    }\r\n  };\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // Filter times for Keräilyerä\r\n      const filteredTimes = data.filter((time) => time.era.includes('Keräilyerä'));\r\n\r\n      console.log(filteredTimes);\r\n\r\n      return filteredTimes;\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const calculateCombinedTimesByRound = (times) => {\r\n    const combinedTimesByRound = {};\r\n\r\n    times.forEach((time) => {\r\n      const teamId = time.joukkue_id;\r\n      const round = time.era;\r\n\r\n      if (!combinedTimesByRound[round]) {\r\n        combinedTimesByRound[round] = {};\r\n      }\r\n\r\n      if (!combinedTimesByRound[round][teamId]) {\r\n        combinedTimesByRound[round][teamId] = 0;\r\n      }\r\n\r\n      combinedTimesByRound[round][teamId] += time.aika;\r\n    });\r\n\r\n    return combinedTimesByRound;\r\n  };\r\n\r\n  const findWinnersAndNonWinnersByRound = (times) => {\r\n    const combinedTimesByRound = calculateCombinedTimesByRound(times);\r\n    const winnersByRound = {};\r\n    const allWinners = [];\r\n    let allNonWinners = [];\r\n\r\n    Object.keys(combinedTimesByRound).forEach((round) => {\r\n      const combinedTimesByTeam = combinedTimesByRound[round];\r\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\r\n\r\n      allWinners.push(...roundWinners);\r\n\r\n      winnersByRound[round] = roundWinners;\r\n\r\n      const nonWinners = Object.keys(combinedTimesByTeam)\r\n        .filter((teamId) => !roundWinners.some((winner) => winner.teamId === teamId))\r\n        .map((teamId) => ({ teamId, combinedTime: combinedTimesByTeam[teamId], round }));\r\n\r\n      allNonWinners.push(...nonWinners);\r\n    });\r\n\r\n    allNonWinners.sort((a, b) => a.combinedTime - b.combinedTime);\r\n\r\n    return { winnersByRound, allNonWinners };\r\n  };\r\n\r\n  const findRoundWinners = (combinedTimesByTeam) => {\r\n    const roundWinners = [];\r\n    Object.keys(combinedTimesByTeam).forEach((teamId) => {\r\n      const combinedTime = combinedTimesByTeam[teamId];\r\n\r\n      const isWinner = Object.values(combinedTimesByTeam).every(\r\n        (otherCombinedTime) => combinedTime <= otherCombinedTime\r\n      );\r\n\r\n      if (isWinner) {\r\n        roundWinners.push({ teamId, combinedTime });\r\n      }\r\n    });\r\n\r\n    return roundWinners;\r\n  };\r\n\r\n  const handleTeams = async (fetchedTimes) => {\r\n    try {\r\n      const { winnersByRound, allNonWinners } = findWinnersAndNonWinnersByRound(fetchedTimes);\r\n\r\n      const removedTeams = allNonWinners.slice(0, 4);\r\n      const remainingNonWinners = allNonWinners.slice(4);\r\n\r\n      const allWinners = Object.values(winnersByRound)\r\n        .reduce((acc, roundWinners) => acc.concat(roundWinners), [])\r\n        .concat(removedTeams);\r\n\r\n      setAllWinners(allWinners);\r\n      setRemainingNonWinners(remainingNonWinners);\r\n\r\n      console.log('All Winners:', allWinners);\r\n\r\n      const allWinnersUpdates = await Promise.all(allWinners.map(async (winner) => {\r\n        const randomValue = generateRandomNumber();\r\n\r\n        const response = await fetch('http://localhost:3001/api/updateJoukkueet', {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            updates: [{\r\n              joukkueId: winner.teamId,\r\n              updatedFields: {\r\n                semifinalist: randomValue,\r\n              },\r\n            }],\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to update data');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return {\r\n          joukkueId: winner.teamId,\r\n          updatedFields: data.updateResults.find(result => result.joukkueId === winner.teamId)?.updatedFields,\r\n        };\r\n      }));\r\n\r\n      const winnersUpdateResults = await Promise.all(allWinnersUpdates);\r\n\r\n      console.log('Update Results for Semifinalists:', winnersUpdateResults);\r\n    } catch (error) {\r\n      console.error('Error handling teams:', error);\r\n    }\r\n  };\r\n\r\n  const handleLopetaClick = () => {\r\n    fetchAndHandleTeams(); // Fetch and handle teams before updating\r\n\r\n  };\r\n\r\n  const generateRandomNumber = () => {\r\n    return Math.floor(Math.random() * 1000);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KeräilyEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}