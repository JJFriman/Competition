{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AjastinKello.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst AjastinKello = ({\n  teamId,\n  tasks,\n  era,\n  maxAika\n}) => {\n  _s();\n  const [lapTimes, setLapTimes] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const intervalIdRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    const formattedMaxAika = maxAika;\n    if (isRunning && elapsedTime >= formattedMaxAika) {\n      stopTimer();\n    }\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, teamId, maxAika, elapsedTime]);\n  const startTimer = () => {\n    setIsRunning(true);\n  };\n  const stopTimer = () => {\n    setIsRunning(false);\n    if (elapsedTime > 0) {\n      const formattedTime = formatTime(elapsedTime * 10);\n      setLapTimes(prevLapTimes => [...prevLapTimes, formattedTime]);\n    }\n    resetTimer();\n  };\n  const resetTimer = () => {\n    setElapsedTime(0);\n    clearInterval(intervalIdRef.current);\n  };\n  function formatTime(milliseconds) {\n    // Function unchanged\n  }\n  const postLapTimeToMySQL = async (era, tehtava, teamId, lapTime) => {\n    const selectedGroup = localStorage.getItem('selectedGroup');\n    if (selectedGroup) {\n      try {\n        const parsedData = JSON.parse(selectedGroup);\n        console.log('teamId:', teamId);\n        const response = await fetch('http://localhost:3001/api/aikataulu', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            era: parsedData.groupInfo,\n            tehtava,\n            joukkueId: teamId,\n            aika: lapTime\n          })\n        });\n        if (!response.ok) {\n          console.error('Failed to send lap time to aikataulu:', response.status);\n        }\n      } catch (error) {\n        console.error('Error sending lap time to aikataulu:', error);\n      }\n    }\n  };\n  const handleLapTimeEnd = tehtava => {\n    const finishedTime = elapsedTime;\n    postLapTimeToMySQL(era, tehtava.tehtävä_nimi, teamId, finishedTime);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: era\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: task.tehtävä_nimi\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: lapTimes.length > index ? lapTimes[index] : formatTime(0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTimer,\n          disabled: isRunning,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            stopTimer();\n            handleLapTimeEnd(task);\n          },\n          disabled: !isRunning,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetTimer,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(AjastinKello, \"PJviijTsjlpTZNjaHnXMfuugl5Y=\");\n_c = AjastinKello;\nexport default AjastinKello;\nvar _c;\n$RefreshReg$(_c, \"AjastinKello\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","socket","AjastinKello","teamId","tasks","era","maxAika","_s","lapTimes","setLapTimes","isRunning","setIsRunning","elapsedTime","setElapsedTime","intervalIdRef","clearInterval","current","formattedMaxAika","stopTimer","intervalId","setInterval","prevElapsedTime","startTimer","formattedTime","formatTime","prevLapTimes","resetTimer","milliseconds","postLapTimeToMySQL","tehtava","lapTime","selectedGroup","localStorage","getItem","parsedData","JSON","parse","console","log","response","fetch","method","headers","body","stringify","groupInfo","joukkueId","aika","ok","error","status","handleLapTimeEnd","finishedTime","tehtävä_nimi","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","index","className","length","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AjastinKello.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst AjastinKello = ({ teamId, tasks, era, maxAika }) => {\r\n  const [lapTimes, setLapTimes] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const intervalIdRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const formattedMaxAika = maxAika;\r\n\r\n    if (isRunning && elapsedTime >= formattedMaxAika) {\r\n      stopTimer();\r\n    }\r\n\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, teamId, maxAika, elapsedTime]);\r\n\r\n  const startTimer = () => {\r\n    setIsRunning(true);\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    setIsRunning(false);\r\n\r\n    if (elapsedTime > 0) {\r\n      const formattedTime = formatTime(elapsedTime * 10);\r\n      setLapTimes((prevLapTimes) => [...prevLapTimes, formattedTime]);\r\n    }\r\n\r\n    resetTimer();\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    setElapsedTime(0);\r\n    clearInterval(intervalIdRef.current);\r\n  };\r\n\r\n  function formatTime(milliseconds) {\r\n    // Function unchanged\r\n  }\r\n\r\n  const postLapTimeToMySQL = async (era, tehtava, teamId, lapTime) => {\r\n    const selectedGroup = localStorage.getItem('selectedGroup');\r\n\r\n    if (selectedGroup) {\r\n      try {\r\n        const parsedData = JSON.parse(selectedGroup);\r\n        console.log('teamId:', teamId);\r\n        const response = await fetch('http://localhost:3001/api/aikataulu', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            era: parsedData.groupInfo,\r\n            tehtava,\r\n            joukkueId: teamId,\r\n            aika: lapTime,\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.error('Failed to send lap time to aikataulu:', response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error sending lap time to aikataulu:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleLapTimeEnd = (tehtava) => {\r\n    const finishedTime = elapsedTime;\r\n    postLapTimeToMySQL(era, tehtava.tehtävä_nimi, teamId, finishedTime);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>{era}</h3>\r\n      {tasks.map((task, index) => (\r\n        <div key={index}>\r\n          <h4>{task.tehtävä_nimi}</h4>\r\n          <div className=\"timer\">\r\n            <span>{lapTimes.length > index ? lapTimes[index] : formatTime(0)}</span>\r\n          </div>\r\n          <div className=\"controls\">\r\n            <button onClick={startTimer} disabled={isRunning}>\r\n              Start\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                stopTimer();\r\n                handleLapTimeEnd(task);\r\n              }}\r\n              disabled={!isRunning}\r\n            >\r\n              Stop\r\n            </button>\r\n            <button onClick={resetTimer}>Reset</button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AjastinKello;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}