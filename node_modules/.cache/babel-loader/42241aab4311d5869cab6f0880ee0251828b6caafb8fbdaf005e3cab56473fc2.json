{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const groupTimesByEra = (times, eraName) => {\n    const filteredTimes = times.filter(time => time.era.includes(eraName));\n    const groupedTimes = {};\n    filteredTimes.forEach(time => {\n      const eraNumber = time.era.match(/\\d+/);\n      if (eraNumber) {\n        const key = `Era ${eraNumber[0]}`;\n        if (!groupedTimes[key]) {\n          groupedTimes[key] = [];\n        }\n        groupedTimes[key].push(time);\n      }\n    });\n    return groupedTimes;\n  };\n  const findWinners = groupedTimes => {\n    const winners = [];\n    for (const key in groupedTimes) {\n      if (groupedTimes.hasOwnProperty(key)) {\n        const timesInEra = groupedTimes[key];\n        const smallestTime = timesInEra.reduce((min, time) => time.aika < min ? time.aika : min, timesInEra[0].aika);\n        winners.push({\n          era: key,\n          smallestTime\n        });\n      }\n    }\n    return winners;\n  };\n  const handleLopetaClick = async () => {\n    await fetchTimes();\n    if (times && times.length > 0) {\n      const groupedByEra = groupTimesByEra(times, 'Alkuerä');\n      console.log('Grouped by era:', groupedByEra);\n      const winners = findWinners(groupedByEra);\n      console.log('Winners:', winners);\n\n      // Display or use the winners array as needed\n    } else {\n      alert('No times available.');\n    }\n  };\n  console.log(times);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","error","console","groupTimesByEra","filteredTimes","filter","time","era","includes","groupedTimes","forEach","eraNumber","match","key","push","findWinners","winners","hasOwnProperty","timesInEra","smallestTime","reduce","min","aika","handleLopetaClick","length","groupedByEra","log","alert","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const groupTimesByEra = (times, eraName) => {\r\n    const filteredTimes = times.filter((time) => time.era.includes(eraName));\r\n  \r\n    const groupedTimes = {};\r\n    filteredTimes.forEach((time) => {\r\n      const eraNumber = time.era.match(/\\d+/);\r\n      if (eraNumber) {\r\n        const key = `Era ${eraNumber[0]}`;\r\n        if (!groupedTimes[key]) {\r\n          groupedTimes[key] = [];\r\n        }\r\n        groupedTimes[key].push(time);\r\n      }\r\n    });\r\n  \r\n    return groupedTimes;\r\n  };\r\n  \r\n  const findWinners = (groupedTimes) => {\r\n    const winners = [];\r\n  \r\n    for (const key in groupedTimes) {\r\n      if (groupedTimes.hasOwnProperty(key)) {\r\n        const timesInEra = groupedTimes[key];\r\n        const smallestTime = timesInEra.reduce((min, time) => (time.aika < min ? time.aika : min), timesInEra[0].aika);\r\n        winners.push({ era: key, smallestTime });\r\n      }\r\n    }\r\n  \r\n    return winners;\r\n  };\r\n  \r\n  \r\n\r\nconst handleLopetaClick = async () => {\r\n  await fetchTimes();\r\n\r\n  if (times && times.length > 0) {\r\n    const groupedByEra = groupTimesByEra(times, 'Alkuerä');\r\n    console.log('Grouped by era:', groupedByEra);\r\n\r\n    const winners = findWinners(groupedByEra);\r\n    console.log('Winners:', winners);\r\n\r\n    // Display or use the winners array as needed\r\n  } else {\r\n    alert('No times available.');\r\n  }\r\n};\r\n\r\n  \r\n  \r\nconsole.log(times)\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}