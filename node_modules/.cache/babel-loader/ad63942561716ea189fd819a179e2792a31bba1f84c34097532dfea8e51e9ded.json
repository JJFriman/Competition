{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\TasksSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TasksSelector({\n  onSelectTask\n}) {\n  _s();\n  const [selectedTask, setSelectedTask] = useState('');\n  useEffect(() => {\n    // Retrieve selected task from local storage on component mount\n    const storedTask = localStorage.getItem('selectedTask');\n    if (storedTask) {\n      setSelectedTask(storedTask);\n      onSelectTask(storedTask);\n    }\n  }, [onSelectTask]);\n  const handleTaskSelect = taskName => {\n    setSelectedTask(taskName);\n    onSelectTask(taskName);\n    // Save selected task to local storage\n    localStorage.setItem('selectedTask', taskName);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Task Selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => {\n        const taskId = e.target.value;\n        const selected = tasks.find(task => task.id === parseInt(taskId, 10));\n        if (selected) {\n          onSelectTask(selected);\n        } else {\n          console.error('Invalid task selected:', taskId);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"0\",\n        children: \"Select a task\"\n      }, \"default\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: task.id,\n        children: task.tehtävä_nimi\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(TasksSelector, \"nhvV3NQCCFUOalnwdn2xjV59lkI=\");\n_c = TasksSelector;\nexport default TasksSelector;\nvar _c;\n$RefreshReg$(_c, \"TasksSelector\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TasksSelector","onSelectTask","_s","selectedTask","setSelectedTask","storedTask","localStorage","getItem","handleTaskSelect","taskName","setItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","taskId","target","value","selected","tasks","find","task","id","parseInt","console","error","map","tehtävä_nimi","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/TasksSelector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction TasksSelector({ onSelectTask }) {\r\n  const [selectedTask, setSelectedTask] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Retrieve selected task from local storage on component mount\r\n    const storedTask = localStorage.getItem('selectedTask');\r\n    if (storedTask) {\r\n      setSelectedTask(storedTask);\r\n      onSelectTask(storedTask);\r\n    }\r\n  }, [onSelectTask]);\r\n\r\n  const handleTaskSelect = (taskName) => {\r\n    setSelectedTask(taskName);\r\n    onSelectTask(taskName);\r\n    // Save selected task to local storage\r\n    localStorage.setItem('selectedTask', taskName);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Task Selector</h2>\r\n      <select\r\n        onChange={(e) => {\r\n          const taskId = e.target.value;\r\n          const selected = tasks.find((task) => task.id === parseInt(taskId, 10));\r\n\r\n          if (selected) {\r\n            onSelectTask(selected);\r\n          } else {\r\n            console.error('Invalid task selected:', taskId);\r\n          }\r\n        }}\r\n      >\r\n        <option key=\"default\" value=\"0\">Select a task</option>\r\n        {tasks.map((task) => (\r\n          <option key={task.id} value={task.id}>\r\n            {task.tehtävä_nimi}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TasksSelector;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,aAAaA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,IAAIF,UAAU,EAAE;MACdD,eAAe,CAACC,UAAU,CAAC;MAC3BJ,YAAY,CAACI,UAAU,CAAC;IAC1B;EACF,CAAC,EAAE,CAACJ,YAAY,CAAC,CAAC;EAElB,MAAMO,gBAAgB,GAAIC,QAAQ,IAAK;IACrCL,eAAe,CAACK,QAAQ,CAAC;IACzBR,YAAY,CAACQ,QAAQ,CAAC;IACtB;IACAH,YAAY,CAACI,OAAO,CAAC,cAAc,EAAED,QAAQ,CAAC;EAChD,CAAC;EAED,oBACEV,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBhB,OAAA;MACEiB,QAAQ,EAAGC,CAAC,IAAK;QACf,MAAMC,MAAM,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;QAC7B,MAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKC,QAAQ,CAACR,MAAM,EAAE,EAAE,CAAC,CAAC;QAEvE,IAAIG,QAAQ,EAAE;UACZpB,YAAY,CAACoB,QAAQ,CAAC;QACxB,CAAC,MAAM;UACLM,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEV,MAAM,CAAC;QACjD;MACF,CAAE;MAAAP,QAAA,gBAEFZ,OAAA;QAAsBqB,KAAK,EAAC,GAAG;QAAAT,QAAA,EAAC;MAAa,GAAjC,SAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgC,CAAC,EACrDO,KAAK,CAACO,GAAG,CAAEL,IAAI,iBACdzB,OAAA;QAAsBqB,KAAK,EAAEI,IAAI,CAACC,EAAG;QAAAd,QAAA,EAClCa,IAAI,CAACM;MAAY,GADPN,IAAI,CAACC,EAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACb,EAAA,CA3CQF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AA6CtB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}