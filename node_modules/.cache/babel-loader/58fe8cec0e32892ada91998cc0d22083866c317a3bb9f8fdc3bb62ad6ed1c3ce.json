{"ast":null,"code":"const handleLopetaClick = async () => {\n  try {\n    await fetchTimes();\n    if (times && times.length > 0) {\n      const groupedByEra = groupTimesByEra(times, 'Alkuerä');\n      console.log('Grouped by era:', groupedByEra);\n      const winnersByRound = {};\n      const additionalWinners = [];\n\n      // Loop through each round\n      Object.keys(groupedByEra).forEach((eraKey, index) => {\n        const roundKey = `Alkuerä ${index + 1}`;\n\n        // Combine times for each team in the current round\n        const combinedTimes = {};\n        groupedByEra[eraKey].forEach(time => {\n          const teamId = time.joukkue_id;\n          if (!combinedTimes[teamId]) {\n            combinedTimes[teamId] = 0;\n          }\n          combinedTimes[teamId] += time.aika;\n        });\n\n        // Sort teams in the current round by combined time\n        const sortedTeams = Object.keys(combinedTimes).map(teamId => ({\n          teamId,\n          combinedTime: combinedTimes[teamId]\n        })).sort((a, b) => a.combinedTime - b.combinedTime).slice(0, 6);\n\n        // Add round winners to the winnersByRound object\n        winnersByRound[roundKey] = sortedTeams;\n\n        // Add teams to additionalWinners\n        additionalWinners.push(...sortedTeams);\n      });\n\n      // Remove duplicate teams from additionalWinners\n      const uniqueAdditionalWinners = Object.values(additionalWinners.reduce((acc, team) => {\n        acc[team.teamId] = team;\n        return acc;\n      }, {}));\n      console.log('Winners by Round:', winnersByRound);\n      console.log('Additional Winners:', uniqueAdditionalWinners);\n    } else {\n      alert('No times available.');\n    }\n  } catch (error) {\n    console.error('Error handling lopeta click:', error);\n  }\n};","map":{"version":3,"names":["handleLopetaClick","fetchTimes","times","length","groupedByEra","groupTimesByEra","console","log","winnersByRound","additionalWinners","Object","keys","forEach","eraKey","index","roundKey","combinedTimes","time","teamId","joukkue_id","aika","sortedTeams","map","combinedTime","sort","a","b","slice","push","uniqueAdditionalWinners","values","reduce","acc","team","alert","error"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["const handleLopetaClick = async () => {\r\n  try {\r\n    await fetchTimes();\r\n\r\n    if (times && times.length > 0) {\r\n      const groupedByEra = groupTimesByEra(times, 'Alkuerä');\r\n      console.log('Grouped by era:', groupedByEra);\r\n\r\n      const winnersByRound = {};\r\n      const additionalWinners = [];\r\n\r\n      // Loop through each round\r\n      Object.keys(groupedByEra).forEach((eraKey, index) => {\r\n        const roundKey = `Alkuerä ${index + 1}`;\r\n\r\n        // Combine times for each team in the current round\r\n        const combinedTimes = {};\r\n        groupedByEra[eraKey].forEach((time) => {\r\n          const teamId = time.joukkue_id;\r\n          if (!combinedTimes[teamId]) {\r\n            combinedTimes[teamId] = 0;\r\n          }\r\n          combinedTimes[teamId] += time.aika;\r\n        });\r\n\r\n        // Sort teams in the current round by combined time\r\n        const sortedTeams = Object.keys(combinedTimes)\r\n          .map((teamId) => ({ teamId, combinedTime: combinedTimes[teamId] }))\r\n          .sort((a, b) => a.combinedTime - b.combinedTime)\r\n          .slice(0, 6);\r\n\r\n        // Add round winners to the winnersByRound object\r\n        winnersByRound[roundKey] = sortedTeams;\r\n\r\n        // Add teams to additionalWinners\r\n        additionalWinners.push(...sortedTeams);\r\n      });\r\n\r\n      // Remove duplicate teams from additionalWinners\r\n      const uniqueAdditionalWinners = Object.values(\r\n        additionalWinners.reduce((acc, team) => {\r\n          acc[team.teamId] = team;\r\n          return acc;\r\n        }, {})\r\n      );\r\n\r\n      console.log('Winners by Round:', winnersByRound);\r\n      console.log('Additional Winners:', uniqueAdditionalWinners);\r\n    } else {\r\n      alert('No times available.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling lopeta click:', error);\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,UAAU,CAAC,CAAC;IAElB,IAAIC,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MAC7B,MAAMC,YAAY,GAAGC,eAAe,CAACH,KAAK,EAAE,SAAS,CAAC;MACtDI,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,YAAY,CAAC;MAE5C,MAAMI,cAAc,GAAG,CAAC,CAAC;MACzB,MAAMC,iBAAiB,GAAG,EAAE;;MAE5B;MACAC,MAAM,CAACC,IAAI,CAACP,YAAY,CAAC,CAACQ,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;QACnD,MAAMC,QAAQ,GAAI,WAAUD,KAAK,GAAG,CAAE,EAAC;;QAEvC;QACA,MAAME,aAAa,GAAG,CAAC,CAAC;QACxBZ,YAAY,CAACS,MAAM,CAAC,CAACD,OAAO,CAAEK,IAAI,IAAK;UACrC,MAAMC,MAAM,GAAGD,IAAI,CAACE,UAAU;UAC9B,IAAI,CAACH,aAAa,CAACE,MAAM,CAAC,EAAE;YAC1BF,aAAa,CAACE,MAAM,CAAC,GAAG,CAAC;UAC3B;UACAF,aAAa,CAACE,MAAM,CAAC,IAAID,IAAI,CAACG,IAAI;QACpC,CAAC,CAAC;;QAEF;QACA,MAAMC,WAAW,GAAGX,MAAM,CAACC,IAAI,CAACK,aAAa,CAAC,CAC3CM,GAAG,CAAEJ,MAAM,KAAM;UAAEA,MAAM;UAAEK,YAAY,EAAEP,aAAa,CAACE,MAAM;QAAE,CAAC,CAAC,CAAC,CAClEM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACF,YAAY,GAAGG,CAAC,CAACH,YAAY,CAAC,CAC/CI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;QAEd;QACAnB,cAAc,CAACO,QAAQ,CAAC,GAAGM,WAAW;;QAEtC;QACAZ,iBAAiB,CAACmB,IAAI,CAAC,GAAGP,WAAW,CAAC;MACxC,CAAC,CAAC;;MAEF;MACA,MAAMQ,uBAAuB,GAAGnB,MAAM,CAACoB,MAAM,CAC3CrB,iBAAiB,CAACsB,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;QACtCD,GAAG,CAACC,IAAI,CAACf,MAAM,CAAC,GAAGe,IAAI;QACvB,OAAOD,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CACP,CAAC;MAED1B,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEC,cAAc,CAAC;MAChDF,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEsB,uBAAuB,CAAC;IAC7D,CAAC,MAAM;MACLK,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd7B,OAAO,CAAC6B,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACtD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}