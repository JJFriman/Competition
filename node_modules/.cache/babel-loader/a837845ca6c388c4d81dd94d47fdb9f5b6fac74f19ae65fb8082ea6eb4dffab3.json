{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp2\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport useGroupData from './UseGroupData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({});\n  const [lapCount, setLapCount] = useState({});\n  const intervalIdRef = useRef(null);\n  const {\n    selectedGroup\n  } = useGroupData();\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n      const currentElapsedTime = elapsedTime * 10;\n      const task = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.find(t => t.tehtävä_nimi === taskName);\n      if (!task) {\n        console.error(`Error: Task ${taskName} not found.`);\n        return;\n      }\n      const maxAika = task.max_aika * 1000;\n      let adjustedLapTime = currentElapsedTime;\n\n      // Check if lap time exceeds max_aika for the task\n      if (currentElapsedTime > maxAika) {\n        var _laps$teamId;\n        const previousLapsTotalTime = calculatePreviousLapsTotalTime(teamId, taskName);\n\n        // Adjust lap time for the second and third laps\n        const lapIndex = (_laps$teamId = laps[teamId]) === null || _laps$teamId === void 0 ? void 0 : _laps$teamId.findIndex(lap => lap.taskName === taskName);\n        if (lapIndex >= 1) {\n          const lastLap = laps[teamId][lapIndex - 1];\n          adjustedLapTime = lastLap.lapTime + maxAika;\n        } else {\n          // Adjust lap time for the first lap\n          adjustedLapTime = maxAika + calculatePreviousLapsTotalTime(teamId, taskName);\n        }\n        console.log(`Adjusted Lap Time for ${taskName}: ${adjustedLapTime} milliseconds`);\n      }\n      setLapCount(prevLapCount => ({\n        ...prevLapCount,\n        [teamId]: (prevLapCount[teamId] || 0) + 1\n      }));\n      setLaps(prevLaps => {\n        const updatedLaps = {\n          ...prevLaps\n        };\n        const lap = {\n          taskName,\n          lapTime: adjustedLapTime\n        };\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), lap];\n        const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\n        if (currentLapCount === 3) {\n          const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n          console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n        }\n        return updatedLaps;\n      });\n    };\n    const calculatePreviousLapsTotalTime = (teamId, taskName) => {\n      const previousLapsTotalTime = Array.isArray(laps[teamId]) ? laps[teamId].filter(lap => lap.taskName === taskName).reduce((totalTime, lap) => totalTime + lap.lapTime, 0) : 0;\n      return previousLapsTotalTime;\n    };\n    socket.on('timerStart', startTimerHandler);\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime, lapCount, laps]);\n  const submitMaxAikaLaps = (teamId, taskName, round) => {\n    const task = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.find(t => t.tehtävä_nimi === taskName);\n    const maxAika = task ? task.max_aika * 1000 : 0;\n    setLapCount(prevLapCount => ({\n      ...prevLapCount,\n      [teamId]: (prevLapCount[teamId] || 0) + 1\n    }));\n    setLaps(prevLaps => {\n      const updatedLaps = {\n        ...prevLaps\n      };\n      const existingLapIndex = Array.isArray(updatedLaps[teamId]) ? updatedLaps[teamId].findIndex(lap => lap.taskName === taskName) : -1;\n      if (existingLapIndex === -1) {\n        // If lap for the task doesn't exist, calculate lapTime by considering previous laps\n        const previousLapsTotalTime = Array.isArray(updatedLaps[teamId]) ? updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0) : 0;\n\n        // Calculate lapTime for the second lap based on the round\n        const lapTime = round === 2 ? maxAika : maxAika + previousLapsTotalTime;\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n          taskName,\n          lapTime\n        }];\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\n      }\n\n      // Check if all required laps are completed for the team\n      const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\n      if (currentLapCount === 3) {\n        const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n        console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\n      }\n      return updatedLaps;\n    });\n  };\n  useEffect(() => {\n    if (selectedGroup !== null && selectedGroup !== void 0 && selectedGroup.selectedTasks && laps && elapsedTime > 0) {\n      selectedGroup.selectedTasks.forEach(task => {\n        selectedGroup.teams.forEach(team => {\n          const teamLaps = laps[team.joukkue_id] || [];\n          const currentLapCount = teamLaps.filter(lap => lap.taskName === task.tehtävä_nimi).length;\n          if (currentLapCount < 3 && elapsedTime * 10 >= task.max_aika * 1000) {\n            console.log(`Max_aika reached for Team: ${team.joukkue_id}, Task: ${task.tehtävä_nimi}`);\n            submitMaxAikaLaps(team.joukkue_id, task.tehtävä_nimi);\n          }\n        });\n      });\n    }\n  }, [selectedGroup, laps, elapsedTime]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    const teamLaps = laps[teamId] || [];\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n    return combinedTime;\n  };\n\n  // Render the teams from selectedGroup\n  const renderTeams = () => {\n    if (!selectedGroup || !selectedGroup.teams) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No teams available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 14\n      }, this);\n    }\n    return selectedGroup.teams.map(team => {\n      var _laps$team$joukkue_id, _laps$team$joukkue_id2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Team: \", team.joukkue_nimi]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [(_laps$team$joukkue_id = laps[team.joukkue_id]) === null || _laps$team$joukkue_id === void 0 ? void 0 : _laps$team$joukkue_id.map(lap => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n          }, `${team.joukkue_id}-${lap.taskName}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 3\n          }, this)), ((_laps$team$joukkue_id2 = laps[team.joukkue_id]) === null || _laps$team$joukkue_id2 === void 0 ? void 0 : _laps$team$joukkue_id2.length) === 3 && /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Combined Time: \", formatTime(getCombinedTime(team.joukkue_id))]\n          }, `${team.joukkue_id}-combined`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 9\n        }, this)]\n      }, team.joukkue_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }, this);\n    });\n  };\n  useEffect(() => {\n    var _selectedGroup$teams;\n    const allLapsCompleted = selectedGroup === null || selectedGroup === void 0 ? void 0 : (_selectedGroup$teams = selectedGroup.teams) === null || _selectedGroup$teams === void 0 ? void 0 : _selectedGroup$teams.every(team => {\n      const teamLaps = laps[team.joukkue_id] || [];\n      return teamLaps.length === 3;\n    });\n    if (allLapsCompleted) {\n      setIsRunning(false);\n    }\n  }, [selectedGroup, laps]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-times-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Maximum Time for Each Task:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.selectedTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Task: \", task.tehtävä_nimi, \", Maximum Time: \", formatTime(task.max_aika * 1000)]\n        }, `${task.tehtävä_id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 3\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), renderTeams()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"QKpA02NnjqE5Tvum0bN6/WEKh7Q=\", false, function () {\n  return [useGroupData];\n});\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","useGroupData","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","selectedGroup","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","console","log","lapTimerHandler","lapTimerData","teamId","taskName","error","currentElapsedTime","task","selectedTasks","find","t","tehtävä_nimi","maxAika","max_aika","adjustedLapTime","_laps$teamId","previousLapsTotalTime","calculatePreviousLapsTotalTime","lapIndex","findIndex","lap","lastLap","lapTime","prevLapCount","prevLaps","updatedLaps","currentLapCount","length","combinedTime","reduce","totalTime","Array","isArray","filter","on","off","submitMaxAikaLaps","round","existingLapIndex","forEach","teams","team","teamLaps","joukkue_id","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","renderTeams","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_laps$team$joukkue_id","_laps$team$joukkue_id2","joukkue_nimi","formatTime","_selectedGroup$teams","allLapsCompleted","every","className","index","tehtävä_id","_c","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp2/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport useGroupData from './UseGroupData';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({});\r\n  const [lapCount, setLapCount] = useState({});\r\n  const intervalIdRef = useRef(null);\r\n  const { selectedGroup } = useGroupData();\r\n  \r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\nconst lapTimerHandler = (lapTimerData) => {\r\n  const { teamId, taskName } = lapTimerData;\r\n\r\n  if (!startTime) {\r\n    console.error('Error: startTime is not set.');\r\n    return;\r\n  }\r\n\r\n  const currentElapsedTime = elapsedTime * 10;\r\n\r\n  const task = selectedGroup?.selectedTasks.find((t) => t.tehtävä_nimi === taskName);\r\n  if (!task) {\r\n    console.error(`Error: Task ${taskName} not found.`);\r\n    return;\r\n  }\r\n\r\n  const maxAika = task.max_aika * 1000;\r\n  let adjustedLapTime = currentElapsedTime;\r\n\r\n  // Check if lap time exceeds max_aika for the task\r\n  if (currentElapsedTime > maxAika) {\r\n    const previousLapsTotalTime = calculatePreviousLapsTotalTime(teamId, taskName);\r\n\r\n    // Adjust lap time for the second and third laps\r\n    const lapIndex = laps[teamId]?.findIndex((lap) => lap.taskName === taskName);\r\n    if (lapIndex >= 1) {\r\n      const lastLap = laps[teamId][lapIndex - 1];\r\n      adjustedLapTime = lastLap.lapTime + maxAika;\r\n    } else {\r\n      // Adjust lap time for the first lap\r\n      adjustedLapTime = maxAika + calculatePreviousLapsTotalTime(teamId, taskName);\r\n    }\r\n\r\n    console.log(`Adjusted Lap Time for ${taskName}: ${adjustedLapTime} milliseconds`);\r\n  }\r\n\r\n  setLapCount((prevLapCount) => ({\r\n    ...prevLapCount,\r\n    [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n  }));\r\n\r\n  setLaps((prevLaps) => {\r\n    const updatedLaps = { ...prevLaps };\r\n\r\n    const lap = { taskName, lapTime: adjustedLapTime };\r\n    updatedLaps[teamId] = [...(prevLaps[teamId] || []), lap];\r\n\r\n    const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\r\n\r\n    if (currentLapCount === 3) {\r\n      const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n      console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n    }\r\n\r\n    return updatedLaps;\r\n  });\r\n};\r\n\r\nconst calculatePreviousLapsTotalTime = (teamId, taskName) => {\r\n  const previousLapsTotalTime = Array.isArray(laps[teamId])\r\n    ? laps[teamId].filter((lap) => lap.taskName === taskName).reduce((totalTime, lap) => totalTime + lap.lapTime, 0)\r\n    : 0;\r\n\r\n  return previousLapsTotalTime;\r\n};\r\n\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n      \r\n      \r\n      \r\n    socket.on('timerStart', startTimerHandler);\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime, lapCount, laps]);\r\n\r\n  const submitMaxAikaLaps = (teamId, taskName, round) => {\r\n    const task = selectedGroup?.selectedTasks.find((t) => t.tehtävä_nimi === taskName);\r\n    const maxAika = task ? task.max_aika * 1000 : 0;\r\n  \r\n    setLapCount((prevLapCount) => ({\r\n      ...prevLapCount,\r\n      [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n    }));\r\n  \r\n    setLaps((prevLaps) => {\r\n      const updatedLaps = { ...prevLaps };\r\n  \r\n      const existingLapIndex = Array.isArray(updatedLaps[teamId])\r\n        ? updatedLaps[teamId].findIndex((lap) => lap.taskName === taskName)\r\n        : -1;\r\n  \r\n      if (existingLapIndex === -1) {\r\n        // If lap for the task doesn't exist, calculate lapTime by considering previous laps\r\n        const previousLapsTotalTime = Array.isArray(updatedLaps[teamId])\r\n          ? updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0)\r\n          : 0;\r\n  \r\n        // Calculate lapTime for the second lap based on the round\r\n        const lapTime = round === 2 ? maxAika : maxAika + previousLapsTotalTime;\r\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n  \r\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${lapTime} milliseconds`);\r\n      }\r\n  \r\n      // Check if all required laps are completed for the team\r\n      const currentLapCount = updatedLaps[teamId] ? updatedLaps[teamId].length : 0;\r\n  \r\n      if (currentLapCount === 3) {\r\n        const combinedTime = updatedLaps[teamId].reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n        console.log(`Team: ${teamId}, Combined Time: ${combinedTime} milliseconds`);\r\n      }\r\n  \r\n      return updatedLaps;\r\n    });\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    if (selectedGroup?.selectedTasks && laps && elapsedTime > 0) {\r\n      selectedGroup.selectedTasks.forEach((task) => {\r\n        selectedGroup.teams.forEach((team) => {\r\n          const teamLaps = laps[team.joukkue_id] || [];\r\n          const currentLapCount = teamLaps.filter((lap) => lap.taskName === task.tehtävä_nimi).length;\r\n\r\n          if (currentLapCount < 3 && elapsedTime * 10 >= task.max_aika * 1000) {\r\n            console.log(`Max_aika reached for Team: ${team.joukkue_id}, Task: ${task.tehtävä_nimi}`);\r\n            submitMaxAikaLaps(team.joukkue_id, task.tehtävä_nimi);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }, [selectedGroup, laps, elapsedTime]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  \r\n\r\n  const getCombinedTime = (teamId) => {\r\n    const teamLaps = laps[teamId] || [];\r\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n    return combinedTime;\r\n  };\r\n\r\n  // Render the teams from selectedGroup\r\n  const renderTeams = () => {\r\n    if (!selectedGroup || !selectedGroup.teams) {\r\n      return <p>No teams available.</p>;\r\n    }\r\n  \r\n    return selectedGroup.teams.map((team) => (\r\n      <div key={team.joukkue_id}>\r\n        <h4>Team: {team.joukkue_nimi}</h4>\r\n        <ul>\r\n        {laps[team.joukkue_id]?.map((lap) => (\r\n  <li key={`${team.joukkue_id}-${lap.taskName}`}>\r\n    Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n  </li>\r\n))}\r\n\r\n{laps[team.joukkue_id]?.length === 3 && (\r\n  <li key={`${team.joukkue_id}-combined`}>\r\n    Combined Time: {formatTime(getCombinedTime(team.joukkue_id))}\r\n  </li>\r\n)}\r\n\r\n        </ul>\r\n      </div>\r\n    ));\r\n  };\r\n  \r\nuseEffect(() => {\r\n    const allLapsCompleted = selectedGroup?.teams?.every((team) => {\r\n      const teamLaps = laps[team.joukkue_id] || [];\r\n      return teamLaps.length === 3;\r\n    });\r\n  \r\n    if (allLapsCompleted) {\r\n      setIsRunning(false);\r\n    }\r\n  }, [selectedGroup, laps]);\r\n\r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"max-times-container\">\r\n        <h4>Maximum Time for Each Task:</h4>\r\n        <ul>\r\n        {selectedGroup?.selectedTasks.map((task, index) => (\r\n  <li key={`${task.tehtävä_id}-${index}`}>\r\n    Task: {task.tehtävä_nimi}, Maximum Time: {formatTime(task.max_aika * 1000)}\r\n  </li>\r\n))}\r\n\r\n        </ul>\r\n      </div>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        {renderTeams()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}