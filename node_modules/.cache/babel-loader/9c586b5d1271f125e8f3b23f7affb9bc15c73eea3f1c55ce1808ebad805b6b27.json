{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Ajastin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Ajastin() {\n  _s();\n  const {\n    teamId\n  } = useParams();\n  const [elapsedTimes, setElapsedTimes] = useState({});\n  const [isRunning, setIsRunning] = useState(false);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    document.title = `Team ${teamId}`;\n    const newSocket = io('http://localhost:8000');\n    newSocket.on('connect', () => {\n      console.log('WebSocket connection is open.');\n    });\n    newSocket.on('disconnect', () => {\n      console.log('WebSocket connection is closed.');\n    });\n    newSocket.on('selectedGroupUpdate', updatedGroupData => {\n      console.log('Received updated group data:', updatedGroupData);\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      localStorage.setItem('selectedGroup', updatedGroupData);\n    });\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\n    if (storedSelectedGroup) {\n      const parsedData = JSON.parse(storedSelectedGroup);\n      setSelectedGroup(parsedData);\n    }\n    setSocket(newSocket);\n    return () => {\n      if (newSocket.connected) {\n        newSocket.disconnect();\n      }\n    };\n  }, [teamId]);\n  useEffect(() => {\n    let timers = {};\n    if (isRunning) {\n      timers = setInterval(() => {\n        setElapsedTimes(prevElapsedTimes => {\n          const updatedElapsedTimes = {};\n          for (const taskId in prevElapsedTimes) {\n            updatedElapsedTimes[taskId] = prevElapsedTimes[taskId] + 1;\n          }\n          return updatedElapsedTimes;\n        });\n      }, 10);\n    }\n    return () => {\n      clearInterval(timers);\n    };\n  }, [isRunning]);\n  useEffect(() => {\n    if (selectedGroup) {\n      const initialElapsedTimes = {};\n      for (const task of selectedGroup.selectedTasks) {\n        initialElapsedTimes[task.id] = 0;\n      }\n      setElapsedTimes(initialElapsedTimes);\n    }\n  }, [selectedGroup]);\n  const startTimer = () => {\n    setIsRunning(true);\n  };\n  const stopTimer = async taskId => {\n    setIsRunning(false);\n    const finishedTime = formatTime(elapsedTimes[taskId]);\n    console.log(`Elapsed Time for Task ${taskId}:`, elapsedTimes[taskId]);\n    console.log(`Finished Time for Task ${taskId}:`, finishedTime);\n    const finishedTimeData = {\n      teamId,\n      finishedTime,\n      era: selectedGroup.groupInfo,\n      taskId\n    };\n    console.log(`Sending finished time for Task ${taskId} to server:`, finishedTimeData);\n    if (socket) {\n      console.log('Socket is connected. Emitting finishedTime event...');\n      socket.emit('finishedTime', JSON.stringify(finishedTimeData));\n    }\n    if (selectedGroup) {\n      try {\n        const response = await fetch('http://localhost:3001/api/aikataulu', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            era: selectedGroup.groupInfo,\n            joukkueId: finishedTimeData.teamId,\n            aika: elapsedTimes[taskId],\n            taskId: finishedTimeData.taskId\n          })\n        });\n        if (!response.ok) {\n          console.error(`Failed to send finished time for Task ${taskId} to aikataulu:`, response.status);\n        }\n      } catch (error) {\n        console.error(`Error sending finished time for Task ${taskId} to aikataulu:`, error);\n      }\n    }\n  };\n  const resetTimer = () => {\n    setIsRunning(false);\n    const initialElapsedTimes = {};\n    for (const taskId in elapsedTimes) {\n      initialElapsedTimes[taskId] = 0;\n    }\n    setElapsedTimes(initialElapsedTimes);\n  };\n  const formatTime = timeInMilliseconds => {\n    const minutes = Math.floor(timeInMilliseconds / (60 * 100));\n    const seconds = Math.floor(timeInMilliseconds % (60 * 100) / 100);\n    const milliseconds = timeInMilliseconds % 100;\n    return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}:${milliseconds < 10 ? '0' : ''}${milliseconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Team ${teamId} Stopwatch`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), selectedGroup && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: selectedGroup.selectedTasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: `Selected Task: ${task.teht채v채_nimi}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Max Aika: \", formatTime(task.max_aika * 100)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: formatTime(elapsedTimes[task.id])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => startTimer(task.id),\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => stopTimer(task.id),\n            children: \"Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetTimer,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(Ajastin, \"XgX7UWWv1Uh4Lqjcom2oLdA2fNI=\", false, function () {\n  return [useParams];\n});\n_c = Ajastin;\nexport default Ajastin;\nvar _c;\n$RefreshReg$(_c, \"Ajastin\");","map":{"version":3,"names":["React","useState","useEffect","useParams","io","jsxDEV","_jsxDEV","Ajastin","_s","teamId","elapsedTimes","setElapsedTimes","isRunning","setIsRunning","selectedGroup","setSelectedGroup","socket","setSocket","document","title","newSocket","on","console","log","updatedGroupData","parsedData","JSON","parse","localStorage","setItem","storedSelectedGroup","getItem","connected","disconnect","timers","setInterval","prevElapsedTimes","updatedElapsedTimes","taskId","clearInterval","initialElapsedTimes","task","selectedTasks","id","startTimer","stopTimer","finishedTime","formatTime","finishedTimeData","era","groupInfo","emit","stringify","response","fetch","method","headers","body","joukkueId","aika","ok","error","status","resetTimer","timeInMilliseconds","minutes","Math","floor","seconds","milliseconds","children","fileName","_jsxFileName","lineNumber","columnNumber","map","teht채v채_nimi","max_aika","className","onClick","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/Ajastin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\n\r\nfunction Ajastin() {\r\n  const { teamId } = useParams();\r\n  const [elapsedTimes, setElapsedTimes] = useState({});\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  useEffect(() => {\r\n    document.title = `Team ${teamId}`;\r\n    const newSocket = io('http://localhost:8000');\r\n\r\n    newSocket.on('connect', () => {\r\n      console.log('WebSocket connection is open.');\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('WebSocket connection is closed.');\r\n    });\r\n\r\n    newSocket.on('selectedGroupUpdate', (updatedGroupData) => {\r\n      console.log('Received updated group data:', updatedGroupData);\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n\r\n      localStorage.setItem('selectedGroup', updatedGroupData);\r\n    });\r\n\r\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\r\n    if (storedSelectedGroup) {\r\n      const parsedData = JSON.parse(storedSelectedGroup);\r\n      setSelectedGroup(parsedData);\r\n    }\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      if (newSocket.connected) {\r\n        newSocket.disconnect();\r\n      }\r\n    };\r\n  }, [teamId]);\r\n\r\n  useEffect(() => {\r\n    let timers = {};\r\n    if (isRunning) {\r\n      timers = setInterval(() => {\r\n        setElapsedTimes((prevElapsedTimes) => {\r\n          const updatedElapsedTimes = {};\r\n          for (const taskId in prevElapsedTimes) {\r\n            updatedElapsedTimes[taskId] = prevElapsedTimes[taskId] + 1;\r\n          }\r\n          return updatedElapsedTimes;\r\n        });\r\n      }, 10);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timers);\r\n    };\r\n  }, [isRunning]);\r\n\r\n  useEffect(() => {\r\n    if (selectedGroup) {\r\n      const initialElapsedTimes = {};\r\n      for (const task of selectedGroup.selectedTasks) {\r\n        initialElapsedTimes[task.id] = 0;\r\n      }\r\n      setElapsedTimes(initialElapsedTimes);\r\n    }\r\n  }, [selectedGroup]);\r\n\r\n  const startTimer = () => {\r\n    setIsRunning(true);\r\n  };\r\n\r\n  const stopTimer = async (taskId) => {\r\n    setIsRunning(false);\r\n    const finishedTime = formatTime(elapsedTimes[taskId]);\r\n    console.log(`Elapsed Time for Task ${taskId}:`, elapsedTimes[taskId]);\r\n    console.log(`Finished Time for Task ${taskId}:`, finishedTime);\r\n    const finishedTimeData = {\r\n      teamId,\r\n      finishedTime,\r\n      era: selectedGroup.groupInfo,\r\n      taskId,\r\n    };\r\n    console.log(`Sending finished time for Task ${taskId} to server:`, finishedTimeData);\r\n    if (socket) {\r\n      console.log('Socket is connected. Emitting finishedTime event...');\r\n      socket.emit('finishedTime', JSON.stringify(finishedTimeData));\r\n    }\r\n\r\n    if (selectedGroup) {\r\n      try {\r\n        const response = await fetch('http://localhost:3001/api/aikataulu', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            era: selectedGroup.groupInfo,\r\n            joukkueId: finishedTimeData.teamId,\r\n            aika: elapsedTimes[taskId],\r\n            taskId: finishedTimeData.taskId,\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.error(`Failed to send finished time for Task ${taskId} to aikataulu:`, response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error sending finished time for Task ${taskId} to aikataulu:`, error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    setIsRunning(false);\r\n    const initialElapsedTimes = {};\r\n    for (const taskId in elapsedTimes) {\r\n      initialElapsedTimes[taskId] = 0;\r\n    }\r\n    setElapsedTimes(initialElapsedTimes);\r\n  };\r\n\r\n  const formatTime = (timeInMilliseconds) => {\r\n    const minutes = Math.floor(timeInMilliseconds / (60 * 100));\r\n    const seconds = Math.floor((timeInMilliseconds % (60 * 100)) / 100);\r\n    const milliseconds = timeInMilliseconds % 100;\r\n\r\n    return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}:${milliseconds < 10 ? '0' : ''}${milliseconds}`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{`Team ${teamId} Stopwatch`}</h2>\r\n      {selectedGroup && (\r\n        <div>\r\n          {selectedGroup.selectedTasks.map((task) => (\r\n            <div key={task.id}>\r\n              <h3>{`Selected Task: ${task.teht채v채_nimi}`}</h3>\r\n              <p>Max Aika: {formatTime(task.max_aika * 100)}</p>\r\n              <div className=\"timer\">\r\n                <span>{formatTime(elapsedTimes[task.id])}</span>\r\n              </div>\r\n              <div className=\"controls\">\r\n                <button onClick={() => startTimer(task.id)}>Start</button>\r\n                <button onClick={() => stopTimer(task.id)}>Stop</button>\r\n                <button onClick={resetTimer}>Reset</button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ajastin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}