{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Competition.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport '../css/Competition.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Competition() {\n  _s();\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [finishedTimes, setFinishedTimes] = useState({});\n  const [updatedGroupData, setUpdatedGroupData] = useState(null);\n  useEffect(() => {\n    const socket = io('http://localhost:8000');\n    socket.on('selectedGroupUpdate', updatedGroupData => {\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\n    });\n    socket.on('groupDataUpdate', updatedGroupData => {\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\n    });\n    socket.on('finishedTimeUpdate', finishedTimeData => {\n      console.log('Raw server response:', finishedTimeData);\n      try {\n        const parsedData = JSON.parse(finishedTimeData);\n        if (parsedData && parsedData.teamId && parsedData.finishedTime && parsedData.era) {\n          setFinishedTimes(prevFinishedTimes => {\n            var _prevFinishedTimes$pa;\n            const updatedFinishedTimes = {\n              ...prevFinishedTimes,\n              [parsedData.teamId]: {\n                ...prevFinishedTimes[parsedData.teamId],\n                [parsedData.era]: [...(((_prevFinishedTimes$pa = prevFinishedTimes[parsedData.teamId]) === null || _prevFinishedTimes$pa === void 0 ? void 0 : _prevFinishedTimes$pa[parsedData.era]) || []), {\n                  finishedTime: parsedData.finishedTime,\n                  era: parsedData.era,\n                  tehtava: parsedData.taskName\n                }]\n              }\n            };\n            localStorage.setItem('finishedTimes', JSON.stringify(updatedFinishedTimes));\n            console.log('Updated finishedTimes:', updatedFinishedTimes);\n            return updatedFinishedTimes;\n          });\n        } else {\n          console.error('Invalid finished time data:', parsedData);\n        }\n      } catch (error) {\n        console.error('Error handling finished time data:', error);\n      }\n    });\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\n    if (storedSelectedGroup) {\n      const parsedData = JSON.parse(storedSelectedGroup);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n    }\n    return () => {\n      if (socket.connected) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const storedFinishedTimes = localStorage.getItem('finishedTimes');\n    if (storedFinishedTimes) {\n      const parsedFinishedTimes = JSON.parse(storedFinishedTimes);\n      setFinishedTimes(parsedFinishedTimes);\n      console.log('Parsed Finished Times:', parsedFinishedTimes);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Competition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), updatedGroupData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: updatedGroupData.groupInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Selected Tasks: \", updatedGroupData.selectedTasks.map(task => `${task.tehtävä_nimi} (${task.max_aika})`).join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: updatedGroupData.teams.map(team => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: team.joukkue_nimi\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 5\n          }, this), Object.entries(finishedTimes[team.joukkue_id] || {}).map(([era, data]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: data.tehtava\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Finished Time: \", data.finishedTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 9\n            }, this)]\n          }, era, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 7\n          }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Members: \", team.jäsenet]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 5\n          }, this)]\n        }, team.joukkue_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 3\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No selected group available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(Competition, \"2Cjw4fJiUqIyV0ZzrHaJmYG7b/U=\");\n_c = Competition;\nexport default Competition;\nvar _c;\n$RefreshReg$(_c, \"Competition\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","Competition","_s","selectedGroup","setSelectedGroup","finishedTimes","setFinishedTimes","updatedGroupData","setUpdatedGroupData","socket","on","parsedData","JSON","parse","localStorage","setItem","stringify","finishedTimeData","console","log","teamId","finishedTime","era","prevFinishedTimes","_prevFinishedTimes$pa","updatedFinishedTimes","tehtava","taskName","error","storedSelectedGroup","getItem","connected","disconnect","storedFinishedTimes","parsedFinishedTimes","children","fileName","_jsxFileName","lineNumber","columnNumber","groupInfo","selectedTasks","map","task","tehtävä_nimi","max_aika","join","teams","team","joukkue_nimi","Object","entries","joukkue_id","data","jäsenet","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/Competition.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport '../css/Competition.css';\r\n\r\nfunction Competition() {\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  const [finishedTimes, setFinishedTimes] = useState({});\r\n  const [updatedGroupData, setUpdatedGroupData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const socket = io('http://localhost:8000');\r\n\r\n    socket.on('selectedGroupUpdate', (updatedGroupData) => {\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\r\n    });\r\n\r\n    socket.on('groupDataUpdate', (updatedGroupData) => {\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\r\n    });\r\n\r\n    socket.on('finishedTimeUpdate', (finishedTimeData) => {\r\n      console.log('Raw server response:', finishedTimeData);\r\n    \r\n      try {\r\n        const parsedData = JSON.parse(finishedTimeData);\r\n    \r\n        if (parsedData && parsedData.teamId && parsedData.finishedTime && parsedData.era) {\r\n          setFinishedTimes((prevFinishedTimes) => {\r\n            const updatedFinishedTimes = {\r\n              ...prevFinishedTimes,\r\n              [parsedData.teamId]: {\r\n                ...prevFinishedTimes[parsedData.teamId],\r\n                [parsedData.era]: [\r\n                  ...(prevFinishedTimes[parsedData.teamId]?.[parsedData.era] || []),\r\n                  {\r\n                    finishedTime: parsedData.finishedTime,\r\n                    era: parsedData.era,\r\n                    tehtava: parsedData.taskName,\r\n                  },\r\n                ],\r\n              },\r\n            };\r\n            \r\n            localStorage.setItem('finishedTimes', JSON.stringify(updatedFinishedTimes));\r\n            \r\n            console.log('Updated finishedTimes:', updatedFinishedTimes);\r\n            return updatedFinishedTimes;\r\n          });\r\n          \r\n        } else {\r\n          console.error('Invalid finished time data:', parsedData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error handling finished time data:', error);\r\n      }\r\n    });\r\n    \r\n    \r\n    \r\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\r\n    if (storedSelectedGroup) {\r\n      const parsedData = JSON.parse(storedSelectedGroup);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n    }\r\n\r\n    return () => {\r\n      if (socket.connected) {\r\n        socket.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const storedFinishedTimes = localStorage.getItem('finishedTimes');\r\n    if (storedFinishedTimes) {\r\n      const parsedFinishedTimes = JSON.parse(storedFinishedTimes);\r\n      setFinishedTimes(parsedFinishedTimes);\r\n      console.log('Parsed Finished Times:', parsedFinishedTimes);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Competition</h1>\r\n      {updatedGroupData ? (\r\n        <div>\r\n          <h2>{updatedGroupData.groupInfo}</h2>\r\n          <h3>Selected Tasks: {updatedGroupData.selectedTasks.map((task) => `${task.tehtävä_nimi} (${task.max_aika})`).join(', ')}</h3>\r\n          <ul>\r\n          {updatedGroupData.teams.map((team) => (\r\n  <div key={team.joukkue_id}>\r\n    <h3>{team.joukkue_nimi}</h3>\r\n    {Object.entries(finishedTimes[team.joukkue_id] || {}).map(([era, data]) => (\r\n      <div key={era}>\r\n        <h4>{data.tehtava}</h4>\r\n        <p>Finished Time: {data.finishedTime}</p>\r\n      </div>\r\n    ))}\r\n    <p>Members: {team.jäsenet}</p>\r\n  </div>\r\n))}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>No selected group available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Competition;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}