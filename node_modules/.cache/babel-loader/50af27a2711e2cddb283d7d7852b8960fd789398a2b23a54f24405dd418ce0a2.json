{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\Competition.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport '../css/Competition.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Competition() {\n  _s();\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [finishedTimes, setFinishedTimes] = useState({});\n  const [updatedGroupData, setUpdatedGroupData] = useState(null);\n  useEffect(() => {\n    const socket = io('http://localhost:8000');\n    socket.on('selectedGroupUpdate', updatedGroupData => {\n      console.log('Received updated group data:', updatedGroupData);\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\n    });\n    socket.on('groupDataUpdate', updatedGroupData => {\n      console.log('Received group data update:', updatedGroupData);\n      const parsedData = JSON.parse(updatedGroupData);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\n    });\n    socket.on('finishedTimeUpdate', finishedTimeData => {\n      console.log('Received finished time data:', finishedTimeData);\n      try {\n        const parsedData = JSON.parse(finishedTimeData);\n        console.log('Parsed finished time data:', parsedData);\n        if (parsedData && parsedData.teamId && parsedData.finishedTime && parsedData.era) {\n          setFinishedTimes(prevFinishedTimes => {\n            const updatedFinishedTimes = {\n              ...prevFinishedTimes,\n              [parsedData.teamId]: {\n                finishedTime: parsedData.finishedTime,\n                era: parsedData.era\n              }\n            };\n            localStorage.setItem('finishedTimes', JSON.stringify(updatedFinishedTimes));\n            console.log('Updated finishedTimes:', updatedFinishedTimes);\n            return updatedFinishedTimes;\n          });\n        } else {\n          console.error('Invalid finished time data:', parsedData);\n        }\n      } catch (error) {\n        console.error('Error parsing finished time data:', error);\n      }\n    });\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\n    if (storedSelectedGroup) {\n      const parsedData = JSON.parse(storedSelectedGroup);\n      setSelectedGroup(parsedData);\n      setUpdatedGroupData(parsedData);\n    }\n    return () => {\n      if (socket.connected) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const storedFinishedTimes = localStorage.getItem('finishedTimes');\n    if (storedFinishedTimes) {\n      const parsedFinishedTimes = JSON.parse(storedFinishedTimes);\n      console.log('Parsed Finished Times:', parsedFinishedTimes);\n      setFinishedTimes(parsedFinishedTimes);\n    }\n  }, []);\n  const getBackgroundColor = teamId => {\n    const time = finishedTimes[teamId];\n    if (!updatedGroupData || !updatedGroupData.teams) {\n      return 'transparent';\n    }\n    const teamsInSelectedGroup = updatedGroupData.teams;\n    const timesInSelectedGroup = teamsInSelectedGroup.filter(team => finishedTimes.hasOwnProperty(team.joukkue_id)).map(team => finishedTimes[team.joukkue_id]);\n    const sortedTimes = timesInSelectedGroup.sort((timeA, timeB) => {\n      const [minutesA, secondsA, millisecondsA] = timeA.split(':').map(Number);\n      const [minutesB, secondsB, millisecondsB] = timeB.split(':').map(Number);\n      if (minutesA !== minutesB) {\n        return minutesA - minutesB;\n      } else if (secondsA !== secondsB) {\n        return secondsA - secondsB;\n      } else {\n        return millisecondsA - millisecondsB;\n      }\n    });\n    const teamRank = sortedTimes.findIndex(t => t === time) + 1;\n    const tiedTeams = sortedTimes.filter(t => t === time);\n    if (tiedTeams.length > 1) {\n      return teamRank <= 3 ? ['gold', 'silver', 'bronze'][teamRank - 1] : 'transparent';\n    }\n    switch (teamRank) {\n      case 1:\n        return 'gold';\n      case 2:\n        return 'silver';\n      case 3:\n        return 'bronze';\n      default:\n        return 'transparent';\n    }\n  };\n  const getTeamTimeForEra = (teamId, era) => {\n    const teamData = finishedTimes[teamId];\n    if (teamData && teamData[era]) {\n      return teamData[era];\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Competition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), updatedGroupData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: updatedGroupData.groupInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Selected Task: \", updatedGroupData.selectedTask ? updatedGroupData.selectedTask.tehtävä_nimi : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Max Aika: \", updatedGroupData.selectedTask ? updatedGroupData.selectedTask.max_aika : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: updatedGroupData.teams.map(team => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: getBackgroundColor(team.joukkue_id),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: team.joukkue_nimi\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this), console.log(\"Time for Team\", team.joukkue_id, \":\", getTeamTimeForEra(team.joukkue_id, updatedGroupData.groupInfo)), getTeamTimeForEra(team.joukkue_id, updatedGroupData.groupInfo) && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Finished Time: \", getTeamTimeForEra(team.joukkue_id, updatedGroupData.groupInfo)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Members: \", team.jäsenet]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this)]\n        }, team.joukkue_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No selected group available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s(Competition, \"2Cjw4fJiUqIyV0ZzrHaJmYG7b/U=\");\n_c = Competition;\nexport default Competition;\nvar _c;\n$RefreshReg$(_c, \"Competition\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","Competition","_s","selectedGroup","setSelectedGroup","finishedTimes","setFinishedTimes","updatedGroupData","setUpdatedGroupData","socket","on","console","log","parsedData","JSON","parse","localStorage","setItem","stringify","finishedTimeData","teamId","finishedTime","era","prevFinishedTimes","updatedFinishedTimes","error","storedSelectedGroup","getItem","connected","disconnect","storedFinishedTimes","parsedFinishedTimes","getBackgroundColor","time","teams","teamsInSelectedGroup","timesInSelectedGroup","filter","team","hasOwnProperty","joukkue_id","map","sortedTimes","sort","timeA","timeB","minutesA","secondsA","millisecondsA","split","Number","minutesB","secondsB","millisecondsB","teamRank","findIndex","t","tiedTeams","length","getTeamTimeForEra","teamData","children","fileName","_jsxFileName","lineNumber","columnNumber","groupInfo","selectedTask","tehtävä_nimi","max_aika","className","joukkue_nimi","jäsenet","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/Competition.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport '../css/Competition.css';\r\nfunction Competition() {\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  const [finishedTimes, setFinishedTimes] = useState({});\r\n  const [updatedGroupData, setUpdatedGroupData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const socket = io('http://localhost:8000');\r\n\r\n    socket.on('selectedGroupUpdate', (updatedGroupData) => {\r\n      console.log('Received updated group data:', updatedGroupData);\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\r\n\r\n    });\r\n    \r\n    socket.on('groupDataUpdate', (updatedGroupData) => {\r\n      console.log('Received group data update:', updatedGroupData);\r\n      const parsedData = JSON.parse(updatedGroupData);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n      localStorage.setItem('selectedGroup', JSON.stringify(parsedData));\r\n    });\r\n\r\n    socket.on('finishedTimeUpdate', (finishedTimeData) => {\r\n      console.log('Received finished time data:', finishedTimeData);\r\n    \r\n      try {\r\n        const parsedData = JSON.parse(finishedTimeData);\r\n        console.log('Parsed finished time data:', parsedData);\r\n      \r\n        if (parsedData && parsedData.teamId && parsedData.finishedTime && parsedData.era) {\r\n          setFinishedTimes((prevFinishedTimes) => {\r\n            const updatedFinishedTimes = {\r\n              ...prevFinishedTimes,\r\n              [parsedData.teamId]: {\r\n                finishedTime: parsedData.finishedTime,\r\n                era: parsedData.era,\r\n              },\r\n            };\r\n      \r\n            localStorage.setItem('finishedTimes', JSON.stringify(updatedFinishedTimes));\r\n      \r\n            console.log('Updated finishedTimes:', updatedFinishedTimes);\r\n            return updatedFinishedTimes;\r\n          });\r\n        } else {\r\n          console.error('Invalid finished time data:', parsedData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing finished time data:', error);\r\n      }\r\n    });\r\n    \r\n    const storedSelectedGroup = localStorage.getItem('selectedGroup');\r\n    if (storedSelectedGroup) {\r\n      const parsedData = JSON.parse(storedSelectedGroup);\r\n      setSelectedGroup(parsedData);\r\n      setUpdatedGroupData(parsedData);\r\n    }\r\n\r\n    return () => {\r\n      if (socket.connected) {\r\n        socket.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const storedFinishedTimes = localStorage.getItem('finishedTimes');\r\n    if (storedFinishedTimes) {\r\n      const parsedFinishedTimes = JSON.parse(storedFinishedTimes);\r\n      console.log('Parsed Finished Times:', parsedFinishedTimes);\r\n      setFinishedTimes(parsedFinishedTimes);\r\n    }\r\n  }, []);\r\n\r\n  const getBackgroundColor = (teamId) => {\r\n    const time = finishedTimes[teamId];\r\n  \r\n    if (!updatedGroupData || !updatedGroupData.teams) {\r\n      return 'transparent';\r\n    }\r\n  \r\n    const teamsInSelectedGroup = updatedGroupData.teams;\r\n  \r\n    const timesInSelectedGroup = teamsInSelectedGroup\r\n      .filter((team) => finishedTimes.hasOwnProperty(team.joukkue_id))\r\n      .map((team) => finishedTimes[team.joukkue_id]);\r\n  \r\n    const sortedTimes = timesInSelectedGroup.sort((timeA, timeB) => {\r\n      const [minutesA, secondsA, millisecondsA] = timeA.split(':').map(Number);\r\n      const [minutesB, secondsB, millisecondsB] = timeB.split(':').map(Number);\r\n  \r\n      if (minutesA !== minutesB) {\r\n        return minutesA - minutesB;\r\n      } else if (secondsA !== secondsB) {\r\n        return secondsA - secondsB;\r\n      } else {\r\n        return millisecondsA - millisecondsB;\r\n      }\r\n    });\r\n  \r\n    const teamRank = sortedTimes.findIndex((t) => t === time) + 1;\r\n  \r\n    const tiedTeams = sortedTimes.filter((t) => t === time);\r\n  \r\n    if (tiedTeams.length > 1) {\r\n      return teamRank <= 3 ? ['gold', 'silver', 'bronze'][teamRank - 1] : 'transparent';\r\n    }\r\n  \r\n    switch (teamRank) {\r\n      case 1:\r\n        return 'gold';\r\n      case 2:\r\n        return 'silver';\r\n      case 3:\r\n        return 'bronze';\r\n      default:\r\n        return 'transparent';\r\n    }\r\n  };\r\n\r\n  const getTeamTimeForEra = (teamId, era) => {\r\n    const teamData = finishedTimes[teamId];\r\n  \r\n    if (teamData && teamData[era]) {\r\n      return teamData[era];\r\n    }\r\n  \r\n    return null;\r\n  };\r\n  \r\n  \r\n  \r\n  return (\r\n    <div>\r\n      <h1>Competition</h1>\r\n      {updatedGroupData ? (\r\n        <div>\r\n          <h2>{updatedGroupData.groupInfo}</h2>\r\n          <h3>Selected Task: {updatedGroupData.selectedTask ? updatedGroupData.selectedTask.tehtävä_nimi : 'None'}</h3>\r\n          <p>Max Aika: {updatedGroupData.selectedTask ? updatedGroupData.selectedTask.max_aika : 'N/A'}</p>\r\n          <ul>\r\n            {updatedGroupData.teams.map((team) => (\r\n              <li key={team.joukkue_id} className={getBackgroundColor(team.joukkue_id)}>\r\n                <h3>{team.joukkue_nimi}</h3>\r\n                {console.log(\"Time for Team\", team.joukkue_id, \":\", getTeamTimeForEra(team.joukkue_id, updatedGroupData.groupInfo))}\r\n                {getTeamTimeForEra(team.joukkue_id, updatedGroupData.groupInfo) && (\r\n                  <p>Finished Time: {getTeamTimeForEra(team.joukkue_id, updatedGroupData.groupInfo)}</p>\r\n                )}\r\n                <p>Members: {team.jäsenet}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>No selected group available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Competition;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE9DC,SAAS,CAAC,MAAM;IACd,MAAMY,MAAM,GAAGX,EAAE,CAAC,uBAAuB,CAAC;IAE1CW,MAAM,CAACC,EAAE,CAAC,qBAAqB,EAAGH,gBAAgB,IAAK;MACrDI,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEL,gBAAgB,CAAC;MAC7D,MAAMM,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACR,gBAAgB,CAAC;MAC/CH,gBAAgB,CAACS,UAAU,CAAC;MAC5BL,mBAAmB,CAACK,UAAU,CAAC;MAC/BG,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEH,IAAI,CAACI,SAAS,CAACL,UAAU,CAAC,CAAC;IAEnE,CAAC,CAAC;IAEFJ,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAGH,gBAAgB,IAAK;MACjDI,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEL,gBAAgB,CAAC;MAC5D,MAAMM,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACR,gBAAgB,CAAC;MAC/CH,gBAAgB,CAACS,UAAU,CAAC;MAC5BL,mBAAmB,CAACK,UAAU,CAAC;MAC/BG,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEH,IAAI,CAACI,SAAS,CAACL,UAAU,CAAC,CAAC;IACnE,CAAC,CAAC;IAEFJ,MAAM,CAACC,EAAE,CAAC,oBAAoB,EAAGS,gBAAgB,IAAK;MACpDR,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEO,gBAAgB,CAAC;MAE7D,IAAI;QACF,MAAMN,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACI,gBAAgB,CAAC;QAC/CR,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEC,UAAU,CAAC;QAErD,IAAIA,UAAU,IAAIA,UAAU,CAACO,MAAM,IAAIP,UAAU,CAACQ,YAAY,IAAIR,UAAU,CAACS,GAAG,EAAE;UAChFhB,gBAAgB,CAAEiB,iBAAiB,IAAK;YACtC,MAAMC,oBAAoB,GAAG;cAC3B,GAAGD,iBAAiB;cACpB,CAACV,UAAU,CAACO,MAAM,GAAG;gBACnBC,YAAY,EAAER,UAAU,CAACQ,YAAY;gBACrCC,GAAG,EAAET,UAAU,CAACS;cAClB;YACF,CAAC;YAEDN,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEH,IAAI,CAACI,SAAS,CAACM,oBAAoB,CAAC,CAAC;YAE3Eb,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEY,oBAAoB,CAAC;YAC3D,OAAOA,oBAAoB;UAC7B,CAAC,CAAC;QACJ,CAAC,MAAM;UACLb,OAAO,CAACc,KAAK,CAAC,6BAA6B,EAAEZ,UAAU,CAAC;QAC1D;MACF,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdd,OAAO,CAACc,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC,CAAC;IAEF,MAAMC,mBAAmB,GAAGV,YAAY,CAACW,OAAO,CAAC,eAAe,CAAC;IACjE,IAAID,mBAAmB,EAAE;MACvB,MAAMb,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACW,mBAAmB,CAAC;MAClDtB,gBAAgB,CAACS,UAAU,CAAC;MAC5BL,mBAAmB,CAACK,UAAU,CAAC;IACjC;IAEA,OAAO,MAAM;MACX,IAAIJ,MAAM,CAACmB,SAAS,EAAE;QACpBnB,MAAM,CAACoB,UAAU,CAAC,CAAC;MACrB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENhC,SAAS,CAAC,MAAM;IACd,MAAMiC,mBAAmB,GAAGd,YAAY,CAACW,OAAO,CAAC,eAAe,CAAC;IACjE,IAAIG,mBAAmB,EAAE;MACvB,MAAMC,mBAAmB,GAAGjB,IAAI,CAACC,KAAK,CAACe,mBAAmB,CAAC;MAC3DnB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEmB,mBAAmB,CAAC;MAC1DzB,gBAAgB,CAACyB,mBAAmB,CAAC;IACvC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAIZ,MAAM,IAAK;IACrC,MAAMa,IAAI,GAAG5B,aAAa,CAACe,MAAM,CAAC;IAElC,IAAI,CAACb,gBAAgB,IAAI,CAACA,gBAAgB,CAAC2B,KAAK,EAAE;MAChD,OAAO,aAAa;IACtB;IAEA,MAAMC,oBAAoB,GAAG5B,gBAAgB,CAAC2B,KAAK;IAEnD,MAAME,oBAAoB,GAAGD,oBAAoB,CAC9CE,MAAM,CAAEC,IAAI,IAAKjC,aAAa,CAACkC,cAAc,CAACD,IAAI,CAACE,UAAU,CAAC,CAAC,CAC/DC,GAAG,CAAEH,IAAI,IAAKjC,aAAa,CAACiC,IAAI,CAACE,UAAU,CAAC,CAAC;IAEhD,MAAME,WAAW,GAAGN,oBAAoB,CAACO,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAC9D,MAAM,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAACR,GAAG,CAACS,MAAM,CAAC;MACxE,MAAM,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGR,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACR,GAAG,CAACS,MAAM,CAAC;MAExE,IAAIJ,QAAQ,KAAKK,QAAQ,EAAE;QACzB,OAAOL,QAAQ,GAAGK,QAAQ;MAC5B,CAAC,MAAM,IAAIJ,QAAQ,KAAKK,QAAQ,EAAE;QAChC,OAAOL,QAAQ,GAAGK,QAAQ;MAC5B,CAAC,MAAM;QACL,OAAOJ,aAAa,GAAGK,aAAa;MACtC;IACF,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAGZ,WAAW,CAACa,SAAS,CAAEC,CAAC,IAAKA,CAAC,KAAKvB,IAAI,CAAC,GAAG,CAAC;IAE7D,MAAMwB,SAAS,GAAGf,WAAW,CAACL,MAAM,CAAEmB,CAAC,IAAKA,CAAC,KAAKvB,IAAI,CAAC;IAEvD,IAAIwB,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACxB,OAAOJ,QAAQ,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAACA,QAAQ,GAAG,CAAC,CAAC,GAAG,aAAa;IACnF;IAEA,QAAQA,QAAQ;MACd,KAAK,CAAC;QACJ,OAAO,MAAM;MACf,KAAK,CAAC;QACJ,OAAO,QAAQ;MACjB,KAAK,CAAC;QACJ,OAAO,QAAQ;MACjB;QACE,OAAO,aAAa;IACxB;EACF,CAAC;EAED,MAAMK,iBAAiB,GAAGA,CAACvC,MAAM,EAAEE,GAAG,KAAK;IACzC,MAAMsC,QAAQ,GAAGvD,aAAa,CAACe,MAAM,CAAC;IAEtC,IAAIwC,QAAQ,IAAIA,QAAQ,CAACtC,GAAG,CAAC,EAAE;MAC7B,OAAOsC,QAAQ,CAACtC,GAAG,CAAC;IACtB;IAEA,OAAO,IAAI;EACb,CAAC;EAID,oBACEtB,OAAA;IAAA6D,QAAA,gBACE7D,OAAA;MAAA6D,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnB1D,gBAAgB,gBACfP,OAAA;MAAA6D,QAAA,gBACE7D,OAAA;QAAA6D,QAAA,EAAKtD,gBAAgB,CAAC2D;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrCjE,OAAA;QAAA6D,QAAA,GAAI,iBAAe,EAACtD,gBAAgB,CAAC4D,YAAY,GAAG5D,gBAAgB,CAAC4D,YAAY,CAACC,YAAY,GAAG,MAAM;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7GjE,OAAA;QAAA6D,QAAA,GAAG,YAAU,EAACtD,gBAAgB,CAAC4D,YAAY,GAAG5D,gBAAgB,CAAC4D,YAAY,CAACE,QAAQ,GAAG,KAAK;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjGjE,OAAA;QAAA6D,QAAA,EACGtD,gBAAgB,CAAC2B,KAAK,CAACO,GAAG,CAAEH,IAAI,iBAC/BtC,OAAA;UAA0BsE,SAAS,EAAEtC,kBAAkB,CAACM,IAAI,CAACE,UAAU,CAAE;UAAAqB,QAAA,gBACvE7D,OAAA;YAAA6D,QAAA,EAAKvB,IAAI,CAACiC;UAAY;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAC3BtD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE0B,IAAI,CAACE,UAAU,EAAE,GAAG,EAAEmB,iBAAiB,CAACrB,IAAI,CAACE,UAAU,EAAEjC,gBAAgB,CAAC2D,SAAS,CAAC,CAAC,EAClHP,iBAAiB,CAACrB,IAAI,CAACE,UAAU,EAAEjC,gBAAgB,CAAC2D,SAAS,CAAC,iBAC7DlE,OAAA;YAAA6D,QAAA,GAAG,iBAAe,EAACF,iBAAiB,CAACrB,IAAI,CAACE,UAAU,EAAEjC,gBAAgB,CAAC2D,SAAS,CAAC;UAAA;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CACtF,eACDjE,OAAA;YAAA6D,QAAA,GAAG,WAAS,EAACvB,IAAI,CAACkC,OAAO;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GANvB3B,IAAI,CAACE,UAAU;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOpB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,gBAENjE,OAAA;MAAA6D,QAAA,EAAG;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACnC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC/D,EAAA,CAlKQD,WAAW;AAAAwE,EAAA,GAAXxE,WAAW;AAoKpB,eAAeA,WAAW;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}