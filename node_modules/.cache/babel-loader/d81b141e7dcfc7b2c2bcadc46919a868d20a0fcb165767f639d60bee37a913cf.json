{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState({});\n  const [lapCount, setLapCount] = useState({}); // State to track the lap count for each team\n  const intervalIdRef = useRef(null);\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      console.log('Received lap timer event:', lapTimerData);\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n      const currentElapsedTime = elapsedTime * 10; // Capture the current elapsed time when the lap timer is received\n\n      console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${currentElapsedTime} milliseconds`);\n\n      // Update the lap count for the team\n      setLapCount(prevLapCount => ({\n        ...prevLapCount,\n        [teamId]: (prevLapCount[teamId] || 0) + 1\n      }));\n\n      // Calculate the lap time by subtracting the start time and all previous laps\n      const lapTime = currentElapsedTime - laps.reduce((total, lap) => total + lap.lapTime, 0);\n\n      // Update the laps state with the new lap time\n      setLaps(prevLaps => {\n        const updatedLaps = {\n          ...prevLaps\n        };\n        updatedLaps[teamId] = [...(prevLaps[teamId] || []), {\n          taskName,\n          lapTime\n        }];\n        return updatedLaps;\n      });\n    };\n\n    // Listen for timerStart event from the server\n    socket.on('timerStart', startTimerHandler);\n\n    // Listen for lapTimer event from the server\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      // Clean up event listeners when the component unmounts\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    // Get the laps for the specific team\n    const teamLaps = laps.filter(lap => lap.teamId === teamId);\n    // Calculate the combined time for the team\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n    return combinedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.entries(laps).map(([teamId, teamLaps]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Team: \", teamId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: teamLaps.map((lap, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n            }, `${teamId}-${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 5\n          }, this)]\n        }, teamId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 3\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Combined Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.keys(lapCount).map(teamId => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Team: \", teamId, \", Combined Time: \", formatTime(getCombinedTime(teamId))]\n        }, teamId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"xy0GN5j6+1Co+jN4YoI+36srkjg=\");\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","console","log","lapTimerHandler","lapTimerData","teamId","taskName","error","currentElapsedTime","prevLapCount","lapTime","reduce","total","lap","prevLaps","updatedLaps","on","off","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","teamLaps","filter","combinedTime","totalTime","children","fileName","_jsxFileName","lineNumber","columnNumber","className","formatTime","Object","entries","map","index","keys","_c","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState({});\r\n\r\n  const [lapCount, setLapCount] = useState({}); // State to track the lap count for each team\r\n  const intervalIdRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\n    const lapTimerHandler = (lapTimerData) => {\r\n        console.log('Received lap timer event:', lapTimerData);\r\n      \r\n        const { teamId, taskName } = lapTimerData;\r\n      \r\n        if (!startTime) {\r\n          console.error('Error: startTime is not set.');\r\n          return;\r\n        }\r\n      \r\n        const currentElapsedTime = elapsedTime * 10; // Capture the current elapsed time when the lap timer is received\r\n      \r\n        console.log(`Team: ${teamId}, Task: ${taskName}, Lap Time: ${currentElapsedTime} milliseconds`);\r\n      \r\n        // Update the lap count for the team\r\n        setLapCount((prevLapCount) => ({\r\n          ...prevLapCount,\r\n          [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n        }));\r\n      \r\n        // Calculate the lap time by subtracting the start time and all previous laps\r\n        const lapTime = currentElapsedTime - laps.reduce((total, lap) => total + lap.lapTime, 0);\r\n      \r\n        // Update the laps state with the new lap time\r\n        setLaps((prevLaps) => {\r\n            const updatedLaps = { ...prevLaps };\r\n            updatedLaps[teamId] = [...(prevLaps[teamId] || []), { taskName, lapTime }];\r\n            return updatedLaps;\r\n          });\r\n          \r\n      };\r\n      \r\n      \r\n      \r\n\r\n    // Listen for timerStart event from the server\r\n    socket.on('timerStart', startTimerHandler);\r\n\r\n    // Listen for lapTimer event from the server\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      // Clean up event listeners when the component unmounts\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  const getCombinedTime = (teamId) => {\r\n    // Get the laps for the specific team\r\n    const teamLaps = laps.filter((lap) => lap.teamId === teamId);\r\n    // Calculate the combined time for the team\r\n    const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n    return combinedTime;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        <ul>\r\n        {Object.entries(laps).map(([teamId, teamLaps]) => (\r\n  <div key={teamId}>\r\n    <h4>Team: {teamId}</h4>\r\n    <ul>\r\n      {teamLaps.map((lap, index) => (\r\n        <li key={`${teamId}-${index}`}>\r\n          Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n))}\r\n\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h4>Combined Times:</h4>\r\n        <ul>\r\n          {Object.keys(lapCount).map((teamId) => (\r\n            <li key={teamId}>\r\n              Team: {teamId}, Combined Time: {formatTime(getCombinedTime(teamId))}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n  \r\n  \r\n\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}