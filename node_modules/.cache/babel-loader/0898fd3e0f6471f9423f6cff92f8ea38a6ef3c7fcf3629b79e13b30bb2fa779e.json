{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const calculateCombinedTimesByRound = () => {\n    const combinedTimesByRound = {};\n    times.forEach(time => {\n      const teamId = time.joukkue_id;\n      const round = time.era;\n      if (!combinedTimesByRound[round]) {\n        combinedTimesByRound[round] = {};\n      }\n      if (!combinedTimesByRound[round][teamId]) {\n        combinedTimesByRound[round][teamId] = 0;\n      }\n      combinedTimesByRound[round][teamId] += time.aika;\n    });\n    return combinedTimesByRound;\n  };\n  const findWinnersByRound = () => {\n    const combinedTimesByRound = calculateCombinedTimesByRound();\n    let allTeams = [];\n    let allTeamsByEra = {};\n\n    // Step 1: Get all teams and their combined times\n    times.forEach(time => {\n      const teamId = time.joukkue_id;\n      if (!allTeams[teamId]) {\n        allTeams[teamId] = 0;\n      }\n      allTeams[teamId] += time.aika;\n\n      // Step 2: Get all teams and their combined times by Era\n      const era = time.era;\n      if (!allTeamsByEra[era]) {\n        allTeamsByEra[era] = {};\n      }\n      if (!allTeamsByEra[era][teamId]) {\n        allTeamsByEra[era][teamId] = 0;\n      }\n      allTeamsByEra[era][teamId] += time.aika;\n    });\n    let allWinners = [];\n\n    // Step 3 and 4: Get winners in each era and exclude them from allTeams\n    Object.keys(allTeamsByEra).forEach(era => {\n      const eraTeams = allTeamsByEra[era];\n      const eraWinners = findRoundWinners(eraTeams);\n      allWinners.push(...eraWinners);\n\n      // Exclude winners from allTeams\n      eraWinners.forEach(winner => delete allTeams[winner.teamId]);\n    });\n\n    // Step 5: Get 6 best combined times from remaining teams in allTeams\n    const remainingTeams = Object.keys(allTeams).map(teamId => ({\n      teamId,\n      combinedTime: allTeams[teamId]\n    }));\n    const sortedRemainingTeams = remainingTeams.sort((a, b) => a.combinedTime - b.combinedTime);\n    const sixBestRemainingTeams = sortedRemainingTeams.slice(0, 6);\n\n    // Step 6: Add 6 best remaining teams to Winners\n    allWinners.push(...sixBestRemainingTeams);\n    console.log('Winners:', allWinners);\n    console.log('All Teams:', remainingTeams);\n  };\n  const handleLopetaClick = async () => {\n    try {\n      const {\n        allWinners,\n        remainingTeams\n      } = findWinnersByRound();\n      console.log('Winners:', allWinners);\n      console.log('All Teams:', remainingTeams);\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","error","console","calculateCombinedTimesByRound","combinedTimesByRound","forEach","time","teamId","joukkue_id","round","era","aika","findWinnersByRound","allTeams","allTeamsByEra","allWinners","Object","keys","eraTeams","eraWinners","findRoundWinners","push","winner","remainingTeams","map","combinedTime","sortedRemainingTeams","sort","a","b","sixBestRemainingTeams","slice","log","handleLopetaClick","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const calculateCombinedTimesByRound = () => {\r\n    const combinedTimesByRound = {};\r\n\r\n    times.forEach((time) => {\r\n      const teamId = time.joukkue_id;\r\n      const round = time.era;\r\n\r\n      if (!combinedTimesByRound[round]) {\r\n        combinedTimesByRound[round] = {};\r\n      }\r\n\r\n      if (!combinedTimesByRound[round][teamId]) {\r\n        combinedTimesByRound[round][teamId] = 0;\r\n      }\r\n\r\n      combinedTimesByRound[round][teamId] += time.aika;\r\n    });\r\n\r\n    return combinedTimesByRound;\r\n  };\r\n\r\n  const findWinnersByRound = () => {\r\n    const combinedTimesByRound = calculateCombinedTimesByRound();\r\n    let allTeams = [];\r\n    let allTeamsByEra = {};\r\n  \r\n    // Step 1: Get all teams and their combined times\r\n    times.forEach((time) => {\r\n      const teamId = time.joukkue_id;\r\n  \r\n      if (!allTeams[teamId]) {\r\n        allTeams[teamId] = 0;\r\n      }\r\n  \r\n      allTeams[teamId] += time.aika;\r\n  \r\n      // Step 2: Get all teams and their combined times by Era\r\n      const era = time.era;\r\n      if (!allTeamsByEra[era]) {\r\n        allTeamsByEra[era] = {};\r\n      }\r\n  \r\n      if (!allTeamsByEra[era][teamId]) {\r\n        allTeamsByEra[era][teamId] = 0;\r\n      }\r\n  \r\n      allTeamsByEra[era][teamId] += time.aika;\r\n    });\r\n  \r\n    let allWinners = [];\r\n  \r\n    // Step 3 and 4: Get winners in each era and exclude them from allTeams\r\n    Object.keys(allTeamsByEra).forEach((era) => {\r\n      const eraTeams = allTeamsByEra[era];\r\n      const eraWinners = findRoundWinners(eraTeams);\r\n      allWinners.push(...eraWinners);\r\n  \r\n      // Exclude winners from allTeams\r\n      eraWinners.forEach((winner) => delete allTeams[winner.teamId]);\r\n    });\r\n  \r\n    // Step 5: Get 6 best combined times from remaining teams in allTeams\r\n    const remainingTeams = Object.keys(allTeams).map((teamId) => ({\r\n      teamId,\r\n      combinedTime: allTeams[teamId],\r\n    }));\r\n  \r\n    const sortedRemainingTeams = remainingTeams.sort((a, b) => a.combinedTime - b.combinedTime);\r\n    const sixBestRemainingTeams = sortedRemainingTeams.slice(0, 6);\r\n  \r\n    // Step 6: Add 6 best remaining teams to Winners\r\n    allWinners.push(...sixBestRemainingTeams);\r\n  \r\n    console.log('Winners:', allWinners);\r\n    console.log('All Teams:', remainingTeams);\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n\r\nconst handleLopetaClick = async () => {\r\n  try {\r\n    const { allWinners, remainingTeams } = findWinnersByRound();\r\n\r\n    console.log('Winners:', allWinners);\r\n    console.log('All Teams:', remainingTeams);\r\n  } catch (error) {\r\n    console.error('Error handling lopeta click:', error);\r\n  }\r\n};\r\n\r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}