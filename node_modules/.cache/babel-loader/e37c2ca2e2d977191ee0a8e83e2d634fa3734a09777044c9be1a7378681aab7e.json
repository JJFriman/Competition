{"ast":null,"code":"let socket;\nlet sendTaskDataCallback;\nexport function initializeWebSocket() {\n  socket = new WebSocket('ws://localhost:8000');\n  socket.onopen = () => {\n    console.log('WebSocket connection is open.');\n    if (sendTaskDataCallback) {\n      sendTaskDataCallback();\n      sendTaskDataCallback = null; // Reset the callback after it's used\n    }\n  };\n\n  socket.onclose = () => {\n    console.log('WebSocket connection is closed.');\n  };\n}\nexport function sendSelectedGroupData(selectedGroupData) {\n  if (socket && socket.readyState === WebSocket.OPEN) {\n    const message = JSON.stringify(selectedGroupData);\n    socket.send(message);\n  } else {\n    console.error('WebSocket connection is not open');\n  }\n}\nexport function sendSelectedTaskData(selectedTaskData) {\n  if (socket && socket.readyState === WebSocket.OPEN) {\n    const message = JSON.stringify(selectedTaskData);\n    socket.send(message);\n  } else if (socket && socket.readyState === WebSocket.CONNECTING) {\n    // If the connection is still opening, add a callback to send the message when it's open\n    sendTaskDataCallback = () => {\n      sendSelectedTaskData(selectedTaskData);\n    };\n  } else {\n    console.error('WebSocket connection is not open');\n  }\n}","map":{"version":3,"names":["socket","sendTaskDataCallback","initializeWebSocket","WebSocket","onopen","console","log","onclose","sendSelectedGroupData","selectedGroupData","readyState","OPEN","message","JSON","stringify","send","error","sendSelectedTaskData","selectedTaskData","CONNECTING"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/WebSocketUtils.js"],"sourcesContent":["let socket;\r\nlet sendTaskDataCallback;\r\n\r\nexport function initializeWebSocket() {\r\n  socket = new WebSocket('ws://localhost:8000');\r\n\r\n  socket.onopen = () => {\r\n    console.log('WebSocket connection is open.');\r\n    if (sendTaskDataCallback) {\r\n      sendTaskDataCallback();\r\n      sendTaskDataCallback = null; // Reset the callback after it's used\r\n    }\r\n  };\r\n\r\n  socket.onclose = () => {\r\n    console.log('WebSocket connection is closed.');\r\n  };\r\n}\r\n\r\nexport function sendSelectedGroupData(selectedGroupData) {\r\n  if (socket && socket.readyState === WebSocket.OPEN) {\r\n    const message = JSON.stringify(selectedGroupData);\r\n    socket.send(message);\r\n  } else {\r\n    console.error('WebSocket connection is not open');\r\n  }\r\n}\r\n\r\nexport function sendSelectedTaskData(selectedTaskData) {\r\n  if (socket && socket.readyState === WebSocket.OPEN) {\r\n    const message = JSON.stringify(selectedTaskData);\r\n    socket.send(message);\r\n  } else if (socket && socket.readyState === WebSocket.CONNECTING) {\r\n    // If the connection is still opening, add a callback to send the message when it's open\r\n    sendTaskDataCallback = () => {\r\n      sendSelectedTaskData(selectedTaskData);\r\n    };\r\n  } else {\r\n    console.error('WebSocket connection is not open');\r\n  }\r\n}\r\n"],"mappings":"AAAA,IAAIA,MAAM;AACV,IAAIC,oBAAoB;AAExB,OAAO,SAASC,mBAAmBA,CAAA,EAAG;EACpCF,MAAM,GAAG,IAAIG,SAAS,CAAC,qBAAqB,CAAC;EAE7CH,MAAM,CAACI,MAAM,GAAG,MAAM;IACpBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,IAAIL,oBAAoB,EAAE;MACxBA,oBAAoB,CAAC,CAAC;MACtBA,oBAAoB,GAAG,IAAI,CAAC,CAAC;IAC/B;EACF,CAAC;;EAEDD,MAAM,CAACO,OAAO,GAAG,MAAM;IACrBF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAChD,CAAC;AACH;AAEA,OAAO,SAASE,qBAAqBA,CAACC,iBAAiB,EAAE;EACvD,IAAIT,MAAM,IAAIA,MAAM,CAACU,UAAU,KAAKP,SAAS,CAACQ,IAAI,EAAE;IAClD,MAAMC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACL,iBAAiB,CAAC;IACjDT,MAAM,CAACe,IAAI,CAACH,OAAO,CAAC;EACtB,CAAC,MAAM;IACLP,OAAO,CAACW,KAAK,CAAC,kCAAkC,CAAC;EACnD;AACF;AAEA,OAAO,SAASC,oBAAoBA,CAACC,gBAAgB,EAAE;EACrD,IAAIlB,MAAM,IAAIA,MAAM,CAACU,UAAU,KAAKP,SAAS,CAACQ,IAAI,EAAE;IAClD,MAAMC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACI,gBAAgB,CAAC;IAChDlB,MAAM,CAACe,IAAI,CAACH,OAAO,CAAC;EACtB,CAAC,MAAM,IAAIZ,MAAM,IAAIA,MAAM,CAACU,UAAU,KAAKP,SAAS,CAACgB,UAAU,EAAE;IAC/D;IACAlB,oBAAoB,GAAGA,CAAA,KAAM;MAC3BgB,oBAAoB,CAACC,gBAAgB,CAAC;IACxC,CAAC;EACH,CAAC,MAAM;IACLb,OAAO,CAACW,KAAK,CAAC,kCAAkC,CAAC;EACnD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}