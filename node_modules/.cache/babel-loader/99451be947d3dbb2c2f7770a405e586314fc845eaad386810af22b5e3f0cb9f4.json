{"ast":null,"code":"const mysql = require('mysql');\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'kilpailu'\n});\ndb.connect(err => {\n  if (err) {\n    console.error('Error connecting to MySQL database:', err);\n  } else {\n    console.log('Connected to MySQL database');\n  }\n});\nfunction createJoukkue(newJoukkue) {\n  return new Promise((resolve, reject) => {\n    const {\n      joukkue_nimi,\n      jäsenet,\n      kaupunki,\n      osallistumis_nro,\n      semifinalist,\n      finalist,\n      kerailyera\n    } = newJoukkue;\n    const query = 'INSERT INTO joukkueet (joukkue_nimi, jäsenet, kaupunki, osallistumis_nro, semifinalist, finalist, kerailyera) VALUES (?, ?, ?, ?, ?, ?)';\n    db.query(query, [joukkue_nimi, jäsenet, kaupunki, osallistumis_nro, semifinalist, finalist, kerailyera], (err, results) => {\n      if (err) {\n        reject(err);\n      } else {\n        const insertedJoukkueId = results.insertId;\n        const selectQuery = 'SELECT * FROM joukkueet WHERE joukkue_id = ?';\n        db.query(selectQuery, [insertedJoukkueId], (selectErr, selectResults) => {\n          if (selectErr) {\n            reject(selectErr);\n          } else {\n            resolve(selectResults[0]);\n          }\n        });\n      }\n    });\n  });\n}\nasync function generateUniqueOsallistumisNro() {\n  let uniqueOsallistumisNro;\n  do {\n    uniqueOsallistumisNro = Math.floor(Math.random() * 1000);\n    const isUnique = await checkOsallistumisNroIsUnique(uniqueOsallistumisNro);\n    if (isUnique) {\n      break;\n    }\n  } while (true);\n  return uniqueOsallistumisNro;\n}\nasync function checkOsallistumisNroIsUnique(osallistumisNro) {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT * FROM joukkueet WHERE osallistumis_nro = ?';\n    db.query(query, [osallistumisNro], (err, results) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(results.length === 0);\n      }\n    });\n  });\n}\nasync function generateUniqueKerailyEra() {\n  let uniqueKerailyEra;\n  do {\n    uniqueKerailyEra = Math.floor(Math.random() * 1000);\n    const isUnique = await checkKerailyEraIsUnique(uniqueKerailyEra);\n    if (isUnique) {\n      break;\n    }\n  } while (true);\n  return uniqueKerailyEra;\n}\nasync function checkKerailyEraIsUnique(kerailyEra) {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT * FROM joukkueet WHERE kerailyera = ?';\n    db.query(query, [kerailyEra], (err, results) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(results.length === 0);\n      }\n    });\n  });\n}\nasync function generateUniqueSemifinalist() {\n  let uniqueSemifinalist;\n  do {\n    uniqueSemifinalist = Math.floor(Math.random() * 1000);\n    const isUnique = await checkSemifinalistIsUnique(uniqueSemifinalist);\n    if (isUnique) {\n      break;\n    }\n  } while (true);\n  return uniqueSemifinalist;\n}\nasync function checkSemifinalistIsUnique(semifinalist) {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT * FROM joukkueet WHERE semifinalist = ?';\n    db.query(query, [semifinalist], (err, results) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(results.length === 0);\n      }\n    });\n  });\n}\nfunction getAllJoukkueet() {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT * FROM joukkueet';\n    db.query(query, (err, results) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(results);\n      }\n    });\n  });\n}\nfunction getJoukkueById(joukkueId) {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT * FROM joukkueet WHERE joukkue_id = ?';\n    db.query(query, [joukkueId], (err, results) => {\n      if (err) {\n        reject(err);\n      } else if (results.length === 0) {\n        resolve(null);\n      } else {\n        resolve(results[0]);\n      }\n    });\n  });\n}\nfunction updateJoukkue(joukkueId, updatedJoukkue) {\n  return new Promise((resolve, reject) => {\n    const {\n      kerailyera,\n      ...rest\n    } = updatedJoukkue;\n    if (Object.keys(rest).length === 0) {\n      const query = 'UPDATE joukkueet SET kerailyera = ? WHERE joukkue_id = ?';\n      db.query(query, [kerailyera, joukkueId], (err, results) => {\n        if (err) {\n          console.error('Error in updateJoukkue query:', err);\n          reject(err);\n        } else if (results.affectedRows === 0) {\n          console.log('No rows affected in updateJoukkue');\n          resolve(null);\n        } else {\n          console.log('Update successful in updateJoukkue');\n          resolve({\n            joukkue_id: joukkueId,\n            kerailyera,\n            ...rest\n          });\n        }\n      });\n    } else {\n      const updateFields = Object.keys(rest).map(key => `${key} = ?`).join(', ');\n      const query = `UPDATE joukkueet SET ${updateFields}, kerailyera = ? WHERE joukkue_id = ?`;\n      const values = [...Object.values(rest), kerailyera, joukkueId];\n      db.query(query, values, (err, results) => {\n        if (err) {\n          console.error('Error in updateJoukkue query:', err);\n          reject(err);\n        } else if (results.affectedRows === 0) {\n          console.log('No rows affected in updateJoukkue');\n          resolve(null);\n        } else {\n          console.log('Update successful in updateJoukkue');\n          resolve({\n            joukkue_id: joukkueId,\n            ...updatedJoukkue\n          });\n        }\n      });\n    }\n  });\n}\nfunction updateSemifinalist(joukkueId, updatedFields) {\n  return new Promise((resolve, reject) => {\n    const newSemifinalist = updatedFields.semifinalist || generateUniqueSemifinalist();\n    const query = 'UPDATE joukkueet SET semifinalist = ? WHERE joukkue_id = ?';\n    db.query(query, [newSemifinalist, joukkueId], (err, results) => {\n      if (err) {\n        console.error('Error in updateSemifinalist query:', err);\n        reject(err);\n      } else if (results.affectedRows === 0) {\n        console.log('No rows affected in updateSemifinalist');\n        resolve(null);\n      } else {\n        console.log('Update successful in updateSemifinalist');\n        resolve({\n          joukkue_id: joukkueId,\n          semifinalist: newSemifinalist\n        });\n      }\n    });\n  });\n}\nfunction deleteJoukkue(joukkueId) {\n  return new Promise((resolve, reject) => {\n    const query = 'DELETE FROM joukkueet WHERE joukkue_id = ?';\n    db.query(query, [joukkueId], (err, results) => {\n      if (err) {\n        reject(err);\n      } else if (results.affectedRows === 0) {\n        resolve(null);\n      } else {\n        resolve({\n          joukkue_id: joukkueId\n        });\n      }\n    });\n  });\n}\nfunction getAllTehtävät() {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT * FROM tehtävät';\n    db.query(query, (err, results) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(results);\n      }\n    });\n  });\n}\nfunction createTehtävä(newTehtävä) {\n  return new Promise((resolve, reject) => {\n    const {\n      tehtävä_nimi,\n      max_aika\n    } = newTehtävä;\n    const insertQuery = 'INSERT INTO tehtävät (tehtävä_nimi, max_aika) VALUES (?, ?)';\n    db.query(insertQuery, [tehtävä_nimi, max_aika], (err, results) => {\n      if (err) {\n        reject(err);\n      } else {\n        const insertedTehtäväId = results.insertId;\n        const selectQuery = 'SELECT * FROM tehtävät WHERE id = ?';\n        db.query(selectQuery, [insertedTehtäväId], (selectErr, selectResults) => {\n          if (selectErr) {\n            reject(selectErr);\n          } else {\n            resolve(selectResults[0]);\n          }\n        });\n      }\n    });\n  });\n}\nfunction deleteTehtävä(tehtäväId) {\n  return new Promise((resolve, reject) => {\n    const query = 'DELETE FROM tehtävät WHERE id = ?';\n    db.query(query, [tehtäväId], (err, results) => {\n      if (err) {\n        reject(err);\n      } else if (results.affectedRows === 0) {\n        resolve(null);\n      } else {\n        resolve({\n          id: tehtäväId\n        });\n      }\n    });\n  });\n}\nfunction updateTehtävä(tehtäväId, updatedTehtävä) {\n  return new Promise((resolve, reject) => {\n    const {\n      tehtävä_nimi,\n      max_aika\n    } = updatedTehtävä;\n    const query = 'UPDATE tehtävät SET tehtävä_nimi = ?, max_aika = ? WHERE id = ?';\n    db.query(query, [tehtävä_nimi, max_aika, tehtäväId], (err, results) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(results.affectedRows > 0);\n      }\n    });\n  });\n}\nfunction getTehtäväById(tehtäväId) {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT * FROM tehtävät WHERE id = ?';\n    db.query(query, [tehtäväId], (err, results) => {\n      if (err) {\n        reject(err);\n      } else if (results.length === 0) {\n        resolve(null);\n      } else {\n        resolve(results[0]);\n      }\n    });\n  });\n}\nfunction insertAikataulu(era, tehtava, joukkue_id, aika) {\n  return new Promise((resolve, reject) => {\n    const query = 'INSERT INTO aikataulu (era, tehtava, joukkue_id, aika) VALUES (?, ?, ?, ?)';\n    db.query(query, [era, tehtava, joukkue_id, aika], (err, results) => {\n      if (err) {\n        console.error('Error inserting time into aikataulu:', err);\n        reject(err);\n      } else {\n        resolve(results);\n      }\n    });\n  });\n}\nfunction getAllTimes() {\n  return new Promise((resolve, reject) => {\n    const query = 'SELECT * FROM aikataulu';\n    db.query(query, (err, results) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(results);\n      }\n    });\n  });\n}\nmodule.exports = {\n  createJoukkue,\n  generateUniqueOsallistumisNro,\n  generateUniqueKerailyEra,\n  generateUniqueSemifinalist,\n  getAllJoukkueet,\n  getJoukkueById,\n  updateJoukkue,\n  deleteJoukkue,\n  getAllTehtävät,\n  createTehtävä,\n  deleteTehtävä,\n  updateTehtävä,\n  getTehtäväById,\n  insertAikataulu,\n  getAllTimes,\n  updateSemifinalist\n};","map":{"version":3,"names":["mysql","require","db","createConnection","host","user","password","database","connect","err","console","error","log","createJoukkue","newJoukkue","Promise","resolve","reject","joukkue_nimi","jäsenet","kaupunki","osallistumis_nro","semifinalist","finalist","kerailyera","query","results","insertedJoukkueId","insertId","selectQuery","selectErr","selectResults","generateUniqueOsallistumisNro","uniqueOsallistumisNro","Math","floor","random","isUnique","checkOsallistumisNroIsUnique","osallistumisNro","length","generateUniqueKerailyEra","uniqueKerailyEra","checkKerailyEraIsUnique","kerailyEra","generateUniqueSemifinalist","uniqueSemifinalist","checkSemifinalistIsUnique","getAllJoukkueet","getJoukkueById","joukkueId","updateJoukkue","updatedJoukkue","rest","Object","keys","affectedRows","joukkue_id","updateFields","map","key","join","values","updateSemifinalist","updatedFields","newSemifinalist","deleteJoukkue","getAllTehtävät","createTehtävä","newTehtävä","tehtävä_nimi","max_aika","insertQuery","insertedTehtäväId","deleteTehtävä","tehtäväId","id","updateTehtävä","updatedTehtävä","getTehtäväById","insertAikataulu","era","tehtava","aika","getAllTimes","module","exports"],"sources":["C:/xampp/htdocs/kilpailu/src/Backend/Data.js"],"sourcesContent":["const mysql = require('mysql');\r\n\r\nconst db = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'root',\r\n    password: '',\r\n    database: 'kilpailu',\r\n  });\r\n\r\n  db.connect((err) => {\r\n    if (err) {\r\n      console.error('Error connecting to MySQL database:', err);\r\n    } else {\r\n      console.log('Connected to MySQL database');\r\n    }\r\n  });\r\n\r\n  function createJoukkue(newJoukkue) {\r\n    return new Promise((resolve, reject) => {\r\n      const {\r\n        joukkue_nimi,\r\n        jäsenet,\r\n        kaupunki,\r\n        osallistumis_nro,\r\n        semifinalist,\r\n        finalist,\r\n        kerailyera\r\n      } = newJoukkue;\r\n      const query = 'INSERT INTO joukkueet (joukkue_nimi, jäsenet, kaupunki, osallistumis_nro, semifinalist, finalist, kerailyera) VALUES (?, ?, ?, ?, ?, ?)';\r\n      db.query(query, [joukkue_nimi, jäsenet, kaupunki, osallistumis_nro, semifinalist, finalist, kerailyera], (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          const insertedJoukkueId = results.insertId;\r\n          const selectQuery = 'SELECT * FROM joukkueet WHERE joukkue_id = ?';\r\n          db.query(selectQuery, [insertedJoukkueId], (selectErr, selectResults) => {\r\n            if (selectErr) {\r\n              reject(selectErr);\r\n            } else {\r\n              resolve(selectResults[0]);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n\r\n  async function generateUniqueOsallistumisNro() {\r\n    let uniqueOsallistumisNro;\r\n    do {\r\n      uniqueOsallistumisNro = Math.floor(Math.random() * 1000);\r\n      const isUnique = await checkOsallistumisNroIsUnique(uniqueOsallistumisNro);\r\n      if (isUnique) {\r\n        break;\r\n      }\r\n    } while (true);\r\n    return uniqueOsallistumisNro;\r\n  }\r\n  \r\n  async function checkOsallistumisNroIsUnique(osallistumisNro) {\r\n    return new Promise((resolve, reject) => {\r\n      const query = 'SELECT * FROM joukkueet WHERE osallistumis_nro = ?';\r\n      db.query(query, [osallistumisNro], (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(results.length === 0);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  async function generateUniqueKerailyEra() {\r\n    let uniqueKerailyEra;\r\n    do {\r\n      uniqueKerailyEra = Math.floor(Math.random() * 1000);\r\n      const isUnique = await checkKerailyEraIsUnique(uniqueKerailyEra);\r\n      if (isUnique) {\r\n        break;\r\n      }\r\n    } while (true);\r\n    return uniqueKerailyEra;\r\n  }\r\n  \r\n  async function checkKerailyEraIsUnique(kerailyEra) {\r\n    return new Promise((resolve, reject) => {\r\n      const query = 'SELECT * FROM joukkueet WHERE kerailyera = ?';\r\n      db.query(query, [kerailyEra], (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(results.length === 0);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  async function generateUniqueSemifinalist() {\r\n    let uniqueSemifinalist;\r\n    do {\r\n      uniqueSemifinalist = Math.floor(Math.random() * 1000);\r\n      const isUnique = await checkSemifinalistIsUnique(uniqueSemifinalist);\r\n      if (isUnique) {\r\n        break;\r\n      }\r\n    } while (true);\r\n    return uniqueSemifinalist;\r\n  }\r\n  \r\n  async function checkSemifinalistIsUnique(semifinalist) {\r\n    return new Promise((resolve, reject) => {\r\n      const query = 'SELECT * FROM joukkueet WHERE semifinalist = ?';\r\n      db.query(query, [semifinalist], (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(results.length === 0);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  \r\n  function getAllJoukkueet() {\r\n    return new Promise((resolve, reject) => {\r\n      const query = 'SELECT * FROM joukkueet';\r\n      db.query(query, (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(results);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  function getJoukkueById(joukkueId) {\r\n    return new Promise((resolve, reject) => {\r\n      const query = 'SELECT * FROM joukkueet WHERE joukkue_id = ?';\r\n      db.query(query, [joukkueId], (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else if (results.length === 0) {\r\n          resolve(null);\r\n        } else {\r\n          resolve(results[0]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\nfunction updateJoukkue(joukkueId, updatedJoukkue) {\r\n  return new Promise((resolve, reject) => {\r\n    const { kerailyera, ...rest } = updatedJoukkue;\r\n\r\n    if (Object.keys(rest).length === 0) {\r\n      const query = 'UPDATE joukkueet SET kerailyera = ? WHERE joukkue_id = ?';\r\n      db.query(query, [kerailyera, joukkueId], (err, results) => {\r\n        if (err) {\r\n          console.error('Error in updateJoukkue query:', err);\r\n          reject(err);\r\n        } else if (results.affectedRows === 0) {\r\n          console.log('No rows affected in updateJoukkue');\r\n          resolve(null);\r\n        } else {\r\n          console.log('Update successful in updateJoukkue');\r\n          resolve({ joukkue_id: joukkueId, kerailyera, ...rest });\r\n        }\r\n      });\r\n    } else {\r\n      const updateFields = Object.keys(rest)\r\n        .map((key) => `${key} = ?`)\r\n        .join(', ');\r\n\r\n      const query = `UPDATE joukkueet SET ${updateFields}, kerailyera = ? WHERE joukkue_id = ?`;\r\n\r\n      const values = [...Object.values(rest), kerailyera, joukkueId];\r\n\r\n      db.query(query, values, (err, results) => {\r\n        if (err) {\r\n          console.error('Error in updateJoukkue query:', err);\r\n          reject(err);\r\n        } else if (results.affectedRows === 0) {\r\n          console.log('No rows affected in updateJoukkue');\r\n          resolve(null);\r\n        } else {\r\n          console.log('Update successful in updateJoukkue');\r\n          resolve({ joukkue_id: joukkueId, ...updatedJoukkue });\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n function updateSemifinalist(joukkueId, updatedFields) {\r\n  return new Promise((resolve, reject) => {\r\n    const newSemifinalist = updatedFields.semifinalist || generateUniqueSemifinalist();\r\n\r\n    const query = 'UPDATE joukkueet SET semifinalist = ? WHERE joukkue_id = ?';\r\n    db.query(query, [newSemifinalist, joukkueId], (err, results) => {\r\n      if (err) {\r\n        console.error('Error in updateSemifinalist query:', err);\r\n        reject(err);\r\n      } else if (results.affectedRows === 0) {\r\n        console.log('No rows affected in updateSemifinalist');\r\n        resolve(null);\r\n      } else {\r\n        console.log('Update successful in updateSemifinalist');\r\n        resolve({ joukkue_id: joukkueId, semifinalist: newSemifinalist });\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n  function deleteJoukkue(joukkueId) {\r\n    return new Promise((resolve, reject) => {\r\n      const query = 'DELETE FROM joukkueet WHERE joukkue_id = ?';\r\n      db.query(query, [joukkueId], (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else if (results.affectedRows === 0) {\r\n          resolve(null);\r\n        } else {\r\n          resolve({ joukkue_id: joukkueId });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function getAllTehtävät() {\r\n    return new Promise((resolve, reject) => {\r\n      const query = 'SELECT * FROM tehtävät';\r\n      db.query(query, (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(results);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  function createTehtävä(newTehtävä) {\r\n    return new Promise((resolve, reject) => {\r\n      const { tehtävä_nimi, max_aika } = newTehtävä;\r\n      const insertQuery = 'INSERT INTO tehtävät (tehtävä_nimi, max_aika) VALUES (?, ?)';\r\n      db.query(insertQuery, [tehtävä_nimi, max_aika], (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          const insertedTehtäväId = results.insertId;\r\n          const selectQuery = 'SELECT * FROM tehtävät WHERE id = ?';\r\n          db.query(selectQuery, [insertedTehtäväId], (selectErr, selectResults) => {\r\n            if (selectErr) {\r\n              reject(selectErr);\r\n            } else {\r\n              resolve(selectResults[0]);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  \r\n  function deleteTehtävä(tehtäväId) {\r\n    return new Promise((resolve, reject) => {\r\n      const query = 'DELETE FROM tehtävät WHERE id = ?';\r\n      db.query(query, [tehtäväId], (err, results) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else if (results.affectedRows === 0) {\r\n          resolve(null);\r\n        } else {\r\n          resolve({ id: tehtäväId });\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  \r\nfunction updateTehtävä(tehtäväId, updatedTehtävä) {\r\n  return new Promise((resolve, reject) => {\r\n    const { tehtävä_nimi, max_aika } = updatedTehtävä;\r\n    const query = 'UPDATE tehtävät SET tehtävä_nimi = ?, max_aika = ? WHERE id = ?';\r\n    db.query(query, [tehtävä_nimi, max_aika, tehtäväId], (err, results) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve(results.affectedRows > 0);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction getTehtäväById(tehtäväId) {\r\n  return new Promise((resolve, reject) => {\r\n    const query = 'SELECT * FROM tehtävät WHERE id = ?';\r\n    db.query(query, [tehtäväId], (err, results) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else if (results.length === 0) {\r\n        resolve(null);\r\n      } else {\r\n        resolve(results[0]);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction insertAikataulu(era, tehtava, joukkue_id, aika) {\r\n  return new Promise((resolve, reject) => {\r\n    const query = 'INSERT INTO aikataulu (era, tehtava, joukkue_id, aika) VALUES (?, ?, ?, ?)';\r\n    db.query(query, [era, tehtava, joukkue_id, aika], (err, results) => {\r\n      if (err) {\r\n        console.error('Error inserting time into aikataulu:', err);\r\n        reject(err);\r\n      } else {\r\n        resolve(results);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction getAllTimes() {\r\n  return new Promise((resolve, reject) => {\r\n    const query = 'SELECT * FROM aikataulu';\r\n    db.query(query, (err, results) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve(results);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n\r\n  \r\n  module.exports = {\r\n    createJoukkue,\r\n    generateUniqueOsallistumisNro,\r\n    generateUniqueKerailyEra,\r\n    generateUniqueSemifinalist,\r\n    getAllJoukkueet,\r\n    getJoukkueById,\r\n    updateJoukkue,\r\n    deleteJoukkue,\r\n    getAllTehtävät,\r\n    createTehtävä,\r\n    deleteTehtävä,\r\n    updateTehtävä,\r\n    getTehtäväById,\r\n    insertAikataulu,\r\n    getAllTimes,\r\n    updateSemifinalist\r\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}