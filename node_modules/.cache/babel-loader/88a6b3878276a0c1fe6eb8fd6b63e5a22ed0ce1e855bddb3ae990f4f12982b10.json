{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\NewAjastinChild.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst NewAjastinChild = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [laps, setLaps] = useState([]); // State to store lap times\n  const [lapCount, setLapCount] = useState({}); // State to track the lap count for each team\n  const intervalIdRef = useRef(null);\n  useEffect(() => {\n    const startTimerHandler = data => {\n      const serverTimestamp = data.timestamp;\n      const localTimestamp = window.performance.now();\n      const networkDelay = localTimestamp - serverTimestamp;\n      const adjustedStartTime = serverTimestamp + networkDelay;\n      console.log('Timer started at (adjusted):', adjustedStartTime);\n      setStartTime(adjustedStartTime);\n      setIsRunning(true);\n    };\n    const lapTimerHandler = lapTimerData => {\n      console.log('Received lap timer event:', lapTimerData);\n      const {\n        teamId,\n        taskName\n      } = lapTimerData;\n      if (!startTime) {\n        console.error('Error: startTime is not set.');\n        return;\n      }\n      const currentElapsedTime = elapsedTime * 10;\n\n      // Calculate the lap time by subtracting all previous laps\n      const lapTime = currentElapsedTime - laps.reduce((total, lap) => total + lap.lapTime, 0);\n\n      // Check if the same team and task are recorded in the previous lap\n      const isSameLap = laps.length > 0 && laps[laps.length - 1].teamId === teamId && laps[laps.length - 1].taskName === taskName;\n\n      // Update the lap count for the team\n      setLapCount(prevLapCount => ({\n        ...prevLapCount,\n        [teamId]: (prevLapCount[teamId] || 0) + 1\n      }));\n\n      // Update the laps state with the new lap time or add to the previous lap\n      setLaps(prevLaps => {\n        const isSameLap = prevLaps.length > 0 && prevLaps[prevLaps.length - 1].teamId === teamId && prevLaps[prevLaps.length - 1].taskName === taskName;\n        return isSameLap ? [...prevLaps.slice(0, -1), {\n          teamId,\n          taskName,\n          lapTime\n        }] : [...prevLaps, {\n          teamId,\n          taskName,\n          lapTime: lapTime - (prevLaps.length > 0 ? prevLaps[prevLaps.length - 1].lapTime : 0)\n        }];\n      });\n    };\n\n    // Listen for timerStart event from the server\n    socket.on('timerStart', startTimerHandler);\n\n    // Listen for lapTimer event from the server\n    socket.on('lapTimerUpdate', lapTimerHandler);\n    return () => {\n      // Clean up event listeners when the component unmounts\n      socket.off('timerStart', startTimerHandler);\n      socket.off('lapTimerUpdate', lapTimerHandler);\n    };\n  }, [startTime, elapsedTime]);\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1);\n      }, 10);\n      intervalIdRef.current = intervalId;\n    } else {\n      clearInterval(intervalIdRef.current);\n    }\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [isRunning, elapsedTime]);\n  const getCombinedTime = teamId => {\n    // Get the laps for the specific team\n    const teamLaps = laps.filter(lap => lap.teamId === teamId);\n\n    // Check if all three laps are made\n    if (teamLaps.length === 3) {\n      // Calculate the combined time for the team\n      const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\n      return combinedTime;\n    } else {\n      return null; // If not all three laps are made, return null\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(elapsedTime * 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Lap Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: laps.map((lap, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Team: \", lap.teamId, \", Task: \", lap.taskName, \", Lap Time: \", formatTime(lap.lapTime), \" milliseconds\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Combined Times:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.keys(lapCount).map(teamId => {\n          const combinedTime = getCombinedTime(teamId);\n          return combinedTime !== null ? /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Team: \", teamId, \", Combined Time: \", formatTime(combinedTime)]\n          }, teamId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this) : null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(NewAjastinChild, \"fdPdxfKADj+MwGV/e3E0obOBtvQ=\");\n_c = NewAjastinChild;\nconst formatTime = milliseconds => {\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const remainingSeconds = totalSeconds % 60;\n  const hundredths = Math.floor(milliseconds % 1000 / 10);\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\n};\nexport default NewAjastinChild;\nvar _c;\n$RefreshReg$(_c, \"NewAjastinChild\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","socket","NewAjastinChild","_s","elapsedTime","setElapsedTime","isRunning","setIsRunning","startTime","setStartTime","laps","setLaps","lapCount","setLapCount","intervalIdRef","startTimerHandler","data","serverTimestamp","timestamp","localTimestamp","window","performance","now","networkDelay","adjustedStartTime","console","log","lapTimerHandler","lapTimerData","teamId","taskName","error","currentElapsedTime","lapTime","reduce","total","lap","isSameLap","length","prevLapCount","prevLaps","slice","on","off","intervalId","setInterval","prevElapsedTime","current","clearInterval","getCombinedTime","teamLaps","filter","combinedTime","totalTime","children","fileName","_jsxFileName","lineNumber","columnNumber","className","formatTime","map","index","Object","keys","_c","milliseconds","totalSeconds","Math","floor","minutes","remainingSeconds","hundredths","String","padStart","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/NewAjastinChild.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nconst NewAjastinChild = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [laps, setLaps] = useState([]); // State to store lap times\r\n  const [lapCount, setLapCount] = useState({}); // State to track the lap count for each team\r\n  const intervalIdRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const startTimerHandler = (data) => {\r\n      const serverTimestamp = data.timestamp;\r\n      const localTimestamp = window.performance.now();\r\n      const networkDelay = localTimestamp - serverTimestamp;\r\n\r\n      const adjustedStartTime = serverTimestamp + networkDelay;\r\n\r\n      console.log('Timer started at (adjusted):', adjustedStartTime);\r\n\r\n      setStartTime(adjustedStartTime);\r\n      setIsRunning(true);\r\n    };\r\n\r\n    const lapTimerHandler = (lapTimerData) => {\r\n        console.log('Received lap timer event:', lapTimerData);\r\n      \r\n        const { teamId, taskName } = lapTimerData;\r\n      \r\n        if (!startTime) {\r\n          console.error('Error: startTime is not set.');\r\n          return;\r\n        }\r\n      \r\n        const currentElapsedTime = elapsedTime * 10;\r\n      \r\n        // Calculate the lap time by subtracting all previous laps\r\n        const lapTime = currentElapsedTime - laps.reduce((total, lap) => total + lap.lapTime, 0);\r\n      \r\n        // Check if the same team and task are recorded in the previous lap\r\n        const isSameLap = laps.length > 0 && laps[laps.length - 1].teamId === teamId && laps[laps.length - 1].taskName === taskName;\r\n      \r\n        // Update the lap count for the team\r\n        setLapCount((prevLapCount) => ({\r\n          ...prevLapCount,\r\n          [teamId]: (prevLapCount[teamId] || 0) + 1,\r\n        }));\r\n      \r\n        // Update the laps state with the new lap time or add to the previous lap\r\nsetLaps((prevLaps) => {\r\n  const isSameLap = prevLaps.length > 0 && prevLaps[prevLaps.length - 1].teamId === teamId && prevLaps[prevLaps.length - 1].taskName === taskName;\r\n\r\n  return isSameLap\r\n    ? [...prevLaps.slice(0, -1), { teamId, taskName, lapTime }]\r\n    : [...prevLaps, { teamId, taskName, lapTime: lapTime - (prevLaps.length > 0 ? prevLaps[prevLaps.length - 1].lapTime : 0) }];\r\n});\r\n\r\n          \r\n          \r\n          \r\n          \r\n      };\r\n      \r\n    // Listen for timerStart event from the server\r\n    socket.on('timerStart', startTimerHandler);\r\n\r\n    // Listen for lapTimer event from the server\r\n    socket.on('lapTimerUpdate', lapTimerHandler);\r\n\r\n    return () => {\r\n      // Clean up event listeners when the component unmounts\r\n      socket.off('timerStart', startTimerHandler);\r\n      socket.off('lapTimerUpdate', lapTimerHandler);\r\n    };\r\n  }, [startTime, elapsedTime]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const intervalId = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1);\r\n      }, 10);\r\n      intervalIdRef.current = intervalId;\r\n    } else {\r\n      clearInterval(intervalIdRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(intervalIdRef.current);\r\n    };\r\n  }, [isRunning, elapsedTime]);\r\n\r\n  const getCombinedTime = (teamId) => {\r\n    // Get the laps for the specific team\r\n    const teamLaps = laps.filter((lap) => lap.teamId === teamId);\r\n\r\n    // Check if all three laps are made\r\n    if (teamLaps.length === 3) {\r\n      // Calculate the combined time for the team\r\n      const combinedTime = teamLaps.reduce((totalTime, lap) => totalTime + lap.lapTime, 0);\r\n      return combinedTime;\r\n    } else {\r\n      return null; // If not all three laps are made, return null\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Task Timer</h3>\r\n      <div className=\"timer\">\r\n        <span>{formatTime(elapsedTime * 10)}</span>\r\n      </div>\r\n      <div>\r\n        <h4>Lap Times:</h4>\r\n        <ul>\r\n          {laps.map((lap, index) => (\r\n            <li key={index}>\r\n              Team: {lap.teamId}, Task: {lap.taskName}, Lap Time: {formatTime(lap.lapTime)} milliseconds\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h4>Combined Times:</h4>\r\n        <ul>\r\n          {Object.keys(lapCount).map((teamId) => {\r\n            const combinedTime = getCombinedTime(teamId);\r\n            return combinedTime !== null ? (\r\n              <li key={teamId}>\r\n                Team: {teamId}, Combined Time: {formatTime(combinedTime)}\r\n              </li>\r\n            ) : null;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n  \r\n  \r\n\r\nconst formatTime = (milliseconds) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const remainingSeconds = totalSeconds % 60;\r\n  const hundredths = Math.floor((milliseconds % 1000) / 10);\r\n\r\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}:${String(hundredths).padStart(2, '0')}`;\r\n};\r\n\r\nexport default NewAjastinChild;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}