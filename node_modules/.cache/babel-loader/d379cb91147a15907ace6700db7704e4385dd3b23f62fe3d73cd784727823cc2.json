{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\kilpailu\\\\src\\\\Components\\\\AlkuEr\\xE4Lopetus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlkuEräLopetus = ({\n  eraName\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  useEffect(() => {\n    fetchTimes();\n  }, []);\n  const fetchTimes = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/aikataulu');\n      if (!response.ok) {\n        throw new Error('Failed to fetch times');\n      }\n      const data = await response.json();\n      setTimes(data);\n    } catch (error) {\n      console.error('Error fetching times:', error);\n    }\n  };\n  const calculateCombinedTimesByRound = () => {\n    const combinedTimesByRound = {};\n    times.forEach(time => {\n      const teamId = time.joukkue_id;\n      const round = time.era;\n\n      // Calculate combined time for each team in each round\n      if (!combinedTimesByRound[round]) {\n        combinedTimesByRound[round] = {};\n      }\n      if (!combinedTimesByRound[round][teamId]) {\n        combinedTimesByRound[round][teamId] = 0;\n      }\n      combinedTimesByRound[round][teamId] += time.aika;\n    });\n    return combinedTimesByRound;\n  };\n  const findWinnersByRound = () => {\n    const combinedTimesByRound = calculateCombinedTimesByRound();\n    const winnersByRound = {};\n    Object.keys(combinedTimesByRound).forEach(round => {\n      const combinedTimesByTeam = combinedTimesByRound[round];\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\n\n      // Store round winners\n      winnersByRound[round] = roundWinners;\n    });\n    return winnersByRound;\n  };\n  const findRoundWinners = combinedTimesByTeam => {\n    const roundWinners = [];\n    Object.keys(combinedTimesByTeam).forEach(teamId => {\n      const combinedTime = combinedTimesByTeam[teamId];\n\n      // Compare combined time with other teams in the round\n      const isWinner = Object.values(combinedTimesByTeam).every(otherCombinedTime => combinedTime <= otherCombinedTime);\n      if (isWinner) {\n        roundWinners.push({\n          teamId,\n          combinedTime\n        });\n      }\n    });\n    return roundWinners;\n  };\n  const findTopNonWinners = () => {\n    const combinedTimesByTeam = calculateCombinedTimesByRound();\n    const allCombinedTimes = Object.values(combinedTimesByTeam).flat();\n\n    // Sort all combined times in ascending order\n    const sortedCombinedTimes = allCombinedTimes.sort((a, b) => a - b);\n\n    // Get the top 6 non-winners\n    const topNonWinners = sortedCombinedTimes.slice(0, 6);\n    return topNonWinners;\n  };\n  const handleLopetaClick = async () => {\n    try {\n      // Fetch and process times\n      const winnersByRound = findWinnersByRound();\n      const topNonWinners = findTopNonWinners();\n\n      // Display or use winners by round and top non-winners as needed\n      console.log('Winners by Round:', winnersByRound);\n      console.log('Top Non-Winners:', topNonWinners);\n    } catch (error) {\n      console.error('Error handling lopeta click:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLopetaClick,\n      children: \"Lopeta er\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(AlkuEräLopetus, \"81bowZj0s+OEa3RiisSpRGrXe+U=\");\n_c = AlkuEräLopetus;\nexport default AlkuEräLopetus;\nvar _c;\n$RefreshReg$(_c, \"AlkuEr\\xE4Lopetus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlkuEräLopetus","eraName","_s","times","setTimes","fetchTimes","response","fetch","ok","Error","data","json","error","console","calculateCombinedTimesByRound","combinedTimesByRound","forEach","time","teamId","joukkue_id","round","era","aika","findWinnersByRound","winnersByRound","Object","keys","combinedTimesByTeam","roundWinners","findRoundWinners","combinedTime","isWinner","values","every","otherCombinedTime","push","findTopNonWinners","allCombinedTimes","flat","sortedCombinedTimes","sort","a","b","topNonWinners","slice","handleLopetaClick","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/kilpailu/src/Components/AlkuEräLopetus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AlkuEräLopetus = ({ eraName }) => {\r\n  const [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const fetchTimes = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/aikataulu');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch times');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTimes(data);\r\n    } catch (error) {\r\n      console.error('Error fetching times:', error);\r\n    }\r\n  };\r\n\r\n  const calculateCombinedTimesByRound = () => {\r\n    const combinedTimesByRound = {};\r\n\r\n    times.forEach((time) => {\r\n      const teamId = time.joukkue_id;\r\n      const round = time.era;\r\n\r\n      // Calculate combined time for each team in each round\r\n      if (!combinedTimesByRound[round]) {\r\n        combinedTimesByRound[round] = {};\r\n      }\r\n\r\n      if (!combinedTimesByRound[round][teamId]) {\r\n        combinedTimesByRound[round][teamId] = 0;\r\n      }\r\n\r\n      combinedTimesByRound[round][teamId] += time.aika;\r\n    });\r\n\r\n    return combinedTimesByRound;\r\n  };\r\n\r\n  const findWinnersByRound = () => {\r\n    const combinedTimesByRound = calculateCombinedTimesByRound();\r\n    const winnersByRound = {};\r\n\r\n    Object.keys(combinedTimesByRound).forEach((round) => {\r\n      const combinedTimesByTeam = combinedTimesByRound[round];\r\n      const roundWinners = findRoundWinners(combinedTimesByTeam);\r\n\r\n      // Store round winners\r\n      winnersByRound[round] = roundWinners;\r\n    });\r\n\r\n    return winnersByRound;\r\n  };\r\n\r\n  const findRoundWinners = (combinedTimesByTeam) => {\r\n    const roundWinners = [];\r\n    Object.keys(combinedTimesByTeam).forEach((teamId) => {\r\n      const combinedTime = combinedTimesByTeam[teamId];\r\n\r\n      // Compare combined time with other teams in the round\r\n      const isWinner = Object.values(combinedTimesByTeam).every(\r\n        (otherCombinedTime) => combinedTime <= otherCombinedTime\r\n      );\r\n\r\n      if (isWinner) {\r\n        roundWinners.push({ teamId, combinedTime });\r\n      }\r\n    });\r\n\r\n    return roundWinners;\r\n  };\r\n\r\n  const findTopNonWinners = () => {\r\n    const combinedTimesByTeam = calculateCombinedTimesByRound();\r\n    const allCombinedTimes = Object.values(combinedTimesByTeam).flat();\r\n    \r\n    // Sort all combined times in ascending order\r\n    const sortedCombinedTimes = allCombinedTimes.sort((a, b) => a - b);\r\n\r\n    // Get the top 6 non-winners\r\n    const topNonWinners = sortedCombinedTimes.slice(0, 6);\r\n    \r\n    return topNonWinners;\r\n  };\r\n\r\n  const handleLopetaClick = async () => {\r\n    try {\r\n      // Fetch and process times\r\n      const winnersByRound = findWinnersByRound();\r\n      const topNonWinners = findTopNonWinners();\r\n\r\n      // Display or use winners by round and top non-winners as needed\r\n      console.log('Winners by Round:', winnersByRound);\r\n      console.log('Top Non-Winners:', topNonWinners);\r\n    } catch (error) {\r\n      console.error('Error handling lopeta click:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLopetaClick}>Lopeta erä</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlkuEräLopetus;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}